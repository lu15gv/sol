/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* Machine Code Emitter                                                       *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

uint64_t SystemZMCCodeEmitter::getBinaryCodeForInstr(const MCInst &MI,
    SmallVectorImpl<MCFixup> &Fixups,
    const MCSubtargetInfo &STI) const {
  static const uint64_t InstBits[] = {
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(1509949440),	// A
    UINT64_C(1778384896),	// AD
    UINT64_C(260584255782938),	// ADB
    UINT64_C(3004825600),	// ADBR
    UINT64_C(10752),	// ADR
    UINT64_C(3016884224),	// ADTR
    UINT64_C(3016884224),	// ADTRA
    UINT64_C(2046820352),	// AE
    UINT64_C(260584255782922),	// AEB
    UINT64_C(3003777024),	// AEBR
    UINT64_C(14848),	// AER
    UINT64_C(213343910494208),	// AFI
    UINT64_C(249589139505160),	// AG
    UINT64_C(249589139505176),	// AGF
    UINT64_C(213339615526912),	// AGFI
    UINT64_C(3105357824),	// AGFR
    UINT64_C(249589139505208),	// AGH
    UINT64_C(2802515968),	// AGHI
    UINT64_C(259484744155353),	// AGHIK
    UINT64_C(3104309248),	// AGR
    UINT64_C(3118989312),	// AGRK
    UINT64_C(258385232527482),	// AGSI
    UINT64_C(1241513984),	// AH
    UINT64_C(3116892160),	// AHHHR
    UINT64_C(3117940736),	// AHHLR
    UINT64_C(2802450432),	// AHI
    UINT64_C(259484744155352),	// AHIK
    UINT64_C(249589139505274),	// AHY
    UINT64_C(224334731804672),	// AIH
    UINT64_C(1577058304),	// AL
    UINT64_C(249589139505304),	// ALC
    UINT64_C(249589139505288),	// ALCG
    UINT64_C(3112697856),	// ALCGR
    UINT64_C(3113746432),	// ALCR
    UINT64_C(213352500428800),	// ALFI
    UINT64_C(249589139505162),	// ALG
    UINT64_C(249589139505178),	// ALGF
    UINT64_C(213348205461504),	// ALGFI
    UINT64_C(3105488896),	// ALGFR
    UINT64_C(259484744155355),	// ALGHSIK
    UINT64_C(3104440320),	// ALGR
    UINT64_C(3119120384),	// ALGRK
    UINT64_C(258385232527486),	// ALGSI
    UINT64_C(3117023232),	// ALHHHR
    UINT64_C(3118071808),	// ALHHLR
    UINT64_C(259484744155354),	// ALHSIK
    UINT64_C(7680),	// ALR
    UINT64_C(3120168960),	// ALRK
    UINT64_C(258385232527470),	// ALSI
    UINT64_C(224343321739264),	// ALSIH
    UINT64_C(224347616706560),	// ALSIHN
    UINT64_C(249589139505246),	// ALY
    UINT64_C(274877906944000),	// AP
    UINT64_C(6656),	// AR
    UINT64_C(3120037888),	// ARK
    UINT64_C(258385232527466),	// ASI
    UINT64_C(2113929216),	// AU
    UINT64_C(15872),	// AUR
    UINT64_C(1845493760),	// AW
    UINT64_C(11776),	// AWR
    UINT64_C(3007971328),	// AXBR
    UINT64_C(13824),	// AXR
    UINT64_C(3017408512),	// AXTR
    UINT64_C(3017408512),	// AXTRA
    UINT64_C(249589139505242),	// AY
    UINT64_C(1206910976),	// B
    UINT64_C(2990538752),	// BAKR
    UINT64_C(1157627904),	// BAL
    UINT64_C(1280),	// BALR
    UINT64_C(1291845632),	// BAS
    UINT64_C(3328),	// BASR
    UINT64_C(3072),	// BASSM
    UINT64_C(1199570944),	// BAsmE
    UINT64_C(1193279488),	// BAsmH
    UINT64_C(1201668096),	// BAsmHE
    UINT64_C(1195376640),	// BAsmL
    UINT64_C(1203765248),	// BAsmLE
    UINT64_C(1197473792),	// BAsmLH
    UINT64_C(1195376640),	// BAsmM
    UINT64_C(1198522368),	// BAsmNE
    UINT64_C(1204813824),	// BAsmNH
    UINT64_C(1196425216),	// BAsmNHE
    UINT64_C(1202716672),	// BAsmNL
    UINT64_C(1194328064),	// BAsmNLE
    UINT64_C(1200619520),	// BAsmNLH
    UINT64_C(1202716672),	// BAsmNM
    UINT64_C(1205862400),	// BAsmNO
    UINT64_C(1204813824),	// BAsmNP
    UINT64_C(1198522368),	// BAsmNZ
    UINT64_C(1192230912),	// BAsmO
    UINT64_C(1193279488),	// BAsmP
    UINT64_C(1199570944),	// BAsmZ
    UINT64_C(1191182336),	// BC
    UINT64_C(1191182336),	// BCAsm
    UINT64_C(1792),	// BCR
    UINT64_C(1792),	// BCRAsm
    UINT64_C(1174405120),	// BCT
    UINT64_C(249589139505222),	// BCTG
    UINT64_C(3108372480),	// BCTGR
    UINT64_C(1536),	// BCTR
    UINT64_C(250619931656263),	// BI
    UINT64_C(250138895319111),	// BIAsmE
    UINT64_C(249726578458695),	// BIAsmH
    UINT64_C(250276334272583),	// BIAsmHE
    UINT64_C(249864017412167),	// BIAsmL
    UINT64_C(250413773226055),	// BIAsmLE
    UINT64_C(250001456365639),	// BIAsmLH
    UINT64_C(249864017412167),	// BIAsmM
    UINT64_C(250070175842375),	// BIAsmNE
    UINT64_C(250482492702791),	// BIAsmNH
    UINT64_C(249932736888903),	// BIAsmNHE
    UINT64_C(250345053749319),	// BIAsmNL
    UINT64_C(249795297935431),	// BIAsmNLE
    UINT64_C(250207614795847),	// BIAsmNLH
    UINT64_C(250345053749319),	// BIAsmNM
    UINT64_C(250551212179527),	// BIAsmNO
    UINT64_C(250482492702791),	// BIAsmNP
    UINT64_C(250070175842375),	// BIAsmNZ
    UINT64_C(249657858981959),	// BIAsmO
    UINT64_C(249726578458695),	// BIAsmP
    UINT64_C(250138895319111),	// BIAsmZ
    UINT64_C(249589139505223),	// BIC
    UINT64_C(249589139505223),	// BICAsm
    UINT64_C(218802813927424),	// BPP
    UINT64_C(216603790671872),	// BPRP
    UINT64_C(2032),	// BR
    UINT64_C(2802122752),	// BRAS
    UINT64_C(211127707369472),	// BRASL
    UINT64_C(1920),	// BRAsmE
    UINT64_C(1824),	// BRAsmH
    UINT64_C(1952),	// BRAsmHE
    UINT64_C(1856),	// BRAsmL
    UINT64_C(1984),	// BRAsmLE
    UINT64_C(1888),	// BRAsmLH
    UINT64_C(1856),	// BRAsmM
    UINT64_C(1904),	// BRAsmNE
    UINT64_C(2000),	// BRAsmNH
    UINT64_C(1872),	// BRAsmNHE
    UINT64_C(1968),	// BRAsmNL
    UINT64_C(1840),	// BRAsmNLE
    UINT64_C(1936),	// BRAsmNLH
    UINT64_C(1968),	// BRAsmNM
    UINT64_C(2016),	// BRAsmNO
    UINT64_C(2000),	// BRAsmNP
    UINT64_C(1904),	// BRAsmNZ
    UINT64_C(1808),	// BRAsmO
    UINT64_C(1824),	// BRAsmP
    UINT64_C(1920),	// BRAsmZ
    UINT64_C(2802057216),	// BRC
    UINT64_C(2802057216),	// BRCAsm
    UINT64_C(211123412402176),	// BRCL
    UINT64_C(211123412402176),	// BRCLAsm
    UINT64_C(2802188288),	// BRCT
    UINT64_C(2802253824),	// BRCTG
    UINT64_C(224326141870080),	// BRCTH
    UINT64_C(2214592512),	// BRXH
    UINT64_C(259484744155204),	// BRXHG
    UINT64_C(2231369728),	// BRXLE
    UINT64_C(259484744155205),	// BRXLG
    UINT64_C(2992242688),	// BSA
    UINT64_C(2992111616),	// BSG
    UINT64_C(2816),	// BSM
    UINT64_C(2248146944),	// BXH
    UINT64_C(258385232527428),	// BXHG
    UINT64_C(2264924160),	// BXLE
    UINT64_C(258385232527429),	// BXLEG
    UINT64_C(1493172224),	// C
    UINT64_C(1761607680),	// CD
    UINT64_C(260584255782937),	// CDB
    UINT64_C(3004760064),	// CDBR
    UINT64_C(3012886528),	// CDFBR
    UINT64_C(3012886528),	// CDFBRA
    UINT64_C(3014983680),	// CDFR
    UINT64_C(3109093376),	// CDFTR
    UINT64_C(3013935104),	// CDGBR
    UINT64_C(3013935104),	// CDGBRA
    UINT64_C(3016032256),	// CDGR
    UINT64_C(3018915840),	// CDGTR
    UINT64_C(3018915840),	// CDGTRA
    UINT64_C(3012624384),	// CDLFBR
    UINT64_C(3109224448),	// CDLFTR
    UINT64_C(3013672960),	// CDLGBR
    UINT64_C(3109158912),	// CDLGTR
    UINT64_C(260584255783086),	// CDPT
    UINT64_C(10496),	// CDR
    UINT64_C(3137339392),	// CDS
    UINT64_C(258385232527422),	// CDSG
    UINT64_C(3019046912),	// CDSTR
    UINT64_C(258385232527409),	// CDSY
    UINT64_C(3018063872),	// CDTR
    UINT64_C(3018981376),	// CDUTR
    UINT64_C(260584255783082),	// CDZT
    UINT64_C(2030043136),	// CE
    UINT64_C(260584255782921),	// CEB
    UINT64_C(3003711488),	// CEBR
    UINT64_C(3019112448),	// CEDTR
    UINT64_C(3012820992),	// CEFBR
    UINT64_C(3012820992),	// CEFBRA
    UINT64_C(3014918144),	// CEFR
    UINT64_C(3013869568),	// CEGBR
    UINT64_C(3013869568),	// CEGBRA
    UINT64_C(3015966720),	// CEGR
    UINT64_C(3012558848),	// CELFBR
    UINT64_C(3013607424),	// CELGBR
    UINT64_C(14592),	// CER
    UINT64_C(3019636736),	// CEXTR
    UINT64_C(2988048384),	// CFC
    UINT64_C(3013148672),	// CFDBR
    UINT64_C(3013148672),	// CFDBRA
    UINT64_C(3015245824),	// CFDR
    UINT64_C(3108044800),	// CFDTR
    UINT64_C(3013083136),	// CFEBR
    UINT64_C(3013083136),	// CFEBRA
    UINT64_C(3015180288),	// CFER
    UINT64_C(213361090363392),	// CFI
    UINT64_C(3013214208),	// CFXBR
    UINT64_C(3013214208),	// CFXBRA
    UINT64_C(3015311360),	// CFXR
    UINT64_C(3108569088),	// CFXTR
    UINT64_C(249589139505184),	// CG
    UINT64_C(3014197248),	// CGDBR
    UINT64_C(3014197248),	// CGDBRA
    UINT64_C(3016294400),	// CGDR
    UINT64_C(3017867264),	// CGDTR
    UINT64_C(3017867264),	// CGDTRA
    UINT64_C(3014131712),	// CGEBR
    UINT64_C(3014131712),	// CGEBRA
    UINT64_C(3016228864),	// CGER
    UINT64_C(249589139505200),	// CGF
    UINT64_C(213356795396096),	// CGFI
    UINT64_C(3106930688),	// CGFR
    UINT64_C(217754841907200),	// CGFRL
    UINT64_C(249589139505204),	// CGH
    UINT64_C(2802778112),	// CGHI
    UINT64_C(217720482168832),	// CGHRL
    UINT64_C(252166119882752),	// CGHSI
    UINT64_C(259484744155388),	// CGIB
    UINT64_C(259484744155388),	// CGIBAsm
    UINT64_C(259519103893756),	// CGIBAsmE
    UINT64_C(259493334089980),	// CGIBAsmH
    UINT64_C(259527693828348),	// CGIBAsmHE
    UINT64_C(259501924024572),	// CGIBAsmL
    UINT64_C(259536283762940),	// CGIBAsmLE
    UINT64_C(259510513959164),	// CGIBAsmLH
    UINT64_C(259510513959164),	// CGIBAsmNE
    UINT64_C(259536283762940),	// CGIBAsmNH
    UINT64_C(259501924024572),	// CGIBAsmNHE
    UINT64_C(259527693828348),	// CGIBAsmNL
    UINT64_C(259493334089980),	// CGIBAsmNLE
    UINT64_C(259519103893756),	// CGIBAsmNLH
    UINT64_C(259484744155260),	// CGIJ
    UINT64_C(259484744155260),	// CGIJAsm
    UINT64_C(259519103893628),	// CGIJAsmE
    UINT64_C(259493334089852),	// CGIJAsmH
    UINT64_C(259527693828220),	// CGIJAsmHE
    UINT64_C(259501924024444),	// CGIJAsmL
    UINT64_C(259536283762812),	// CGIJAsmLE
    UINT64_C(259510513959036),	// CGIJAsmLH
    UINT64_C(259510513959036),	// CGIJAsmNE
    UINT64_C(259536283762812),	// CGIJAsmNH
    UINT64_C(259501924024444),	// CGIJAsmNHE
    UINT64_C(259527693828220),	// CGIJAsmNL
    UINT64_C(259493334089852),	// CGIJAsmNLE
    UINT64_C(259519103893628),	// CGIJAsmNLH
    UINT64_C(259484744155248),	// CGIT
    UINT64_C(259484744155248),	// CGITAsm
    UINT64_C(259484744188016),	// CGITAsmE
    UINT64_C(259484744163440),	// CGITAsmH
    UINT64_C(259484744196208),	// CGITAsmHE
    UINT64_C(259484744171632),	// CGITAsmL
    UINT64_C(259484744204400),	// CGITAsmLE
    UINT64_C(259484744179824),	// CGITAsmLH
    UINT64_C(259484744179824),	// CGITAsmNE
    UINT64_C(259484744204400),	// CGITAsmNH
    UINT64_C(259484744171632),	// CGITAsmNHE
    UINT64_C(259484744196208),	// CGITAsmNL
    UINT64_C(259484744163440),	// CGITAsmNLE
    UINT64_C(259484744188016),	// CGITAsmNLH
    UINT64_C(3105882112),	// CGR
    UINT64_C(259484744155364),	// CGRB
    UINT64_C(259484744155364),	// CGRBAsm
    UINT64_C(259484744188132),	// CGRBAsmE
    UINT64_C(259484744163556),	// CGRBAsmH
    UINT64_C(259484744196324),	// CGRBAsmHE
    UINT64_C(259484744171748),	// CGRBAsmL
    UINT64_C(259484744204516),	// CGRBAsmLE
    UINT64_C(259484744179940),	// CGRBAsmLH
    UINT64_C(259484744179940),	// CGRBAsmNE
    UINT64_C(259484744204516),	// CGRBAsmNH
    UINT64_C(259484744171748),	// CGRBAsmNHE
    UINT64_C(259484744196324),	// CGRBAsmNL
    UINT64_C(259484744163556),	// CGRBAsmNLE
    UINT64_C(259484744188132),	// CGRBAsmNLH
    UINT64_C(259484744155236),	// CGRJ
    UINT64_C(259484744155236),	// CGRJAsm
    UINT64_C(259484744188004),	// CGRJAsmE
    UINT64_C(259484744163428),	// CGRJAsmH
    UINT64_C(259484744196196),	// CGRJAsmHE
    UINT64_C(259484744171620),	// CGRJAsmL
    UINT64_C(259484744204388),	// CGRJAsmLE
    UINT64_C(259484744179812),	// CGRJAsmLH
    UINT64_C(259484744179812),	// CGRJAsmNE
    UINT64_C(259484744204388),	// CGRJAsmNH
    UINT64_C(259484744171620),	// CGRJAsmNHE
    UINT64_C(259484744196196),	// CGRJAsmNL
    UINT64_C(259484744163428),	// CGRJAsmNLE
    UINT64_C(259484744188004),	// CGRJAsmNLH
    UINT64_C(217737662038016),	// CGRL
    UINT64_C(3110076416),	// CGRT
    UINT64_C(3110076416),	// CGRTAsm
    UINT64_C(3110109184),	// CGRTAsmE
    UINT64_C(3110084608),	// CGRTAsmH
    UINT64_C(3110117376),	// CGRTAsmHE
    UINT64_C(3110092800),	// CGRTAsmL
    UINT64_C(3110125568),	// CGRTAsmLE
    UINT64_C(3110100992),	// CGRTAsmLH
    UINT64_C(3110100992),	// CGRTAsmNE
    UINT64_C(3110125568),	// CGRTAsmNH
    UINT64_C(3110092800),	// CGRTAsmNHE
    UINT64_C(3110117376),	// CGRTAsmNL
    UINT64_C(3110084608),	// CGRTAsmNLE
    UINT64_C(3110109184),	// CGRTAsmNLH
    UINT64_C(3014262784),	// CGXBR
    UINT64_C(3014262784),	// CGXBRA
    UINT64_C(3016359936),	// CGXR
    UINT64_C(3018391552),	// CGXTR
    UINT64_C(3018391552),	// CGXTRA
    UINT64_C(1224736768),	// CH
    UINT64_C(249589139505357),	// CHF
    UINT64_C(3117219840),	// CHHR
    UINT64_C(252148940013568),	// CHHSI
    UINT64_C(2802712576),	// CHI
    UINT64_C(3118268416),	// CHLR
    UINT64_C(217724777136128),	// CHRL
    UINT64_C(252183299751936),	// CHSI
    UINT64_C(249589139505273),	// CHY
    UINT64_C(259484744155390),	// CIB
    UINT64_C(259484744155390),	// CIBAsm
    UINT64_C(259519103893758),	// CIBAsmE
    UINT64_C(259493334089982),	// CIBAsmH
    UINT64_C(259527693828350),	// CIBAsmHE
    UINT64_C(259501924024574),	// CIBAsmL
    UINT64_C(259536283762942),	// CIBAsmLE
    UINT64_C(259510513959166),	// CIBAsmLH
    UINT64_C(259510513959166),	// CIBAsmNE
    UINT64_C(259536283762942),	// CIBAsmNH
    UINT64_C(259501924024574),	// CIBAsmNHE
    UINT64_C(259527693828350),	// CIBAsmNL
    UINT64_C(259493334089982),	// CIBAsmNLE
    UINT64_C(259519103893758),	// CIBAsmNLH
    UINT64_C(224356206641152),	// CIH
    UINT64_C(259484744155262),	// CIJ
    UINT64_C(259484744155262),	// CIJAsm
    UINT64_C(259519103893630),	// CIJAsmE
    UINT64_C(259493334089854),	// CIJAsmH
    UINT64_C(259527693828222),	// CIJAsmHE
    UINT64_C(259501924024446),	// CIJAsmL
    UINT64_C(259536283762814),	// CIJAsmLE
    UINT64_C(259510513959038),	// CIJAsmLH
    UINT64_C(259510513959038),	// CIJAsmNE
    UINT64_C(259536283762814),	// CIJAsmNH
    UINT64_C(259501924024446),	// CIJAsmNHE
    UINT64_C(259527693828222),	// CIJAsmNL
    UINT64_C(259493334089854),	// CIJAsmNLE
    UINT64_C(259519103893630),	// CIJAsmNLH
    UINT64_C(259484744155250),	// CIT
    UINT64_C(259484744155250),	// CITAsm
    UINT64_C(259484744188018),	// CITAsmE
    UINT64_C(259484744163442),	// CITAsmH
    UINT64_C(259484744196210),	// CITAsmHE
    UINT64_C(259484744171634),	// CITAsmL
    UINT64_C(259484744204402),	// CITAsmLE
    UINT64_C(259484744179826),	// CITAsmLH
    UINT64_C(259484744179826),	// CITAsmNE
    UINT64_C(259484744204402),	// CITAsmNH
    UINT64_C(259484744171634),	// CITAsmNHE
    UINT64_C(259484744196210),	// CITAsmNL
    UINT64_C(259484744163442),	// CITAsmNLE
    UINT64_C(259484744188018),	// CITAsmNLH
    UINT64_C(2990604288),	// CKSM
    UINT64_C(1426063360),	// CL
    UINT64_C(234195976716288),	// CLC
    UINT64_C(3840),	// CLCL
    UINT64_C(2835349504),	// CLCLE
    UINT64_C(258385232527503),	// CLCLU
    UINT64_C(3013410816),	// CLFDBR
    UINT64_C(3108175872),	// CLFDTR
    UINT64_C(3013345280),	// CLFEBR
    UINT64_C(252187594719232),	// CLFHSI
    UINT64_C(213369680297984),	// CLFI
    UINT64_C(259484744155251),	// CLFIT
    UINT64_C(259484744155251),	// CLFITAsm
    UINT64_C(259484744188019),	// CLFITAsmE
    UINT64_C(259484744163443),	// CLFITAsmH
    UINT64_C(259484744196211),	// CLFITAsmHE
    UINT64_C(259484744171635),	// CLFITAsmL
    UINT64_C(259484744204403),	// CLFITAsmLE
    UINT64_C(259484744179827),	// CLFITAsmLH
    UINT64_C(259484744179827),	// CLFITAsmNE
    UINT64_C(259484744204403),	// CLFITAsmNH
    UINT64_C(259484744171635),	// CLFITAsmNHE
    UINT64_C(259484744196211),	// CLFITAsmNL
    UINT64_C(259484744163443),	// CLFITAsmNLE
    UINT64_C(259484744188019),	// CLFITAsmNLH
    UINT64_C(3013476352),	// CLFXBR
    UINT64_C(3108700160),	// CLFXTR
    UINT64_C(249589139505185),	// CLG
    UINT64_C(3014459392),	// CLGDBR
    UINT64_C(3108110336),	// CLGDTR
    UINT64_C(3014393856),	// CLGEBR
    UINT64_C(249589139505201),	// CLGF
    UINT64_C(213365385330688),	// CLGFI
    UINT64_C(3106996224),	// CLGFR
    UINT64_C(217763431841792),	// CLGFRL
    UINT64_C(217729072103424),	// CLGHRL
    UINT64_C(252170414850048),	// CLGHSI
    UINT64_C(259484744155389),	// CLGIB
    UINT64_C(259484744155389),	// CLGIBAsm
    UINT64_C(259519103893757),	// CLGIBAsmE
    UINT64_C(259493334089981),	// CLGIBAsmH
    UINT64_C(259527693828349),	// CLGIBAsmHE
    UINT64_C(259501924024573),	// CLGIBAsmL
    UINT64_C(259536283762941),	// CLGIBAsmLE
    UINT64_C(259510513959165),	// CLGIBAsmLH
    UINT64_C(259510513959165),	// CLGIBAsmNE
    UINT64_C(259536283762941),	// CLGIBAsmNH
    UINT64_C(259501924024573),	// CLGIBAsmNHE
    UINT64_C(259527693828349),	// CLGIBAsmNL
    UINT64_C(259493334089981),	// CLGIBAsmNLE
    UINT64_C(259519103893757),	// CLGIBAsmNLH
    UINT64_C(259484744155261),	// CLGIJ
    UINT64_C(259484744155261),	// CLGIJAsm
    UINT64_C(259519103893629),	// CLGIJAsmE
    UINT64_C(259493334089853),	// CLGIJAsmH
    UINT64_C(259527693828221),	// CLGIJAsmHE
    UINT64_C(259501924024445),	// CLGIJAsmL
    UINT64_C(259536283762813),	// CLGIJAsmLE
    UINT64_C(259510513959037),	// CLGIJAsmLH
    UINT64_C(259510513959037),	// CLGIJAsmNE
    UINT64_C(259536283762813),	// CLGIJAsmNH
    UINT64_C(259501924024445),	// CLGIJAsmNHE
    UINT64_C(259527693828221),	// CLGIJAsmNL
    UINT64_C(259493334089853),	// CLGIJAsmNLE
    UINT64_C(259519103893629),	// CLGIJAsmNLH
    UINT64_C(259484744155249),	// CLGIT
    UINT64_C(259484744155249),	// CLGITAsm
    UINT64_C(259484744188017),	// CLGITAsmE
    UINT64_C(259484744163441),	// CLGITAsmH
    UINT64_C(259484744196209),	// CLGITAsmHE
    UINT64_C(259484744171633),	// CLGITAsmL
    UINT64_C(259484744204401),	// CLGITAsmLE
    UINT64_C(259484744179825),	// CLGITAsmLH
    UINT64_C(259484744179825),	// CLGITAsmNE
    UINT64_C(259484744204401),	// CLGITAsmNH
    UINT64_C(259484744171633),	// CLGITAsmNHE
    UINT64_C(259484744196209),	// CLGITAsmNL
    UINT64_C(259484744163441),	// CLGITAsmNLE
    UINT64_C(259484744188017),	// CLGITAsmNLH
    UINT64_C(3105947648),	// CLGR
    UINT64_C(259484744155365),	// CLGRB
    UINT64_C(259484744155365),	// CLGRBAsm
    UINT64_C(259484744188133),	// CLGRBAsmE
    UINT64_C(259484744163557),	// CLGRBAsmH
    UINT64_C(259484744196325),	// CLGRBAsmHE
    UINT64_C(259484744171749),	// CLGRBAsmL
    UINT64_C(259484744204517),	// CLGRBAsmLE
    UINT64_C(259484744179941),	// CLGRBAsmLH
    UINT64_C(259484744179941),	// CLGRBAsmNE
    UINT64_C(259484744204517),	// CLGRBAsmNH
    UINT64_C(259484744171749),	// CLGRBAsmNHE
    UINT64_C(259484744196325),	// CLGRBAsmNL
    UINT64_C(259484744163557),	// CLGRBAsmNLE
    UINT64_C(259484744188133),	// CLGRBAsmNLH
    UINT64_C(259484744155237),	// CLGRJ
    UINT64_C(259484744155237),	// CLGRJAsm
    UINT64_C(259484744188005),	// CLGRJAsmE
    UINT64_C(259484744163429),	// CLGRJAsmH
    UINT64_C(259484744196197),	// CLGRJAsmHE
    UINT64_C(259484744171621),	// CLGRJAsmL
    UINT64_C(259484744204389),	// CLGRJAsmLE
    UINT64_C(259484744179813),	// CLGRJAsmLH
    UINT64_C(259484744179813),	// CLGRJAsmNE
    UINT64_C(259484744204389),	// CLGRJAsmNH
    UINT64_C(259484744171621),	// CLGRJAsmNHE
    UINT64_C(259484744196197),	// CLGRJAsmNL
    UINT64_C(259484744163429),	// CLGRJAsmNLE
    UINT64_C(259484744188005),	// CLGRJAsmNLH
    UINT64_C(217746251972608),	// CLGRL
    UINT64_C(3110141952),	// CLGRT
    UINT64_C(3110141952),	// CLGRTAsm
    UINT64_C(3110174720),	// CLGRTAsmE
    UINT64_C(3110150144),	// CLGRTAsmH
    UINT64_C(3110182912),	// CLGRTAsmHE
    UINT64_C(3110158336),	// CLGRTAsmL
    UINT64_C(3110191104),	// CLGRTAsmLE
    UINT64_C(3110166528),	// CLGRTAsmLH
    UINT64_C(3110166528),	// CLGRTAsmNE
    UINT64_C(3110191104),	// CLGRTAsmNH
    UINT64_C(3110158336),	// CLGRTAsmNHE
    UINT64_C(3110182912),	// CLGRTAsmNL
    UINT64_C(3110150144),	// CLGRTAsmNLE
    UINT64_C(3110174720),	// CLGRTAsmNLH
    UINT64_C(258385232527403),	// CLGT
    UINT64_C(258385232527403),	// CLGTAsm
    UINT64_C(258419592265771),	// CLGTAsmE
    UINT64_C(258393822461995),	// CLGTAsmH
    UINT64_C(258428182200363),	// CLGTAsmHE
    UINT64_C(258402412396587),	// CLGTAsmL
    UINT64_C(258436772134955),	// CLGTAsmLE
    UINT64_C(258411002331179),	// CLGTAsmLH
    UINT64_C(258411002331179),	// CLGTAsmNE
    UINT64_C(258436772134955),	// CLGTAsmNH
    UINT64_C(258402412396587),	// CLGTAsmNHE
    UINT64_C(258428182200363),	// CLGTAsmNL
    UINT64_C(258393822461995),	// CLGTAsmNLE
    UINT64_C(258419592265771),	// CLGTAsmNLH
    UINT64_C(3014524928),	// CLGXBR
    UINT64_C(3108634624),	// CLGXTR
    UINT64_C(249589139505359),	// CLHF
    UINT64_C(3117350912),	// CLHHR
    UINT64_C(252153234980864),	// CLHHSI
    UINT64_C(3118399488),	// CLHLR
    UINT64_C(217733367070720),	// CLHRL
    UINT64_C(2499805184),	// CLI
    UINT64_C(259484744155391),	// CLIB
    UINT64_C(259484744155391),	// CLIBAsm
    UINT64_C(259519103893759),	// CLIBAsmE
    UINT64_C(259493334089983),	// CLIBAsmH
    UINT64_C(259527693828351),	// CLIBAsmHE
    UINT64_C(259501924024575),	// CLIBAsmL
    UINT64_C(259536283762943),	// CLIBAsmLE
    UINT64_C(259510513959167),	// CLIBAsmLH
    UINT64_C(259510513959167),	// CLIBAsmNE
    UINT64_C(259536283762943),	// CLIBAsmNH
    UINT64_C(259501924024575),	// CLIBAsmNHE
    UINT64_C(259527693828351),	// CLIBAsmNL
    UINT64_C(259493334089983),	// CLIBAsmNLE
    UINT64_C(259519103893759),	// CLIBAsmNLH
    UINT64_C(224364796575744),	// CLIH
    UINT64_C(259484744155263),	// CLIJ
    UINT64_C(259484744155263),	// CLIJAsm
    UINT64_C(259519103893631),	// CLIJAsmE
    UINT64_C(259493334089855),	// CLIJAsmH
    UINT64_C(259527693828223),	// CLIJAsmHE
    UINT64_C(259501924024447),	// CLIJAsmL
    UINT64_C(259536283762815),	// CLIJAsmLE
    UINT64_C(259510513959039),	// CLIJAsmLH
    UINT64_C(259510513959039),	// CLIJAsmNE
    UINT64_C(259536283762815),	// CLIJAsmNH
    UINT64_C(259501924024447),	// CLIJAsmNHE
    UINT64_C(259527693828223),	// CLIJAsmNL
    UINT64_C(259493334089855),	// CLIJAsmNLE
    UINT64_C(259519103893631),	// CLIJAsmNLH
    UINT64_C(258385232527445),	// CLIY
    UINT64_C(3170893824),	// CLM
    UINT64_C(258385232527392),	// CLMH
    UINT64_C(258385232527393),	// CLMY
    UINT64_C(5376),	// CLR
    UINT64_C(259484744155383),	// CLRB
    UINT64_C(259484744155383),	// CLRBAsm
    UINT64_C(259484744188151),	// CLRBAsmE
    UINT64_C(259484744163575),	// CLRBAsmH
    UINT64_C(259484744196343),	// CLRBAsmHE
    UINT64_C(259484744171767),	// CLRBAsmL
    UINT64_C(259484744204535),	// CLRBAsmLE
    UINT64_C(259484744179959),	// CLRBAsmLH
    UINT64_C(259484744179959),	// CLRBAsmNE
    UINT64_C(259484744204535),	// CLRBAsmNH
    UINT64_C(259484744171767),	// CLRBAsmNHE
    UINT64_C(259484744196343),	// CLRBAsmNL
    UINT64_C(259484744163575),	// CLRBAsmNLE
    UINT64_C(259484744188151),	// CLRBAsmNLH
    UINT64_C(259484744155255),	// CLRJ
    UINT64_C(259484744155255),	// CLRJAsm
    UINT64_C(259484744188023),	// CLRJAsmE
    UINT64_C(259484744163447),	// CLRJAsmH
    UINT64_C(259484744196215),	// CLRJAsmHE
    UINT64_C(259484744171639),	// CLRJAsmL
    UINT64_C(259484744204407),	// CLRJAsmLE
    UINT64_C(259484744179831),	// CLRJAsmLH
    UINT64_C(259484744179831),	// CLRJAsmNE
    UINT64_C(259484744204407),	// CLRJAsmNH
    UINT64_C(259484744171639),	// CLRJAsmNHE
    UINT64_C(259484744196215),	// CLRJAsmNL
    UINT64_C(259484744163447),	// CLRJAsmNLE
    UINT64_C(259484744188023),	// CLRJAsmNLH
    UINT64_C(217767726809088),	// CLRL
    UINT64_C(3111321600),	// CLRT
    UINT64_C(3111321600),	// CLRTAsm
    UINT64_C(3111354368),	// CLRTAsmE
    UINT64_C(3111329792),	// CLRTAsmH
    UINT64_C(3111362560),	// CLRTAsmHE
    UINT64_C(3111337984),	// CLRTAsmL
    UINT64_C(3111370752),	// CLRTAsmLE
    UINT64_C(3111346176),	// CLRTAsmLH
    UINT64_C(3111346176),	// CLRTAsmNE
    UINT64_C(3111370752),	// CLRTAsmNH
    UINT64_C(3111337984),	// CLRTAsmNHE
    UINT64_C(3111362560),	// CLRTAsmNL
    UINT64_C(3111329792),	// CLRTAsmNLE
    UINT64_C(3111354368),	// CLRTAsmNLH
    UINT64_C(2992439296),	// CLST
    UINT64_C(258385232527395),	// CLT
    UINT64_C(258385232527395),	// CLTAsm
    UINT64_C(258419592265763),	// CLTAsmE
    UINT64_C(258393822461987),	// CLTAsmH
    UINT64_C(258428182200355),	// CLTAsmHE
    UINT64_C(258402412396579),	// CLTAsmL
    UINT64_C(258436772134947),	// CLTAsmLE
    UINT64_C(258411002331171),	// CLTAsmLH
    UINT64_C(258411002331171),	// CLTAsmNE
    UINT64_C(258436772134947),	// CLTAsmNH
    UINT64_C(258402412396579),	// CLTAsmNHE
    UINT64_C(258428182200355),	// CLTAsmNL
    UINT64_C(258393822461987),	// CLTAsmNLE
    UINT64_C(258419592265763),	// CLTAsmNLH
    UINT64_C(249589139505237),	// CLY
    UINT64_C(2992832512),	// CMPSC
    UINT64_C(273778395316224),	// CP
    UINT64_C(260584255783084),	// CPDT
    UINT64_C(3010592768),	// CPSDRdd
    UINT64_C(3010592768),	// CPSDRds
    UINT64_C(3010592768),	// CPSDRsd
    UINT64_C(3010592768),	// CPSDRss
    UINT64_C(260584255783085),	// CPXT
    UINT64_C(2991390720),	// CPYA
    UINT64_C(6400),	// CR
    UINT64_C(259484744155382),	// CRB
    UINT64_C(259484744155382),	// CRBAsm
    UINT64_C(259484744188150),	// CRBAsmE
    UINT64_C(259484744163574),	// CRBAsmH
    UINT64_C(259484744196342),	// CRBAsmHE
    UINT64_C(259484744171766),	// CRBAsmL
    UINT64_C(259484744204534),	// CRBAsmLE
    UINT64_C(259484744179958),	// CRBAsmLH
    UINT64_C(259484744179958),	// CRBAsmNE
    UINT64_C(259484744204534),	// CRBAsmNH
    UINT64_C(259484744171766),	// CRBAsmNHE
    UINT64_C(259484744196342),	// CRBAsmNL
    UINT64_C(259484744163574),	// CRBAsmNLE
    UINT64_C(259484744188150),	// CRBAsmNLH
    UINT64_C(3113156608),	// CRDTE
    UINT64_C(3113156608),	// CRDTEOpt
    UINT64_C(259484744155254),	// CRJ
    UINT64_C(259484744155254),	// CRJAsm
    UINT64_C(259484744188022),	// CRJAsmE
    UINT64_C(259484744163446),	// CRJAsmH
    UINT64_C(259484744196214),	// CRJAsmHE
    UINT64_C(259484744171638),	// CRJAsmL
    UINT64_C(259484744204406),	// CRJAsmLE
    UINT64_C(259484744179830),	// CRJAsmLH
    UINT64_C(259484744179830),	// CRJAsmNE
    UINT64_C(259484744204406),	// CRJAsmNH
    UINT64_C(259484744171638),	// CRJAsmNHE
    UINT64_C(259484744196214),	// CRJAsmNL
    UINT64_C(259484744163446),	// CRJAsmNLE
    UINT64_C(259484744188022),	// CRJAsmNLH
    UINT64_C(217759136874496),	// CRL
    UINT64_C(3111256064),	// CRT
    UINT64_C(3111256064),	// CRTAsm
    UINT64_C(3111288832),	// CRTAsmE
    UINT64_C(3111264256),	// CRTAsmH
    UINT64_C(3111297024),	// CRTAsmHE
    UINT64_C(3111272448),	// CRTAsmL
    UINT64_C(3111305216),	// CRTAsmLE
    UINT64_C(3111280640),	// CRTAsmLH
    UINT64_C(3111280640),	// CRTAsmNE
    UINT64_C(3111305216),	// CRTAsmNH
    UINT64_C(3111272448),	// CRTAsmNHE
    UINT64_C(3111297024),	// CRTAsmNL
    UINT64_C(3111264256),	// CRTAsmNLE
    UINT64_C(3111288832),	// CRTAsmNLH
    UINT64_C(3120562176),	// CS
    UINT64_C(2989490176),	// CSCH
    UINT64_C(3017998336),	// CSDTR
    UINT64_C(258385232527408),	// CSG
    UINT64_C(2991587328),	// CSP
    UINT64_C(3112828928),	// CSPG
    UINT64_C(219910915489792),	// CSST
    UINT64_C(3018522624),	// CSXTR
    UINT64_C(258385232527380),	// CSY
    UINT64_C(2997288960),	// CU12
    UINT64_C(2997288960),	// CU12Opt
    UINT64_C(3115319296),	// CU14
    UINT64_C(3115319296),	// CU14Opt
    UINT64_C(2997223424),	// CU21
    UINT64_C(2997223424),	// CU21Opt
    UINT64_C(3115384832),	// CU24
    UINT64_C(3115384832),	// CU24Opt
    UINT64_C(3115450368),	// CU41
    UINT64_C(3115515904),	// CU42
    UINT64_C(3017932800),	// CUDTR
    UINT64_C(2992046080),	// CUSE
    UINT64_C(2997288960),	// CUTFU
    UINT64_C(2997288960),	// CUTFUOpt
    UINT64_C(2997223424),	// CUUTF
    UINT64_C(2997223424),	// CUUTFOpt
    UINT64_C(3018457088),	// CUXTR
    UINT64_C(1325400064),	// CVB
    UINT64_C(249589139505166),	// CVBG
    UINT64_C(249589139505158),	// CVBY
    UINT64_C(1308622848),	// CVD
    UINT64_C(249589139505198),	// CVDG
    UINT64_C(249589139505190),	// CVDY
    UINT64_C(3007905792),	// CXBR
    UINT64_C(3012952064),	// CXFBR
    UINT64_C(3012952064),	// CXFBRA
    UINT64_C(3015049216),	// CXFR
    UINT64_C(3109617664),	// CXFTR
    UINT64_C(3014000640),	// CXGBR
    UINT64_C(3014000640),	// CXGBRA
    UINT64_C(3016097792),	// CXGR
    UINT64_C(3019440128),	// CXGTR
    UINT64_C(3019440128),	// CXGTRA
    UINT64_C(3012689920),	// CXLFBR
    UINT64_C(3109748736),	// CXLFTR
    UINT64_C(3013738496),	// CXLGBR
    UINT64_C(3109683200),	// CXLGTR
    UINT64_C(260584255783087),	// CXPT
    UINT64_C(3010002944),	// CXR
    UINT64_C(3019571200),	// CXSTR
    UINT64_C(3018588160),	// CXTR
    UINT64_C(3019505664),	// CXUTR
    UINT64_C(260584255783083),	// CXZT
    UINT64_C(249589139505241),	// CY
    UINT64_C(260584255783080),	// CZDT
    UINT64_C(260584255783081),	// CZXT
    UINT64_C(1560281088),	// D
    UINT64_C(1828716544),	// DD
    UINT64_C(260584255782941),	// DDB
    UINT64_C(3005022208),	// DDBR
    UINT64_C(11520),	// DDR
    UINT64_C(3016818688),	// DDTR
    UINT64_C(3016818688),	// DDTRA
    UINT64_C(2097152000),	// DE
    UINT64_C(260584255782925),	// DEB
    UINT64_C(3003973632),	// DEBR
    UINT64_C(15616),	// DER
    UINT64_C(3107520512),	// DFLTCC
    UINT64_C(2197815296),	// DIAG
    UINT64_C(3009085440),	// DIDBR
    UINT64_C(3008561152),	// DIEBR
    UINT64_C(249589139505303),	// DL
    UINT64_C(249589139505287),	// DLG
    UINT64_C(3112632320),	// DLGR
    UINT64_C(3113680896),	// DLR
    UINT64_C(278176441827328),	// DP
    UINT64_C(7424),	// DR
    UINT64_C(249589139505165),	// DSG
    UINT64_C(249589139505181),	// DSGF
    UINT64_C(3105685504),	// DSGFR
    UINT64_C(3104636928),	// DSGR
    UINT64_C(3008167936),	// DXBR
    UINT64_C(2989293568),	// DXR
    UINT64_C(3017342976),	// DXTR
    UINT64_C(3017342976),	// DXTRA
    UINT64_C(2991521792),	// EAR
    UINT64_C(258385232527436),	// ECAG
    UINT64_C(3001286656),	// ECCTR
    UINT64_C(3001876480),	// ECPGA
    UINT64_C(219906620522496),	// ECTG
    UINT64_C(244091581366272),	// ED
    UINT64_C(245191092994048),	// EDMK
    UINT64_C(3018129408),	// EEDTR
    UINT64_C(3018653696),	// EEXTR
    UINT64_C(3012296704),	// EFPC
    UINT64_C(3113877504),	// EPAIR
    UINT64_C(2988834816),	// EPAR
    UINT64_C(3001352192),	// EPCTR
    UINT64_C(3113025536),	// EPSW
    UINT64_C(2991128576),	// EREG
    UINT64_C(3104702464),	// EREGG
    UINT64_C(3113943040),	// ESAIR
    UINT64_C(2988900352),	// ESAR
    UINT64_C(3018260480),	// ESDTR
    UINT64_C(3114074112),	// ESEA
    UINT64_C(2991194112),	// ESTA
    UINT64_C(3018784768),	// ESXTR
    UINT64_C(3001810944),	// ETND
    UINT64_C(1140850688),	// EX
    UINT64_C(217703302299648),	// EXRL
    UINT64_C(3009347584),	// FIDBR
    UINT64_C(3009347584),	// FIDBRA
    UINT64_C(3011444736),	// FIDR
    UINT64_C(3017211904),	// FIDTR
    UINT64_C(3008823296),	// FIEBR
    UINT64_C(3008823296),	// FIEBRA
    UINT64_C(3010920448),	// FIER
    UINT64_C(3007774720),	// FIXBR
    UINT64_C(3007774720),	// FIXBRA
    UINT64_C(3009871872),	// FIXR
    UINT64_C(3017736192),	// FIXTR
    UINT64_C(3112370176),	// FLOGR
    UINT64_C(9216),	// HDR
    UINT64_C(13312),	// HER
    UINT64_C(2989555712),	// HSCH
    UINT64_C(2988703744),	// IAC
    UINT64_C(1124073472),	// IC
    UINT64_C(1124073472),	// IC32
    UINT64_C(249589139505267),	// IC32Y
    UINT64_C(3204448256),	// ICM
    UINT64_C(258385232527488),	// ICMH
    UINT64_C(258385232527489),	// ICMY
    UINT64_C(249589139505267),	// ICY
    UINT64_C(3113091072),	// IDTE
    UINT64_C(3113091072),	// IDTEOpt
    UINT64_C(3019243520),	// IEDTR
    UINT64_C(3019767808),	// IEXTR
    UINT64_C(211140592271360),	// IIHF
    UINT64_C(2768240640),	// IIHH
    UINT64_C(2768306176),	// IIHL
    UINT64_C(211144887238656),	// IILF
    UINT64_C(2768371712),	// IILH
    UINT64_C(2768437248),	// IILL
    UINT64_C(2987065344),	// IPK
    UINT64_C(2988572672),	// IPM
    UINT64_C(2988507136),	// IPTE
    UINT64_C(2988507136),	// IPTEOpt
    UINT64_C(2988507136),	// IPTEOptOpt
    UINT64_C(3115057152),	// IRBM
    UINT64_C(2989031424),	// ISKE
    UINT64_C(2988638208),	// IVSK
    UINT64_C(0),	// InsnE
    UINT64_C(0),	// InsnRI
    UINT64_C(0),	// InsnRIE
    UINT64_C(0),	// InsnRIL
    UINT64_C(0),	// InsnRILU
    UINT64_C(0),	// InsnRIS
    UINT64_C(0),	// InsnRR
    UINT64_C(0),	// InsnRRE
    UINT64_C(0),	// InsnRRF
    UINT64_C(0),	// InsnRRS
    UINT64_C(0),	// InsnRS
    UINT64_C(0),	// InsnRSE
    UINT64_C(0),	// InsnRSI
    UINT64_C(0),	// InsnRSY
    UINT64_C(0),	// InsnRX
    UINT64_C(0),	// InsnRXE
    UINT64_C(0),	// InsnRXF
    UINT64_C(0),	// InsnRXY
    UINT64_C(0),	// InsnS
    UINT64_C(0),	// InsnSI
    UINT64_C(0),	// InsnSIL
    UINT64_C(0),	// InsnSIY
    UINT64_C(0),	// InsnSS
    UINT64_C(0),	// InsnSSE
    UINT64_C(0),	// InsnSSF
    UINT64_C(2817785856),	// J
    UINT64_C(2810445824),	// JAsmE
    UINT64_C(2804154368),	// JAsmH
    UINT64_C(2812542976),	// JAsmHE
    UINT64_C(2806251520),	// JAsmL
    UINT64_C(2814640128),	// JAsmLE
    UINT64_C(2808348672),	// JAsmLH
    UINT64_C(2806251520),	// JAsmM
    UINT64_C(2809397248),	// JAsmNE
    UINT64_C(2815688704),	// JAsmNH
    UINT64_C(2807300096),	// JAsmNHE
    UINT64_C(2813591552),	// JAsmNL
    UINT64_C(2805202944),	// JAsmNLE
    UINT64_C(2811494400),	// JAsmNLH
    UINT64_C(2813591552),	// JAsmNM
    UINT64_C(2816737280),	// JAsmNO
    UINT64_C(2815688704),	// JAsmNP
    UINT64_C(2809397248),	// JAsmNZ
    UINT64_C(2803105792),	// JAsmO
    UINT64_C(2804154368),	// JAsmP
    UINT64_C(2810445824),	// JAsmZ
    UINT64_C(212154204553216),	// JG
    UINT64_C(211673168216064),	// JGAsmE
    UINT64_C(211260851355648),	// JGAsmH
    UINT64_C(211810607169536),	// JGAsmHE
    UINT64_C(211398290309120),	// JGAsmL
    UINT64_C(211948046123008),	// JGAsmLE
    UINT64_C(211535729262592),	// JGAsmLH
    UINT64_C(211398290309120),	// JGAsmM
    UINT64_C(211604448739328),	// JGAsmNE
    UINT64_C(212016765599744),	// JGAsmNH
    UINT64_C(211467009785856),	// JGAsmNHE
    UINT64_C(211879326646272),	// JGAsmNL
    UINT64_C(211329570832384),	// JGAsmNLE
    UINT64_C(211741887692800),	// JGAsmNLH
    UINT64_C(211879326646272),	// JGAsmNM
    UINT64_C(212085485076480),	// JGAsmNO
    UINT64_C(212016765599744),	// JGAsmNP
    UINT64_C(211604448739328),	// JGAsmNZ
    UINT64_C(211192131878912),	// JGAsmO
    UINT64_C(211260851355648),	// JGAsmP
    UINT64_C(211673168216064),	// JGAsmZ
    UINT64_C(260584255782936),	// KDB
    UINT64_C(3004694528),	// KDBR
    UINT64_C(3107586048),	// KDSA
    UINT64_C(3017801728),	// KDTR
    UINT64_C(260584255782920),	// KEB
    UINT64_C(3003645952),	// KEBR
    UINT64_C(3107848192),	// KIMD
    UINT64_C(3107913728),	// KLMD
    UINT64_C(3106799616),	// KM
    UINT64_C(3106471936),	// KMA
    UINT64_C(3105751040),	// KMAC
    UINT64_C(3106865152),	// KMC
    UINT64_C(3106734080),	// KMCTR
    UINT64_C(3106537472),	// KMF
    UINT64_C(3106603008),	// KMO
    UINT64_C(3007840256),	// KXBR
    UINT64_C(3018326016),	// KXTR
    UINT64_C(1476395008),	// L
    UINT64_C(1090519040),	// LA
    UINT64_C(258385232527608),	// LAA
    UINT64_C(258385232527592),	// LAAG
    UINT64_C(258385232527610),	// LAAL
    UINT64_C(258385232527594),	// LAALG
    UINT64_C(1358954496),	// LAE
    UINT64_C(249589139505269),	// LAEY
    UINT64_C(2583691264),	// LAM
    UINT64_C(258385232527514),	// LAMY
    UINT64_C(258385232527604),	// LAN
    UINT64_C(258385232527588),	// LANG
    UINT64_C(258385232527606),	// LAO
    UINT64_C(258385232527590),	// LAOG
    UINT64_C(211106232532992),	// LARL
    UINT64_C(251788162760704),	// LASP
    UINT64_C(249589139505311),	// LAT
    UINT64_C(258385232527607),	// LAX
    UINT64_C(258385232527591),	// LAXG
    UINT64_C(249589139505265),	// LAY
    UINT64_C(249589139505270),	// LB
    UINT64_C(249589139505344),	// LBH
    UINT64_C(3106275328),	// LBR
    UINT64_C(253987186016295),	// LCBB
    UINT64_C(2994995200),	// LCCTL
    UINT64_C(3004366848),	// LCDBR
    UINT64_C(3010658304),	// LCDFR
    UINT64_C(3010658304),	// LCDFR_32
    UINT64_C(8960),	// LCDR
    UINT64_C(3003318272),	// LCEBR
    UINT64_C(13056),	// LCER
    UINT64_C(3105030144),	// LCGFR
    UINT64_C(3103981568),	// LCGR
    UINT64_C(4864),	// LCR
    UINT64_C(3070230528),	// LCTL
    UINT64_C(258385232527407),	// LCTLG
    UINT64_C(3007512576),	// LCXBR
    UINT64_C(3009609728),	// LCXR
    UINT64_C(1744830464),	// LD
    UINT64_C(260584255782948),	// LDE
    UINT64_C(260584255782948),	// LDE32
    UINT64_C(260584255782916),	// LDEB
    UINT64_C(3003383808),	// LDEBR
    UINT64_C(3005480960),	// LDER
    UINT64_C(3017015296),	// LDETR
    UINT64_C(3015770112),	// LDGR
    UINT64_C(10240),	// LDR
    UINT64_C(10240),	// LDR32
    UINT64_C(3007643648),	// LDXBR
    UINT64_C(3007643648),	// LDXBRA
    UINT64_C(9472),	// LDXR
    UINT64_C(3017605120),	// LDXTR
    UINT64_C(260584255783013),	// LDY
    UINT64_C(2013265920),	// LE
    UINT64_C(3007578112),	// LEDBR
    UINT64_C(3007578112),	// LEDBRA
    UINT64_C(13568),	// LEDR
    UINT64_C(3017080832),	// LEDTR
    UINT64_C(14336),	// LER
    UINT64_C(3007709184),	// LEXBR
    UINT64_C(3007709184),	// LEXBRA
    UINT64_C(3009806336),	// LEXR
    UINT64_C(260584255783012),	// LEY
    UINT64_C(2998730752),	// LFAS
    UINT64_C(249589139505354),	// LFH
    UINT64_C(249589139505352),	// LFHAT
    UINT64_C(2996633600),	// LFPC
    UINT64_C(249589139505156),	// LG
    UINT64_C(249589139505285),	// LGAT
    UINT64_C(249589139505271),	// LGB
    UINT64_C(3104178176),	// LGBR
    UINT64_C(3016556544),	// LGDR
    UINT64_C(249589139505172),	// LGF
    UINT64_C(211110527500288),	// LGFI
    UINT64_C(3105095680),	// LGFR
    UINT64_C(215555818651648),	// LGFRL
    UINT64_C(249589139505228),	// LGG
    UINT64_C(249589139505173),	// LGH
    UINT64_C(2802384896),	// LGHI
    UINT64_C(3104243712),	// LGHR
    UINT64_C(215521458913280),	// LGHRL
    UINT64_C(3104047104),	// LGR
    UINT64_C(215538638782464),	// LGRL
    UINT64_C(249589139505229),	// LGSC
    UINT64_C(1207959552),	// LH
    UINT64_C(249589139505348),	// LHH
    UINT64_C(2802319360),	// LHI
    UINT64_C(3106340864),	// LHR
    UINT64_C(215525753880576),	// LHRL
    UINT64_C(249589139505272),	// LHY
    UINT64_C(249589139505300),	// LLC
    UINT64_C(249589139505346),	// LLCH
    UINT64_C(3113484288),	// LLCR
    UINT64_C(249589139505296),	// LLGC
    UINT64_C(3112435712),	// LLGCR
    UINT64_C(249589139505174),	// LLGF
    UINT64_C(249589139505309),	// LLGFAT
    UINT64_C(3105226752),	// LLGFR
    UINT64_C(215564408586240),	// LLGFRL
    UINT64_C(249589139505224),	// LLGFSG
    UINT64_C(249589139505297),	// LLGH
    UINT64_C(3112501248),	// LLGHR
    UINT64_C(215530048847872),	// LLGHRL
    UINT64_C(249589139505175),	// LLGT
    UINT64_C(249589139505308),	// LLGTAT
    UINT64_C(3105292288),	// LLGTR
    UINT64_C(249589139505301),	// LLH
    UINT64_C(249589139505350),	// LLHH
    UINT64_C(3113549824),	// LLHR
    UINT64_C(215512868978688),	// LLHRL
    UINT64_C(211166362075136),	// LLIHF
    UINT64_C(2769027072),	// LLIHH
    UINT64_C(2769092608),	// LLIHL
    UINT64_C(211170657042432),	// LLILF
    UINT64_C(2769158144),	// LLILH
    UINT64_C(2769223680),	// LLILL
    UINT64_C(249589139505210),	// LLZRGF
    UINT64_C(2550136832),	// LM
    UINT64_C(262783279038464),	// LMD
    UINT64_C(258385232527364),	// LMG
    UINT64_C(258385232527510),	// LMH
    UINT64_C(258385232527512),	// LMY
    UINT64_C(3004235776),	// LNDBR
    UINT64_C(3010527232),	// LNDFR
    UINT64_C(3010527232),	// LNDFR_32
    UINT64_C(8448),	// LNDR
    UINT64_C(3003187200),	// LNEBR
    UINT64_C(12544),	// LNER
    UINT64_C(3104899072),	// LNGFR
    UINT64_C(3103850496),	// LNGR
    UINT64_C(4352),	// LNR
    UINT64_C(3007381504),	// LNXBR
    UINT64_C(3009478656),	// LNXR
    UINT64_C(258385232527602),	// LOC
    UINT64_C(258385232527602),	// LOCAsm
    UINT64_C(258419592265970),	// LOCAsmE
    UINT64_C(258393822462194),	// LOCAsmH
    UINT64_C(258428182200562),	// LOCAsmHE
    UINT64_C(258402412396786),	// LOCAsmL
    UINT64_C(258436772135154),	// LOCAsmLE
    UINT64_C(258411002331378),	// LOCAsmLH
    UINT64_C(258402412396786),	// LOCAsmM
    UINT64_C(258415297298674),	// LOCAsmNE
    UINT64_C(258441067102450),	// LOCAsmNH
    UINT64_C(258406707364082),	// LOCAsmNHE
    UINT64_C(258432477167858),	// LOCAsmNL
    UINT64_C(258398117429490),	// LOCAsmNLE
    UINT64_C(258423887233266),	// LOCAsmNLH
    UINT64_C(258432477167858),	// LOCAsmNM
    UINT64_C(258445362069746),	// LOCAsmNO
    UINT64_C(258441067102450),	// LOCAsmNP
    UINT64_C(258415297298674),	// LOCAsmNZ
    UINT64_C(258389527494898),	// LOCAsmO
    UINT64_C(258393822462194),	// LOCAsmP
    UINT64_C(258419592265970),	// LOCAsmZ
    UINT64_C(258385232527584),	// LOCFH
    UINT64_C(258385232527584),	// LOCFHAsm
    UINT64_C(258419592265952),	// LOCFHAsmE
    UINT64_C(258393822462176),	// LOCFHAsmH
    UINT64_C(258428182200544),	// LOCFHAsmHE
    UINT64_C(258402412396768),	// LOCFHAsmL
    UINT64_C(258436772135136),	// LOCFHAsmLE
    UINT64_C(258411002331360),	// LOCFHAsmLH
    UINT64_C(258402412396768),	// LOCFHAsmM
    UINT64_C(258415297298656),	// LOCFHAsmNE
    UINT64_C(258441067102432),	// LOCFHAsmNH
    UINT64_C(258406707364064),	// LOCFHAsmNHE
    UINT64_C(258432477167840),	// LOCFHAsmNL
    UINT64_C(258398117429472),	// LOCFHAsmNLE
    UINT64_C(258423887233248),	// LOCFHAsmNLH
    UINT64_C(258432477167840),	// LOCFHAsmNM
    UINT64_C(258445362069728),	// LOCFHAsmNO
    UINT64_C(258441067102432),	// LOCFHAsmNP
    UINT64_C(258415297298656),	// LOCFHAsmNZ
    UINT64_C(258389527494880),	// LOCFHAsmO
    UINT64_C(258393822462176),	// LOCFHAsmP
    UINT64_C(258419592265952),	// LOCFHAsmZ
    UINT64_C(3118465024),	// LOCFHR
    UINT64_C(3118465024),	// LOCFHRAsm
    UINT64_C(3118497792),	// LOCFHRAsmE
    UINT64_C(3118473216),	// LOCFHRAsmH
    UINT64_C(3118505984),	// LOCFHRAsmHE
    UINT64_C(3118481408),	// LOCFHRAsmL
    UINT64_C(3118514176),	// LOCFHRAsmLE
    UINT64_C(3118489600),	// LOCFHRAsmLH
    UINT64_C(3118481408),	// LOCFHRAsmM
    UINT64_C(3118493696),	// LOCFHRAsmNE
    UINT64_C(3118518272),	// LOCFHRAsmNH
    UINT64_C(3118485504),	// LOCFHRAsmNHE
    UINT64_C(3118510080),	// LOCFHRAsmNL
    UINT64_C(3118477312),	// LOCFHRAsmNLE
    UINT64_C(3118501888),	// LOCFHRAsmNLH
    UINT64_C(3118510080),	// LOCFHRAsmNM
    UINT64_C(3118522368),	// LOCFHRAsmNO
    UINT64_C(3118518272),	// LOCFHRAsmNP
    UINT64_C(3118493696),	// LOCFHRAsmNZ
    UINT64_C(3118469120),	// LOCFHRAsmO
    UINT64_C(3118473216),	// LOCFHRAsmP
    UINT64_C(3118497792),	// LOCFHRAsmZ
    UINT64_C(258385232527586),	// LOCG
    UINT64_C(258385232527586),	// LOCGAsm
    UINT64_C(258419592265954),	// LOCGAsmE
    UINT64_C(258393822462178),	// LOCGAsmH
    UINT64_C(258428182200546),	// LOCGAsmHE
    UINT64_C(258402412396770),	// LOCGAsmL
    UINT64_C(258436772135138),	// LOCGAsmLE
    UINT64_C(258411002331362),	// LOCGAsmLH
    UINT64_C(258402412396770),	// LOCGAsmM
    UINT64_C(258415297298658),	// LOCGAsmNE
    UINT64_C(258441067102434),	// LOCGAsmNH
    UINT64_C(258406707364066),	// LOCGAsmNHE
    UINT64_C(258432477167842),	// LOCGAsmNL
    UINT64_C(258398117429474),	// LOCGAsmNLE
    UINT64_C(258423887233250),	// LOCGAsmNLH
    UINT64_C(258432477167842),	// LOCGAsmNM
    UINT64_C(258445362069730),	// LOCGAsmNO
    UINT64_C(258441067102434),	// LOCGAsmNP
    UINT64_C(258415297298658),	// LOCGAsmNZ
    UINT64_C(258389527494882),	// LOCGAsmO
    UINT64_C(258393822462178),	// LOCGAsmP
    UINT64_C(258419592265954),	// LOCGAsmZ
    UINT64_C(259484744155206),	// LOCGHI
    UINT64_C(259484744155206),	// LOCGHIAsm
    UINT64_C(259519103893574),	// LOCGHIAsmE
    UINT64_C(259493334089798),	// LOCGHIAsmH
    UINT64_C(259527693828166),	// LOCGHIAsmHE
    UINT64_C(259501924024390),	// LOCGHIAsmL
    UINT64_C(259536283762758),	// LOCGHIAsmLE
    UINT64_C(259510513958982),	// LOCGHIAsmLH
    UINT64_C(259501924024390),	// LOCGHIAsmM
    UINT64_C(259514808926278),	// LOCGHIAsmNE
    UINT64_C(259540578730054),	// LOCGHIAsmNH
    UINT64_C(259506218991686),	// LOCGHIAsmNHE
    UINT64_C(259531988795462),	// LOCGHIAsmNL
    UINT64_C(259497629057094),	// LOCGHIAsmNLE
    UINT64_C(259523398860870),	// LOCGHIAsmNLH
    UINT64_C(259531988795462),	// LOCGHIAsmNM
    UINT64_C(259544873697350),	// LOCGHIAsmNO
    UINT64_C(259540578730054),	// LOCGHIAsmNP
    UINT64_C(259514808926278),	// LOCGHIAsmNZ
    UINT64_C(259489039122502),	// LOCGHIAsmO
    UINT64_C(259493334089798),	// LOCGHIAsmP
    UINT64_C(259519103893574),	// LOCGHIAsmZ
    UINT64_C(3118596096),	// LOCGR
    UINT64_C(3118596096),	// LOCGRAsm
    UINT64_C(3118628864),	// LOCGRAsmE
    UINT64_C(3118604288),	// LOCGRAsmH
    UINT64_C(3118637056),	// LOCGRAsmHE
    UINT64_C(3118612480),	// LOCGRAsmL
    UINT64_C(3118645248),	// LOCGRAsmLE
    UINT64_C(3118620672),	// LOCGRAsmLH
    UINT64_C(3118612480),	// LOCGRAsmM
    UINT64_C(3118624768),	// LOCGRAsmNE
    UINT64_C(3118649344),	// LOCGRAsmNH
    UINT64_C(3118616576),	// LOCGRAsmNHE
    UINT64_C(3118641152),	// LOCGRAsmNL
    UINT64_C(3118608384),	// LOCGRAsmNLE
    UINT64_C(3118632960),	// LOCGRAsmNLH
    UINT64_C(3118641152),	// LOCGRAsmNM
    UINT64_C(3118653440),	// LOCGRAsmNO
    UINT64_C(3118649344),	// LOCGRAsmNP
    UINT64_C(3118624768),	// LOCGRAsmNZ
    UINT64_C(3118600192),	// LOCGRAsmO
    UINT64_C(3118604288),	// LOCGRAsmP
    UINT64_C(3118628864),	// LOCGRAsmZ
    UINT64_C(259484744155214),	// LOCHHI
    UINT64_C(259484744155214),	// LOCHHIAsm
    UINT64_C(259519103893582),	// LOCHHIAsmE
    UINT64_C(259493334089806),	// LOCHHIAsmH
    UINT64_C(259527693828174),	// LOCHHIAsmHE
    UINT64_C(259501924024398),	// LOCHHIAsmL
    UINT64_C(259536283762766),	// LOCHHIAsmLE
    UINT64_C(259510513958990),	// LOCHHIAsmLH
    UINT64_C(259501924024398),	// LOCHHIAsmM
    UINT64_C(259514808926286),	// LOCHHIAsmNE
    UINT64_C(259540578730062),	// LOCHHIAsmNH
    UINT64_C(259506218991694),	// LOCHHIAsmNHE
    UINT64_C(259531988795470),	// LOCHHIAsmNL
    UINT64_C(259497629057102),	// LOCHHIAsmNLE
    UINT64_C(259523398860878),	// LOCHHIAsmNLH
    UINT64_C(259531988795470),	// LOCHHIAsmNM
    UINT64_C(259544873697358),	// LOCHHIAsmNO
    UINT64_C(259540578730062),	// LOCHHIAsmNP
    UINT64_C(259514808926286),	// LOCHHIAsmNZ
    UINT64_C(259489039122510),	// LOCHHIAsmO
    UINT64_C(259493334089806),	// LOCHHIAsmP
    UINT64_C(259519103893582),	// LOCHHIAsmZ
    UINT64_C(259484744155202),	// LOCHI
    UINT64_C(259484744155202),	// LOCHIAsm
    UINT64_C(259519103893570),	// LOCHIAsmE
    UINT64_C(259493334089794),	// LOCHIAsmH
    UINT64_C(259527693828162),	// LOCHIAsmHE
    UINT64_C(259501924024386),	// LOCHIAsmL
    UINT64_C(259536283762754),	// LOCHIAsmLE
    UINT64_C(259510513958978),	// LOCHIAsmLH
    UINT64_C(259501924024386),	// LOCHIAsmM
    UINT64_C(259514808926274),	// LOCHIAsmNE
    UINT64_C(259540578730050),	// LOCHIAsmNH
    UINT64_C(259506218991682),	// LOCHIAsmNHE
    UINT64_C(259531988795458),	// LOCHIAsmNL
    UINT64_C(259497629057090),	// LOCHIAsmNLE
    UINT64_C(259523398860866),	// LOCHIAsmNLH
    UINT64_C(259531988795458),	// LOCHIAsmNM
    UINT64_C(259544873697346),	// LOCHIAsmNO
    UINT64_C(259540578730050),	// LOCHIAsmNP
    UINT64_C(259514808926274),	// LOCHIAsmNZ
    UINT64_C(259489039122498),	// LOCHIAsmO
    UINT64_C(259493334089794),	// LOCHIAsmP
    UINT64_C(259519103893570),	// LOCHIAsmZ
    UINT64_C(3119644672),	// LOCR
    UINT64_C(3119644672),	// LOCRAsm
    UINT64_C(3119677440),	// LOCRAsmE
    UINT64_C(3119652864),	// LOCRAsmH
    UINT64_C(3119685632),	// LOCRAsmHE
    UINT64_C(3119661056),	// LOCRAsmL
    UINT64_C(3119693824),	// LOCRAsmLE
    UINT64_C(3119669248),	// LOCRAsmLH
    UINT64_C(3119661056),	// LOCRAsmM
    UINT64_C(3119673344),	// LOCRAsmNE
    UINT64_C(3119697920),	// LOCRAsmNH
    UINT64_C(3119665152),	// LOCRAsmNHE
    UINT64_C(3119689728),	// LOCRAsmNL
    UINT64_C(3119656960),	// LOCRAsmNLE
    UINT64_C(3119681536),	// LOCRAsmNLH
    UINT64_C(3119689728),	// LOCRAsmNM
    UINT64_C(3119702016),	// LOCRAsmNO
    UINT64_C(3119697920),	// LOCRAsmNP
    UINT64_C(3119673344),	// LOCRAsmNZ
    UINT64_C(3119648768),	// LOCRAsmO
    UINT64_C(3119652864),	// LOCRAsmP
    UINT64_C(3119677440),	// LOCRAsmZ
    UINT64_C(2995060736),	// LPCTL
    UINT64_C(219919505424384),	// LPD
    UINT64_C(3004170240),	// LPDBR
    UINT64_C(3010461696),	// LPDFR
    UINT64_C(3010461696),	// LPDFR_32
    UINT64_C(219923800391680),	// LPDG
    UINT64_C(8192),	// LPDR
    UINT64_C(3003121664),	// LPEBR
    UINT64_C(12288),	// LPER
    UINT64_C(3104833536),	// LPGFR
    UINT64_C(3103784960),	// LPGR
    UINT64_C(2994733056),	// LPP
    UINT64_C(249589139505295),	// LPQ
    UINT64_C(4096),	// LPR
    UINT64_C(2181038080),	// LPSW
    UINT64_C(2998009856),	// LPSWE
    UINT64_C(3114926080),	// LPTEA
    UINT64_C(3007315968),	// LPXBR
    UINT64_C(3009413120),	// LPXR
    UINT64_C(6144),	// LR
    UINT64_C(2969567232),	// LRA
    UINT64_C(249589139505155),	// LRAG
    UINT64_C(249589139505171),	// LRAY
    UINT64_C(9472),	// LRDR
    UINT64_C(13568),	// LRER
    UINT64_C(215560113618944),	// LRL
    UINT64_C(249589139505182),	// LRV
    UINT64_C(249589139505167),	// LRVG
    UINT64_C(3104768000),	// LRVGR
    UINT64_C(249589139505183),	// LRVH
    UINT64_C(3105816576),	// LRVR
    UINT64_C(2995191808),	// LSCTL
    UINT64_C(249589139505170),	// LT
    UINT64_C(3004301312),	// LTDBR
    UINT64_C(3004301312),	// LTDBRCompare
    UINT64_C(8704),	// LTDR
    UINT64_C(3017146368),	// LTDTR
    UINT64_C(3003252736),	// LTEBR
    UINT64_C(3003252736),	// LTEBRCompare
    UINT64_C(12800),	// LTER
    UINT64_C(249589139505154),	// LTG
    UINT64_C(249589139505202),	// LTGF
    UINT64_C(3104964608),	// LTGFR
    UINT64_C(3103916032),	// LTGR
    UINT64_C(4608),	// LTR
    UINT64_C(3007447040),	// LTXBR
    UINT64_C(3007447040),	// LTXBRCompare
    UINT64_C(3009544192),	// LTXR
    UINT64_C(3017670656),	// LTXTR
    UINT64_C(2991259648),	// LURA
    UINT64_C(3104112640),	// LURAG
    UINT64_C(260584255782949),	// LXD
    UINT64_C(260584255782917),	// LXDB
    UINT64_C(3003449344),	// LXDBR
    UINT64_C(3005546496),	// LXDR
    UINT64_C(3017539584),	// LXDTR
    UINT64_C(260584255782950),	// LXE
    UINT64_C(260584255782918),	// LXEB
    UINT64_C(3003514880),	// LXEBR
    UINT64_C(3005612032),	// LXER
    UINT64_C(3009740800),	// LXR
    UINT64_C(249589139505240),	// LY
    UINT64_C(3010789376),	// LZDR
    UINT64_C(3010723840),	// LZER
    UINT64_C(249589139505211),	// LZRF
    UINT64_C(249589139505194),	// LZRG
    UINT64_C(3010854912),	// LZXR
    UINT64_C(1543503872),	// M
    UINT64_C(260584255782974),	// MAD
    UINT64_C(260584255782942),	// MADB
    UINT64_C(3005087744),	// MADBR
    UINT64_C(3007184896),	// MADR
    UINT64_C(260584255782958),	// MAE
    UINT64_C(260584255782926),	// MAEB
    UINT64_C(3004039168),	// MAEBR
    UINT64_C(3006136320),	// MAER
    UINT64_C(260584255782970),	// MAY
    UINT64_C(260584255782972),	// MAYH
    UINT64_C(3007053824),	// MAYHR
    UINT64_C(260584255782968),	// MAYL
    UINT64_C(3006791680),	// MAYLR
    UINT64_C(3006922752),	// MAYR
    UINT64_C(2936012800),	// MC
    UINT64_C(1811939328),	// MD
    UINT64_C(260584255782940),	// MDB
    UINT64_C(3004956672),	// MDBR
    UINT64_C(2080374784),	// MDE
    UINT64_C(260584255782924),	// MDEB
    UINT64_C(3003908096),	// MDEBR
    UINT64_C(15360),	// MDER
    UINT64_C(11264),	// MDR
    UINT64_C(3016753152),	// MDTR
    UINT64_C(3016753152),	// MDTRA
    UINT64_C(2080374784),	// ME
    UINT64_C(260584255782967),	// MEE
    UINT64_C(260584255782935),	// MEEB
    UINT64_C(3004628992),	// MEEBR
    UINT64_C(3006726144),	// MEER
    UINT64_C(15360),	// MER
    UINT64_C(249589139505244),	// MFY
    UINT64_C(249589139505284),	// MG
    UINT64_C(249589139505212),	// MGH
    UINT64_C(2802647040),	// MGHI
    UINT64_C(3119251456),	// MGRK
    UINT64_C(1275068416),	// MH
    UINT64_C(2802581504),	// MHI
    UINT64_C(249589139505276),	// MHY
    UINT64_C(249589139505302),	// ML
    UINT64_C(249589139505286),	// MLG
    UINT64_C(3112566784),	// MLGR
    UINT64_C(3113615360),	// MLR
    UINT64_C(277076930199552),	// MP
    UINT64_C(7168),	// MR
    UINT64_C(1895825408),	// MS
    UINT64_C(249589139505235),	// MSC
    UINT64_C(2989621248),	// MSCH
    UINT64_C(260584255782975),	// MSD
    UINT64_C(260584255782943),	// MSDB
    UINT64_C(3005153280),	// MSDBR
    UINT64_C(3007250432),	// MSDR
    UINT64_C(260584255782959),	// MSE
    UINT64_C(260584255782927),	// MSEB
    UINT64_C(3004104704),	// MSEBR
    UINT64_C(3006201856),	// MSER
    UINT64_C(213309550755840),	// MSFI
    UINT64_C(249589139505164),	// MSG
    UINT64_C(249589139505283),	// MSGC
    UINT64_C(249589139505180),	// MSGF
    UINT64_C(213305255788544),	// MSGFI
    UINT64_C(3105619968),	// MSGFR
    UINT64_C(3104571392),	// MSGR
    UINT64_C(3119316992),	// MSGRKC
    UINT64_C(2991718400),	// MSR
    UINT64_C(3120365568),	// MSRKC
    UINT64_C(2990997504),	// MSTA
    UINT64_C(249589139505233),	// MSY
    UINT64_C(230897441832960),	// MVC
    UINT64_C(251852587270144),	// MVCDK
    UINT64_C(255086697644032),	// MVCIN
    UINT64_C(238594023227392),	// MVCK
    UINT64_C(3584),	// MVCL
    UINT64_C(2818572288),	// MVCLE
    UINT64_C(258385232527502),	// MVCLU
    UINT64_C(219902325555200),	// MVCOS
    UINT64_C(239693534855168),	// MVCP
    UINT64_C(251831112433664),	// MVCRL
    UINT64_C(240793046482944),	// MVCS
    UINT64_C(251848292302848),	// MVCSK
    UINT64_C(252097400406016),	// MVGHI
    UINT64_C(252080220536832),	// MVHHI
    UINT64_C(252114580275200),	// MVHI
    UINT64_C(2449473536),	// MVI
    UINT64_C(258385232527442),	// MVIY
    UINT64_C(229797930205184),	// MVN
    UINT64_C(264982302294016),	// MVO
    UINT64_C(2991849472),	// MVPG
    UINT64_C(2991915008),	// MVST
    UINT64_C(231996953460736),	// MVZ
    UINT64_C(3008102400),	// MXBR
    UINT64_C(1728053248),	// MXD
    UINT64_C(260584255782919),	// MXDB
    UINT64_C(3003580416),	// MXDBR
    UINT64_C(9984),	// MXDR
    UINT64_C(9728),	// MXR
    UINT64_C(3017277440),	// MXTR
    UINT64_C(3017277440),	// MXTRA
    UINT64_C(260584255782971),	// MY
    UINT64_C(260584255782973),	// MYH
    UINT64_C(3007119360),	// MYHR
    UINT64_C(260584255782969),	// MYL
    UINT64_C(3006857216),	// MYLR
    UINT64_C(3006988288),	// MYR
    UINT64_C(1409286144),	// N
    UINT64_C(233096465088512),	// NC
    UINT64_C(3118792704),	// NCGRK
    UINT64_C(3119841280),	// NCRK
    UINT64_C(249589139505280),	// NG
    UINT64_C(3112173568),	// NGR
    UINT64_C(3118727168),	// NGRK
    UINT64_C(2483027968),	// NI
    UINT64_C(3002728448),	// NIAI
    UINT64_C(211149182205952),	// NIHF
    UINT64_C(2768502784),	// NIHH
    UINT64_C(2768568320),	// NIHL
    UINT64_C(211153477173248),	// NILF
    UINT64_C(2768633856),	// NILH
    UINT64_C(2768699392),	// NILL
    UINT64_C(258385232527444),	// NIY
    UINT64_C(3110338560),	// NNGRK
    UINT64_C(3111387136),	// NNRK
    UINT64_C(3110469632),	// NOGRK
    UINT64_C(3111518208),	// NORK
    UINT64_C(5120),	// NR
    UINT64_C(3119775744),	// NRK
    UINT64_C(249589139505189),	// NTSTG
    UINT64_C(3110535168),	// NXGRK
    UINT64_C(3111583744),	// NXRK
    UINT64_C(249589139505236),	// NY
    UINT64_C(1442840576),	// O
    UINT64_C(235295488344064),	// OC
    UINT64_C(3110404096),	// OCGRK
    UINT64_C(3111452672),	// OCRK
    UINT64_C(249589139505281),	// OG
    UINT64_C(3112239104),	// OGR
    UINT64_C(3118858240),	// OGRK
    UINT64_C(2516582400),	// OI
    UINT64_C(211157772140544),	// OIHF
    UINT64_C(2768764928),	// OIHH
    UINT64_C(2768830464),	// OIHL
    UINT64_C(211162067107840),	// OILF
    UINT64_C(2768896000),	// OILH
    UINT64_C(2768961536),	// OILL
    UINT64_C(258385232527446),	// OIY
    UINT64_C(5632),	// OR
    UINT64_C(3119906816),	// ORK
    UINT64_C(249589139505238),	// OY
    UINT64_C(266081813921792),	// PACK
    UINT64_C(2991063040),	// PALB
    UINT64_C(2987917312),	// PC
    UINT64_C(3106668544),	// PCC
    UINT64_C(3106406400),	// PCKMO
    UINT64_C(249589139505206),	// PFD
    UINT64_C(217711892234240),	// PFDRL
    UINT64_C(3115253760),	// PFMF
    UINT64_C(266),	// PFPO
    UINT64_C(2989359104),	// PGIN
    UINT64_C(2989424640),	// PGOUT
    UINT64_C(256186209271808),	// PKA
    UINT64_C(247390116249600),	// PKU
    UINT64_C(261683767410688),	// PLO
    UINT64_C(3118530560),	// POPCNT
    UINT64_C(3118530560),	// POPCNTOpt
    UINT64_C(3001548800),	// PPA
    UINT64_C(3107717120),	// PPNO
    UINT64_C(257),	// PR
    UINT64_C(3107717120),	// PRNO
    UINT64_C(2988965888),	// PT
    UINT64_C(3114401792),	// PTF
    UINT64_C(260),	// PTFF
    UINT64_C(3114139648),	// PTI
    UINT64_C(2987196416),	// PTLB
    UINT64_C(3019177984),	// QADTR
    UINT64_C(3019702272),	// QAXTR
    UINT64_C(2995650560),	// QCTRI
    UINT64_C(2995126272),	// QSI
    UINT64_C(2990211072),	// RCHP
    UINT64_C(259484744155221),	// RISBG
    UINT64_C(259484744155221),	// RISBG32
    UINT64_C(259484744155225),	// RISBGN
    UINT64_C(259484744155229),	// RISBHG
    UINT64_C(259484744155217),	// RISBLG
    UINT64_C(258385232527389),	// RLL
    UINT64_C(258385232527388),	// RLLG
    UINT64_C(259484744155220),	// RNSBG
    UINT64_C(259484744155222),	// ROSBG
    UINT64_C(2994143232),	// RP
    UINT64_C(2989096960),	// RRBE
    UINT64_C(3115188224),	// RRBM
    UINT64_C(3019309056),	// RRDTR
    UINT64_C(3019833344),	// RRXTR
    UINT64_C(2990014464),	// RSCH
    UINT64_C(259484744155223),	// RXSBG
    UINT64_C(1526726656),	// S
    UINT64_C(2987982848),	// SAC
    UINT64_C(2994274304),	// SACF
    UINT64_C(2989948928),	// SAL
    UINT64_C(268),	// SAM24
    UINT64_C(269),	// SAM31
    UINT64_C(270),	// SAM64
    UINT64_C(2991456256),	// SAR
    UINT64_C(3001024512),	// SCCTR
    UINT64_C(2990276608),	// SCHM
    UINT64_C(2986606592),	// SCK
    UINT64_C(2986737664),	// SCKC
    UINT64_C(263),	// SCKPF
    UINT64_C(1795162112),	// SD
    UINT64_C(260584255782939),	// SDB
    UINT64_C(3004891136),	// SDBR
    UINT64_C(11008),	// SDR
    UINT64_C(3016949760),	// SDTR
    UINT64_C(3016949760),	// SDTRA
    UINT64_C(2063597568),	// SE
    UINT64_C(260584255782923),	// SEB
    UINT64_C(3003842560),	// SEBR
    UINT64_C(3116367872),	// SELFHR
    UINT64_C(3116367872),	// SELFHRAsm
    UINT64_C(3116369920),	// SELFHRAsmE
    UINT64_C(3116368384),	// SELFHRAsmH
    UINT64_C(3116370432),	// SELFHRAsmHE
    UINT64_C(3116368896),	// SELFHRAsmL
    UINT64_C(3116370944),	// SELFHRAsmLE
    UINT64_C(3116369408),	// SELFHRAsmLH
    UINT64_C(3116368896),	// SELFHRAsmM
    UINT64_C(3116369664),	// SELFHRAsmNE
    UINT64_C(3116371200),	// SELFHRAsmNH
    UINT64_C(3116369152),	// SELFHRAsmNHE
    UINT64_C(3116370688),	// SELFHRAsmNL
    UINT64_C(3116368640),	// SELFHRAsmNLE
    UINT64_C(3116370176),	// SELFHRAsmNLH
    UINT64_C(3116370688),	// SELFHRAsmNM
    UINT64_C(3116371456),	// SELFHRAsmNO
    UINT64_C(3116371200),	// SELFHRAsmNP
    UINT64_C(3116369664),	// SELFHRAsmNZ
    UINT64_C(3116368128),	// SELFHRAsmO
    UINT64_C(3116368384),	// SELFHRAsmP
    UINT64_C(3116369920),	// SELFHRAsmZ
    UINT64_C(3118661632),	// SELGR
    UINT64_C(3118661632),	// SELGRAsm
    UINT64_C(3118663680),	// SELGRAsmE
    UINT64_C(3118662144),	// SELGRAsmH
    UINT64_C(3118664192),	// SELGRAsmHE
    UINT64_C(3118662656),	// SELGRAsmL
    UINT64_C(3118664704),	// SELGRAsmLE
    UINT64_C(3118663168),	// SELGRAsmLH
    UINT64_C(3118662656),	// SELGRAsmM
    UINT64_C(3118663424),	// SELGRAsmNE
    UINT64_C(3118664960),	// SELGRAsmNH
    UINT64_C(3118662912),	// SELGRAsmNHE
    UINT64_C(3118664448),	// SELGRAsmNL
    UINT64_C(3118662400),	// SELGRAsmNLE
    UINT64_C(3118663936),	// SELGRAsmNLH
    UINT64_C(3118664448),	// SELGRAsmNM
    UINT64_C(3118665216),	// SELGRAsmNO
    UINT64_C(3118664960),	// SELGRAsmNP
    UINT64_C(3118663424),	// SELGRAsmNZ
    UINT64_C(3118661888),	// SELGRAsmO
    UINT64_C(3118662144),	// SELGRAsmP
    UINT64_C(3118663680),	// SELGRAsmZ
    UINT64_C(3119513600),	// SELR
    UINT64_C(3119513600),	// SELRAsm
    UINT64_C(3119515648),	// SELRAsmE
    UINT64_C(3119514112),	// SELRAsmH
    UINT64_C(3119516160),	// SELRAsmHE
    UINT64_C(3119514624),	// SELRAsmL
    UINT64_C(3119516672),	// SELRAsmLE
    UINT64_C(3119515136),	// SELRAsmLH
    UINT64_C(3119514624),	// SELRAsmM
    UINT64_C(3119515392),	// SELRAsmNE
    UINT64_C(3119516928),	// SELRAsmNH
    UINT64_C(3119514880),	// SELRAsmNHE
    UINT64_C(3119516416),	// SELRAsmNL
    UINT64_C(3119514368),	// SELRAsmNLE
    UINT64_C(3119515904),	// SELRAsmNLH
    UINT64_C(3119516416),	// SELRAsmNM
    UINT64_C(3119517184),	// SELRAsmNO
    UINT64_C(3119516928),	// SELRAsmNP
    UINT64_C(3119515392),	// SELRAsmNZ
    UINT64_C(3119513856),	// SELRAsmO
    UINT64_C(3119514112),	// SELRAsmP
    UINT64_C(3119515648),	// SELRAsmZ
    UINT64_C(15104),	// SER
    UINT64_C(3011837952),	// SFASR
    UINT64_C(3011772416),	// SFPC
    UINT64_C(249589139505161),	// SG
    UINT64_C(249589139505177),	// SGF
    UINT64_C(3105423360),	// SGFR
    UINT64_C(249589139505209),	// SGH
    UINT64_C(3104374784),	// SGR
    UINT64_C(3119054848),	// SGRK
    UINT64_C(1258291200),	// SH
    UINT64_C(3116957696),	// SHHHR
    UINT64_C(3118006272),	// SHHLR
    UINT64_C(249589139505275),	// SHY
    UINT64_C(2987655168),	// SIE
    UINT64_C(2993946624),	// SIGA
    UINT64_C(2919235584),	// SIGP
    UINT64_C(1593835520),	// SL
    UINT64_C(2332033024),	// SLA
    UINT64_C(258385232527371),	// SLAG
    UINT64_C(258385232527581),	// SLAK
    UINT64_C(249589139505305),	// SLB
    UINT64_C(249589139505289),	// SLBG
    UINT64_C(3112763392),	// SLBGR
    UINT64_C(3113811968),	// SLBR
    UINT64_C(2399141888),	// SLDA
    UINT64_C(2365587456),	// SLDL
    UINT64_C(260584255782976),	// SLDT
    UINT64_C(213326730625024),	// SLFI
    UINT64_C(249589139505163),	// SLG
    UINT64_C(249589139505179),	// SLGF
    UINT64_C(213322435657728),	// SLGFI
    UINT64_C(3105554432),	// SLGFR
    UINT64_C(3104505856),	// SLGR
    UINT64_C(3119185920),	// SLGRK
    UINT64_C(3117088768),	// SLHHHR
    UINT64_C(3118137344),	// SLHHLR
    UINT64_C(2298478592),	// SLL
    UINT64_C(258385232527373),	// SLLG
    UINT64_C(258385232527583),	// SLLK
    UINT64_C(7936),	// SLR
    UINT64_C(3120234496),	// SLRK
    UINT64_C(260584255782984),	// SLXT
    UINT64_C(249589139505247),	// SLY
    UINT64_C(3107454976),	// SORTL
    UINT64_C(275977418571776),	// SP
    UINT64_C(3001090048),	// SPCTR
    UINT64_C(2986999808),	// SPKA
    UINT64_C(1024),	// SPM
    UINT64_C(2986868736),	// SPT
    UINT64_C(2987393024),	// SPX
    UINT64_C(260584255782965),	// SQD
    UINT64_C(260584255782933),	// SQDB
    UINT64_C(3004497920),	// SQDBR
    UINT64_C(2990800896),	// SQDR
    UINT64_C(260584255782964),	// SQE
    UINT64_C(260584255782932),	// SQEB
    UINT64_C(3004432384),	// SQEBR
    UINT64_C(2990866432),	// SQER
    UINT64_C(3004563456),	// SQXBR
    UINT64_C(3006660608),	// SQXR
    UINT64_C(6912),	// SR
    UINT64_C(2315255808),	// SRA
    UINT64_C(258385232527370),	// SRAG
    UINT64_C(258385232527580),	// SRAK
    UINT64_C(2382364672),	// SRDA
    UINT64_C(2348810240),	// SRDL
    UINT64_C(260584255782977),	// SRDT
    UINT64_C(3120103424),	// SRK
    UINT64_C(2281701376),	// SRL
    UINT64_C(258385232527372),	// SRLG
    UINT64_C(258385232527582),	// SRLK
    UINT64_C(2996371456),	// SRNM
    UINT64_C(2998403072),	// SRNMB
    UINT64_C(2998468608),	// SRNMT
    UINT64_C(263882790666240),	// SRP
    UINT64_C(2992504832),	// SRST
    UINT64_C(3116236800),	// SRSTU
    UINT64_C(260584255782985),	// SRXT
    UINT64_C(3114205184),	// SSAIR
    UINT64_C(2988769280),	// SSAR
    UINT64_C(2989686784),	// SSCH
    UINT64_C(2989162496),	// SSKE
    UINT64_C(2989162496),	// SSKEOpt
    UINT64_C(2147483648),	// SSM
    UINT64_C(1342177280),	// ST
    UINT64_C(2600468480),	// STAM
    UINT64_C(258385232527515),	// STAMY
    UINT64_C(2987524096),	// STAP
    UINT64_C(1107296256),	// STC
    UINT64_C(249589139505347),	// STCH
    UINT64_C(2986672128),	// STCK
    UINT64_C(2986803200),	// STCKC
    UINT64_C(2994208768),	// STCKE
    UINT64_C(2994470912),	// STCKF
    UINT64_C(3187671040),	// STCM
    UINT64_C(258385232527404),	// STCMH
    UINT64_C(258385232527405),	// STCMY
    UINT64_C(2990145536),	// STCPS
    UINT64_C(2990080000),	// STCRW
    UINT64_C(258385232527397),	// STCTG
    UINT64_C(3053453312),	// STCTL
    UINT64_C(249589139505266),	// STCY
    UINT64_C(1610612736),	// STD
    UINT64_C(260584255783015),	// STDY
    UINT64_C(1879048192),	// STE
    UINT64_C(260584255783014),	// STEY
    UINT64_C(249589139505355),	// STFH
    UINT64_C(2997944320),	// STFL
    UINT64_C(2997878784),	// STFLE
    UINT64_C(2996568064),	// STFPC
    UINT64_C(249589139505188),	// STG
    UINT64_C(215551523684352),	// STGRL
    UINT64_C(249589139505225),	// STGSC
    UINT64_C(1073741824),	// STH
    UINT64_C(249589139505351),	// STHH
    UINT64_C(215534343815168),	// STHRL
    UINT64_C(249589139505264),	// STHY
    UINT64_C(2986475520),	// STIDP
    UINT64_C(2415919104),	// STM
    UINT64_C(258385232527396),	// STMG
    UINT64_C(258385232527398),	// STMH
    UINT64_C(258385232527504),	// STMY
    UINT64_C(2885681152),	// STNSM
    UINT64_C(258385232527603),	// STOC
    UINT64_C(258385232527603),	// STOCAsm
    UINT64_C(258419592265971),	// STOCAsmE
    UINT64_C(258393822462195),	// STOCAsmH
    UINT64_C(258428182200563),	// STOCAsmHE
    UINT64_C(258402412396787),	// STOCAsmL
    UINT64_C(258436772135155),	// STOCAsmLE
    UINT64_C(258411002331379),	// STOCAsmLH
    UINT64_C(258402412396787),	// STOCAsmM
    UINT64_C(258415297298675),	// STOCAsmNE
    UINT64_C(258441067102451),	// STOCAsmNH
    UINT64_C(258406707364083),	// STOCAsmNHE
    UINT64_C(258432477167859),	// STOCAsmNL
    UINT64_C(258398117429491),	// STOCAsmNLE
    UINT64_C(258423887233267),	// STOCAsmNLH
    UINT64_C(258432477167859),	// STOCAsmNM
    UINT64_C(258445362069747),	// STOCAsmNO
    UINT64_C(258441067102451),	// STOCAsmNP
    UINT64_C(258415297298675),	// STOCAsmNZ
    UINT64_C(258389527494899),	// STOCAsmO
    UINT64_C(258393822462195),	// STOCAsmP
    UINT64_C(258419592265971),	// STOCAsmZ
    UINT64_C(258385232527585),	// STOCFH
    UINT64_C(258385232527585),	// STOCFHAsm
    UINT64_C(258419592265953),	// STOCFHAsmE
    UINT64_C(258393822462177),	// STOCFHAsmH
    UINT64_C(258428182200545),	// STOCFHAsmHE
    UINT64_C(258402412396769),	// STOCFHAsmL
    UINT64_C(258436772135137),	// STOCFHAsmLE
    UINT64_C(258411002331361),	// STOCFHAsmLH
    UINT64_C(258402412396769),	// STOCFHAsmM
    UINT64_C(258415297298657),	// STOCFHAsmNE
    UINT64_C(258441067102433),	// STOCFHAsmNH
    UINT64_C(258406707364065),	// STOCFHAsmNHE
    UINT64_C(258432477167841),	// STOCFHAsmNL
    UINT64_C(258398117429473),	// STOCFHAsmNLE
    UINT64_C(258423887233249),	// STOCFHAsmNLH
    UINT64_C(258432477167841),	// STOCFHAsmNM
    UINT64_C(258445362069729),	// STOCFHAsmNO
    UINT64_C(258441067102433),	// STOCFHAsmNP
    UINT64_C(258415297298657),	// STOCFHAsmNZ
    UINT64_C(258389527494881),	// STOCFHAsmO
    UINT64_C(258393822462177),	// STOCFHAsmP
    UINT64_C(258419592265953),	// STOCFHAsmZ
    UINT64_C(258385232527587),	// STOCG
    UINT64_C(258385232527587),	// STOCGAsm
    UINT64_C(258419592265955),	// STOCGAsmE
    UINT64_C(258393822462179),	// STOCGAsmH
    UINT64_C(258428182200547),	// STOCGAsmHE
    UINT64_C(258402412396771),	// STOCGAsmL
    UINT64_C(258436772135139),	// STOCGAsmLE
    UINT64_C(258411002331363),	// STOCGAsmLH
    UINT64_C(258402412396771),	// STOCGAsmM
    UINT64_C(258415297298659),	// STOCGAsmNE
    UINT64_C(258441067102435),	// STOCGAsmNH
    UINT64_C(258406707364067),	// STOCGAsmNHE
    UINT64_C(258432477167843),	// STOCGAsmNL
    UINT64_C(258398117429475),	// STOCGAsmNLE
    UINT64_C(258423887233251),	// STOCGAsmNLH
    UINT64_C(258432477167843),	// STOCGAsmNM
    UINT64_C(258445362069731),	// STOCGAsmNO
    UINT64_C(258441067102435),	// STOCGAsmNP
    UINT64_C(258415297298659),	// STOCGAsmNZ
    UINT64_C(258389527494883),	// STOCGAsmO
    UINT64_C(258393822462179),	// STOCGAsmP
    UINT64_C(258419592265955),	// STOCGAsmZ
    UINT64_C(2902458368),	// STOSM
    UINT64_C(249589139505294),	// STPQ
    UINT64_C(2986934272),	// STPT
    UINT64_C(2987458560),	// STPX
    UINT64_C(251796752695296),	// STRAG
    UINT64_C(215568703553536),	// STRL
    UINT64_C(249589139505214),	// STRV
    UINT64_C(249589139505199),	// STRVG
    UINT64_C(249589139505215),	// STRVH
    UINT64_C(2989752320),	// STSCH
    UINT64_C(2994536448),	// STSI
    UINT64_C(2990931968),	// STURA
    UINT64_C(3106209792),	// STURG
    UINT64_C(249589139505232),	// STY
    UINT64_C(2130706432),	// SU
    UINT64_C(16128),	// SUR
    UINT64_C(2560),	// SVC
    UINT64_C(1862270976),	// SW
    UINT64_C(12032),	// SWR
    UINT64_C(3008036864),	// SXBR
    UINT64_C(14080),	// SXR
    UINT64_C(3017474048),	// SXTR
    UINT64_C(3017474048),	// SXTRA
    UINT64_C(249589139505243),	// SY
    UINT64_C(3002859520),	// TABORT
    UINT64_C(267),	// TAM
    UINT64_C(2991325184),	// TAR
    UINT64_C(2989228032),	// TB
    UINT64_C(3008430080),	// TBDR
    UINT64_C(3008364544),	// TBEDR
    UINT64_C(252200479621120),	// TBEGIN
    UINT64_C(252204774588416),	// TBEGINC
    UINT64_C(260584255782929),	// TCDB
    UINT64_C(260584255782928),	// TCEB
    UINT64_C(260584255782930),	// TCXB
    UINT64_C(260584255782996),	// TDCDT
    UINT64_C(260584255782992),	// TDCET
    UINT64_C(260584255783000),	// TDCXT
    UINT64_C(260584255782997),	// TDGDT
    UINT64_C(260584255782993),	// TDGET
    UINT64_C(260584255783001),	// TDGXT
    UINT64_C(3002597376),	// TEND
    UINT64_C(3008888832),	// THDER
    UINT64_C(3008954368),	// THDR
    UINT64_C(2432696320),	// TM
    UINT64_C(2801926144),	// TMHH
    UINT64_C(2801991680),	// TMHL
    UINT64_C(2801795072),	// TMLH
    UINT64_C(2801860608),	// TMLL
    UINT64_C(258385232527441),	// TMY
    UINT64_C(258385232527552),	// TP
    UINT64_C(2989883392),	// TPI
    UINT64_C(251792457728000),	// TPROT
    UINT64_C(241892558110720),	// TR
    UINT64_C(2566914048),	// TRACE
    UINT64_C(258385232527375),	// TRACG
    UINT64_C(511),	// TRAP2
    UINT64_C(3003056128),	// TRAP4
    UINT64_C(2997157888),	// TRE
    UINT64_C(3113418752),	// TROO
    UINT64_C(3113418752),	// TROOOpt
    UINT64_C(3113353216),	// TROT
    UINT64_C(3113353216),	// TROTOpt
    UINT64_C(242992069738496),	// TRT
    UINT64_C(3116302336),	// TRTE
    UINT64_C(3116302336),	// TRTEOpt
    UINT64_C(3113287680),	// TRTO
    UINT64_C(3113287680),	// TRTOOpt
    UINT64_C(228698418577408),	// TRTR
    UINT64_C(3116171264),	// TRTRE
    UINT64_C(3116171264),	// TRTREOpt
    UINT64_C(3113222144),	// TRTT
    UINT64_C(3113222144),	// TRTTOpt
    UINT64_C(2466250752),	// TS
    UINT64_C(2989817856),	// TSCH
    UINT64_C(267181325549568),	// UNPK
    UINT64_C(257285720899584),	// UNPKA
    UINT64_C(248489627877376),	// UNPKU
    UINT64_C(258),	// UPT
    UINT64_C(253987186016499),	// VA
    UINT64_C(253987186016499),	// VAB
    UINT64_C(253987186016443),	// VAC
    UINT64_C(253987186016497),	// VACC
    UINT64_C(253987186016497),	// VACCB
    UINT64_C(253987186016441),	// VACCC
    UINT64_C(253987253125305),	// VACCCQ
    UINT64_C(253987186024689),	// VACCF
    UINT64_C(253987186028785),	// VACCG
    UINT64_C(253987186020593),	// VACCH
    UINT64_C(253987186032881),	// VACCQ
    UINT64_C(253987253125307),	// VACQ
    UINT64_C(253987186024691),	// VAF
    UINT64_C(253987186028787),	// VAG
    UINT64_C(253987186020595),	// VAH
    UINT64_C(252887674388593),	// VAP
    UINT64_C(253987186032883),	// VAQ
    UINT64_C(253987186016498),	// VAVG
    UINT64_C(253987186016498),	// VAVGB
    UINT64_C(253987186024690),	// VAVGF
    UINT64_C(253987186028786),	// VAVGG
    UINT64_C(253987186020594),	// VAVGH
    UINT64_C(253987186016496),	// VAVGL
    UINT64_C(253987186016496),	// VAVGLB
    UINT64_C(253987186024688),	// VAVGLF
    UINT64_C(253987186028784),	// VAVGLG
    UINT64_C(253987186020592),	// VAVGLH
    UINT64_C(253987186016389),	// VBPERM
    UINT64_C(253987186016451),	// VCDG
    UINT64_C(253987186028739),	// VCDGB
    UINT64_C(253987186016449),	// VCDLG
    UINT64_C(253987186028737),	// VCDLGB
    UINT64_C(253987186024643),	// VCEFB
    UINT64_C(253987186024641),	// VCELFB
    UINT64_C(253987186016504),	// VCEQ
    UINT64_C(253987186016504),	// VCEQB
    UINT64_C(253987187065080),	// VCEQBS
    UINT64_C(253987186024696),	// VCEQF
    UINT64_C(253987187073272),	// VCEQFS
    UINT64_C(253987186028792),	// VCEQG
    UINT64_C(253987187077368),	// VCEQGS
    UINT64_C(253987186020600),	// VCEQH
    UINT64_C(253987187069176),	// VCEQHS
    UINT64_C(253987186024642),	// VCFEB
    UINT64_C(253987186016449),	// VCFPL
    UINT64_C(253987186016451),	// VCFPS
    UINT64_C(253987186016450),	// VCGD
    UINT64_C(253987186028738),	// VCGDB
    UINT64_C(253987186016507),	// VCH
    UINT64_C(253987186016507),	// VCHB
    UINT64_C(253987187065083),	// VCHBS
    UINT64_C(253987186024699),	// VCHF
    UINT64_C(253987187073275),	// VCHFS
    UINT64_C(253987186028795),	// VCHG
    UINT64_C(253987187077371),	// VCHGS
    UINT64_C(253987186020603),	// VCHH
    UINT64_C(253987187069179),	// VCHHS
    UINT64_C(253987186016505),	// VCHL
    UINT64_C(253987186016505),	// VCHLB
    UINT64_C(253987187065081),	// VCHLBS
    UINT64_C(253987186024697),	// VCHLF
    UINT64_C(253987187073273),	// VCHLFS
    UINT64_C(253987186028793),	// VCHLG
    UINT64_C(253987187077369),	// VCHLGS
    UINT64_C(253987186020601),	// VCHLH
    UINT64_C(253987187069177),	// VCHLHS
    UINT64_C(253987186016358),	// VCKSM
    UINT64_C(253987186024640),	// VCLFEB
    UINT64_C(253987186016448),	// VCLFP
    UINT64_C(253987186016448),	// VCLGD
    UINT64_C(253987186028736),	// VCLGDB
    UINT64_C(253987186016339),	// VCLZ
    UINT64_C(253987186016339),	// VCLZB
    UINT64_C(253987186024531),	// VCLZF
    UINT64_C(253987186028627),	// VCLZG
    UINT64_C(253987186020435),	// VCLZH
    UINT64_C(252887674388599),	// VCP
    UINT64_C(253987186016450),	// VCSFP
    UINT64_C(253987186016338),	// VCTZ
    UINT64_C(253987186016338),	// VCTZB
    UINT64_C(253987186024530),	// VCTZF
    UINT64_C(253987186028626),	// VCTZG
    UINT64_C(253987186020434),	// VCTZH
    UINT64_C(252887674388560),	// VCVB
    UINT64_C(252887674388562),	// VCVBG
    UINT64_C(252887674388562),	// VCVBGOpt
    UINT64_C(252887674388560),	// VCVBOpt
    UINT64_C(252887674388568),	// VCVD
    UINT64_C(252887674388570),	// VCVDG
    UINT64_C(252887674388602),	// VDP
    UINT64_C(253987186016475),	// VEC
    UINT64_C(253987186016475),	// VECB
    UINT64_C(253987186024667),	// VECF
    UINT64_C(253987186028763),	// VECG
    UINT64_C(253987186020571),	// VECH
    UINT64_C(253987186016473),	// VECL
    UINT64_C(253987186016473),	// VECLB
    UINT64_C(253987186024665),	// VECLF
    UINT64_C(253987186028761),	// VECLG
    UINT64_C(253987186020569),	// VECLH
    UINT64_C(253987186016370),	// VERIM
    UINT64_C(253987186016370),	// VERIMB
    UINT64_C(253987186024562),	// VERIMF
    UINT64_C(253987186028658),	// VERIMG
    UINT64_C(253987186020466),	// VERIMH
    UINT64_C(253987186016307),	// VERLL
    UINT64_C(253987186016307),	// VERLLB
    UINT64_C(253987186024499),	// VERLLF
    UINT64_C(253987186028595),	// VERLLG
    UINT64_C(253987186020403),	// VERLLH
    UINT64_C(253987186016371),	// VERLLV
    UINT64_C(253987186016371),	// VERLLVB
    UINT64_C(253987186024563),	// VERLLVF
    UINT64_C(253987186028659),	// VERLLVG
    UINT64_C(253987186020467),	// VERLLVH
    UINT64_C(253987186016304),	// VESL
    UINT64_C(253987186016304),	// VESLB
    UINT64_C(253987186024496),	// VESLF
    UINT64_C(253987186028592),	// VESLG
    UINT64_C(253987186020400),	// VESLH
    UINT64_C(253987186016368),	// VESLV
    UINT64_C(253987186016368),	// VESLVB
    UINT64_C(253987186024560),	// VESLVF
    UINT64_C(253987186028656),	// VESLVG
    UINT64_C(253987186020464),	// VESLVH
    UINT64_C(253987186016314),	// VESRA
    UINT64_C(253987186016314),	// VESRAB
    UINT64_C(253987186024506),	// VESRAF
    UINT64_C(253987186028602),	// VESRAG
    UINT64_C(253987186020410),	// VESRAH
    UINT64_C(253987186016378),	// VESRAV
    UINT64_C(253987186016378),	// VESRAVB
    UINT64_C(253987186024570),	// VESRAVF
    UINT64_C(253987186028666),	// VESRAVG
    UINT64_C(253987186020474),	// VESRAVH
    UINT64_C(253987186016312),	// VESRL
    UINT64_C(253987186016312),	// VESRLB
    UINT64_C(253987186024504),	// VESRLF
    UINT64_C(253987186028600),	// VESRLG
    UINT64_C(253987186020408),	// VESRLH
    UINT64_C(253987186016376),	// VESRLV
    UINT64_C(253987186016376),	// VESRLVB
    UINT64_C(253987186024568),	// VESRLVF
    UINT64_C(253987186028664),	// VESRLVG
    UINT64_C(253987186020472),	// VESRLVH
    UINT64_C(253987186016483),	// VFA
    UINT64_C(253987186028771),	// VFADB
    UINT64_C(253987186016386),	// VFAE
    UINT64_C(253987186016386),	// VFAEB
    UINT64_C(253987187064962),	// VFAEBS
    UINT64_C(253987186024578),	// VFAEF
    UINT64_C(253987187073154),	// VFAEFS
    UINT64_C(253987186020482),	// VFAEH
    UINT64_C(253987187069058),	// VFAEHS
    UINT64_C(253987188113538),	// VFAEZB
    UINT64_C(253987189162114),	// VFAEZBS
    UINT64_C(253987188121730),	// VFAEZF
    UINT64_C(253987189170306),	// VFAEZFS
    UINT64_C(253987188117634),	// VFAEZH
    UINT64_C(253987189166210),	// VFAEZHS
    UINT64_C(253987186024675),	// VFASB
    UINT64_C(253987186016488),	// VFCE
    UINT64_C(253987186028776),	// VFCEDB
    UINT64_C(253987187077352),	// VFCEDBS
    UINT64_C(253987186024680),	// VFCESB
    UINT64_C(253987187073256),	// VFCESBS
    UINT64_C(253987186016491),	// VFCH
    UINT64_C(253987186028779),	// VFCHDB
    UINT64_C(253987187077355),	// VFCHDBS
    UINT64_C(253987186016490),	// VFCHE
    UINT64_C(253987186028778),	// VFCHEDB
    UINT64_C(253987187077354),	// VFCHEDBS
    UINT64_C(253987186024682),	// VFCHESB
    UINT64_C(253987187073258),	// VFCHESBS
    UINT64_C(253987186024683),	// VFCHSB
    UINT64_C(253987187073259),	// VFCHSBS
    UINT64_C(253987186016485),	// VFD
    UINT64_C(253987186028773),	// VFDDB
    UINT64_C(253987186024677),	// VFDSB
    UINT64_C(253987186016384),	// VFEE
    UINT64_C(253987186016384),	// VFEEB
    UINT64_C(253987187064960),	// VFEEBS
    UINT64_C(253987186024576),	// VFEEF
    UINT64_C(253987187073152),	// VFEEFS
    UINT64_C(253987186020480),	// VFEEH
    UINT64_C(253987187069056),	// VFEEHS
    UINT64_C(253987188113536),	// VFEEZB
    UINT64_C(253987189162112),	// VFEEZBS
    UINT64_C(253987188121728),	// VFEEZF
    UINT64_C(253987189170304),	// VFEEZFS
    UINT64_C(253987188117632),	// VFEEZH
    UINT64_C(253987189166208),	// VFEEZHS
    UINT64_C(253987186016385),	// VFENE
    UINT64_C(253987186016385),	// VFENEB
    UINT64_C(253987187064961),	// VFENEBS
    UINT64_C(253987186024577),	// VFENEF
    UINT64_C(253987187073153),	// VFENEFS
    UINT64_C(253987186020481),	// VFENEH
    UINT64_C(253987187069057),	// VFENEHS
    UINT64_C(253987188113537),	// VFENEZB
    UINT64_C(253987189162113),	// VFENEZBS
    UINT64_C(253987188121729),	// VFENEZF
    UINT64_C(253987189170305),	// VFENEZFS
    UINT64_C(253987188117633),	// VFENEZH
    UINT64_C(253987189166209),	// VFENEZHS
    UINT64_C(253987186016455),	// VFI
    UINT64_C(253987186028743),	// VFIDB
    UINT64_C(253987186024647),	// VFISB
    UINT64_C(253987186290920),	// VFKEDB
    UINT64_C(253987187339496),	// VFKEDBS
    UINT64_C(253987186286824),	// VFKESB
    UINT64_C(253987187335400),	// VFKESBS
    UINT64_C(253987186290923),	// VFKHDB
    UINT64_C(253987187339499),	// VFKHDBS
    UINT64_C(253987186290922),	// VFKHEDB
    UINT64_C(253987187339498),	// VFKHEDBS
    UINT64_C(253987186286826),	// VFKHESB
    UINT64_C(253987187335402),	// VFKHESBS
    UINT64_C(253987186286827),	// VFKHSB
    UINT64_C(253987187335403),	// VFKHSBS
    UINT64_C(253987186028748),	// VFLCDB
    UINT64_C(253987186024652),	// VFLCSB
    UINT64_C(253987186016452),	// VFLL
    UINT64_C(253987186024644),	// VFLLS
    UINT64_C(253987187077324),	// VFLNDB
    UINT64_C(253987187073228),	// VFLNSB
    UINT64_C(253987188125900),	// VFLPDB
    UINT64_C(253987188121804),	// VFLPSB
    UINT64_C(253987186016453),	// VFLR
    UINT64_C(253987186028741),	// VFLRD
    UINT64_C(253987186016487),	// VFM
    UINT64_C(253987186016399),	// VFMA
    UINT64_C(253987236348047),	// VFMADB
    UINT64_C(253987219570831),	// VFMASB
    UINT64_C(253987186016495),	// VFMAX
    UINT64_C(253987186028783),	// VFMAXDB
    UINT64_C(253987186024687),	// VFMAXSB
    UINT64_C(253987186028775),	// VFMDB
    UINT64_C(253987186016494),	// VFMIN
    UINT64_C(253987186028782),	// VFMINDB
    UINT64_C(253987186024686),	// VFMINSB
    UINT64_C(253987186016398),	// VFMS
    UINT64_C(253987186024679),	// VFMSB
    UINT64_C(253987236348046),	// VFMSDB
    UINT64_C(253987219570830),	// VFMSSB
    UINT64_C(253987186016415),	// VFNMA
    UINT64_C(253987236348063),	// VFNMADB
    UINT64_C(253987219570847),	// VFNMASB
    UINT64_C(253987186016414),	// VFNMS
    UINT64_C(253987236348062),	// VFNMSDB
    UINT64_C(253987219570846),	// VFNMSSB
    UINT64_C(253987186016460),	// VFPSO
    UINT64_C(253987186028748),	// VFPSODB
    UINT64_C(253987186024652),	// VFPSOSB
    UINT64_C(253987186016482),	// VFS
    UINT64_C(253987186028770),	// VFSDB
    UINT64_C(253987186016462),	// VFSQ
    UINT64_C(253987186028750),	// VFSQDB
    UINT64_C(253987186024654),	// VFSQSB
    UINT64_C(253987186024674),	// VFSSB
    UINT64_C(253987186016330),	// VFTCI
    UINT64_C(253987186028618),	// VFTCIDB
    UINT64_C(253987186024522),	// VFTCISB
    UINT64_C(253987186016324),	// VGBM
    UINT64_C(253987186016275),	// VGEF
    UINT64_C(253987186016274),	// VGEG
    UINT64_C(253987186016436),	// VGFM
    UINT64_C(253987186016444),	// VGFMA
    UINT64_C(253987186016444),	// VGFMAB
    UINT64_C(253987219570876),	// VGFMAF
    UINT64_C(253987236348092),	// VGFMAG
    UINT64_C(253987202793660),	// VGFMAH
    UINT64_C(253987186016436),	// VGFMB
    UINT64_C(253987186024628),	// VGFMF
    UINT64_C(253987186028724),	// VGFMG
    UINT64_C(253987186020532),	// VGFMH
    UINT64_C(253987186016326),	// VGM
    UINT64_C(253987186016326),	// VGMB
    UINT64_C(253987186024518),	// VGMF
    UINT64_C(253987186028614),	// VGMG
    UINT64_C(253987186020422),	// VGMH
    UINT64_C(253987186016348),	// VISTR
    UINT64_C(253987186016348),	// VISTRB
    UINT64_C(253987187064924),	// VISTRBS
    UINT64_C(253987186024540),	// VISTRF
    UINT64_C(253987187073116),	// VISTRFS
    UINT64_C(253987186020444),	// VISTRH
    UINT64_C(253987187069020),	// VISTRHS
    UINT64_C(253987186016262),	// VL
    UINT64_C(253987186016262),	// VLAlign
    UINT64_C(253987186016263),	// VLBB
    UINT64_C(252887674388486),	// VLBR
    UINT64_C(252887674396678),	// VLBRF
    UINT64_C(252887674400774),	// VLBRG
    UINT64_C(252887674392582),	// VLBRH
    UINT64_C(252887674404870),	// VLBRQ
    UINT64_C(252887674388485),	// VLBRREP
    UINT64_C(252887674396677),	// VLBRREPF
    UINT64_C(252887674400773),	// VLBRREPG
    UINT64_C(252887674392581),	// VLBRREPH
    UINT64_C(253987186016478),	// VLC
    UINT64_C(253987186016478),	// VLCB
    UINT64_C(253987186024670),	// VLCF
    UINT64_C(253987186028766),	// VLCG
    UINT64_C(253987186020574),	// VLCH
    UINT64_C(253987186016452),	// VLDE
    UINT64_C(253987186024644),	// VLDEB
    UINT64_C(253987186016256),	// VLEB
    UINT64_C(252887674388483),	// VLEBRF
    UINT64_C(252887674388482),	// VLEBRG
    UINT64_C(252887674388481),	// VLEBRH
    UINT64_C(253987186016453),	// VLED
    UINT64_C(253987186028741),	// VLEDB
    UINT64_C(253987186016259),	// VLEF
    UINT64_C(253987186016258),	// VLEG
    UINT64_C(253987186016257),	// VLEH
    UINT64_C(253987186016320),	// VLEIB
    UINT64_C(253987186016323),	// VLEIF
    UINT64_C(253987186016322),	// VLEIG
    UINT64_C(253987186016321),	// VLEIH
    UINT64_C(252887674388487),	// VLER
    UINT64_C(252887674396679),	// VLERF
    UINT64_C(252887674400775),	// VLERG
    UINT64_C(252887674392583),	// VLERH
    UINT64_C(253987186016289),	// VLGV
    UINT64_C(253987186016289),	// VLGVB
    UINT64_C(253987186024481),	// VLGVF
    UINT64_C(253987186028577),	// VLGVG
    UINT64_C(253987186020385),	// VLGVH
    UINT64_C(252887674388553),	// VLIP
    UINT64_C(253987186016311),	// VLL
    UINT64_C(252887674388484),	// VLLEBRZ
    UINT64_C(252887674413060),	// VLLEBRZE
    UINT64_C(252887674396676),	// VLLEBRZF
    UINT64_C(252887674400772),	// VLLEBRZG
    UINT64_C(252887674392580),	// VLLEBRZH
    UINT64_C(253987186016260),	// VLLEZ
    UINT64_C(253987186016260),	// VLLEZB
    UINT64_C(253987186024452),	// VLLEZF
    UINT64_C(253987186028548),	// VLLEZG
    UINT64_C(253987186020356),	// VLLEZH
    UINT64_C(253987186040836),	// VLLEZLF
    UINT64_C(253987186016310),	// VLM
    UINT64_C(253987186016310),	// VLMAlign
    UINT64_C(253987186016479),	// VLP
    UINT64_C(253987186016479),	// VLPB
    UINT64_C(253987186024671),	// VLPF
    UINT64_C(253987186028767),	// VLPG
    UINT64_C(253987186020575),	// VLPH
    UINT64_C(253987186016342),	// VLR
    UINT64_C(253987186016261),	// VLREP
    UINT64_C(253987186016261),	// VLREPB
    UINT64_C(253987186024453),	// VLREPF
    UINT64_C(253987186028549),	// VLREPG
    UINT64_C(253987186020357),	// VLREPH
    UINT64_C(252887674388533),	// VLRL
    UINT64_C(252887674388535),	// VLRLR
    UINT64_C(253987186016290),	// VLVG
    UINT64_C(253987186016290),	// VLVGB
    UINT64_C(253987186024482),	// VLVGF
    UINT64_C(253987186028578),	// VLVGG
    UINT64_C(253987186020386),	// VLVGH
    UINT64_C(253987186016354),	// VLVGP
    UINT64_C(253987186016430),	// VMAE
    UINT64_C(253987186016430),	// VMAEB
    UINT64_C(253987219570862),	// VMAEF
    UINT64_C(253987202793646),	// VMAEH
    UINT64_C(253987186016427),	// VMAH
    UINT64_C(253987186016427),	// VMAHB
    UINT64_C(253987219570859),	// VMAHF
    UINT64_C(253987202793643),	// VMAHH
    UINT64_C(253987186016426),	// VMAL
    UINT64_C(253987186016426),	// VMALB
    UINT64_C(253987186016428),	// VMALE
    UINT64_C(253987186016428),	// VMALEB
    UINT64_C(253987219570860),	// VMALEF
    UINT64_C(253987202793644),	// VMALEH
    UINT64_C(253987219570858),	// VMALF
    UINT64_C(253987186016425),	// VMALH
    UINT64_C(253987186016425),	// VMALHB
    UINT64_C(253987219570857),	// VMALHF
    UINT64_C(253987202793641),	// VMALHH
    UINT64_C(253987202793642),	// VMALHW
    UINT64_C(253987186016429),	// VMALO
    UINT64_C(253987186016429),	// VMALOB
    UINT64_C(253987219570861),	// VMALOF
    UINT64_C(253987202793645),	// VMALOH
    UINT64_C(253987186016431),	// VMAO
    UINT64_C(253987186016431),	// VMAOB
    UINT64_C(253987219570863),	// VMAOF
    UINT64_C(253987202793647),	// VMAOH
    UINT64_C(253987186016422),	// VME
    UINT64_C(253987186016422),	// VMEB
    UINT64_C(253987186024614),	// VMEF
    UINT64_C(253987186020518),	// VMEH
    UINT64_C(253987186016419),	// VMH
    UINT64_C(253987186016419),	// VMHB
    UINT64_C(253987186024611),	// VMHF
    UINT64_C(253987186020515),	// VMHH
    UINT64_C(253987186016418),	// VML
    UINT64_C(253987186016418),	// VMLB
    UINT64_C(253987186016420),	// VMLE
    UINT64_C(253987186016420),	// VMLEB
    UINT64_C(253987186024612),	// VMLEF
    UINT64_C(253987186020516),	// VMLEH
    UINT64_C(253987186024610),	// VMLF
    UINT64_C(253987186016417),	// VMLH
    UINT64_C(253987186016417),	// VMLHB
    UINT64_C(253987186024609),	// VMLHF
    UINT64_C(253987186020513),	// VMLHH
    UINT64_C(253987186020514),	// VMLHW
    UINT64_C(253987186016421),	// VMLO
    UINT64_C(253987186016421),	// VMLOB
    UINT64_C(253987186024613),	// VMLOF
    UINT64_C(253987186020517),	// VMLOH
    UINT64_C(253987186016510),	// VMN
    UINT64_C(253987186016510),	// VMNB
    UINT64_C(253987186024702),	// VMNF
    UINT64_C(253987186028798),	// VMNG
    UINT64_C(253987186020606),	// VMNH
    UINT64_C(253987186016508),	// VMNL
    UINT64_C(253987186016508),	// VMNLB
    UINT64_C(253987186024700),	// VMNLF
    UINT64_C(253987186028796),	// VMNLG
    UINT64_C(253987186020604),	// VMNLH
    UINT64_C(253987186016423),	// VMO
    UINT64_C(253987186016423),	// VMOB
    UINT64_C(253987186024615),	// VMOF
    UINT64_C(253987186020519),	// VMOH
    UINT64_C(252887674388600),	// VMP
    UINT64_C(253987186016353),	// VMRH
    UINT64_C(253987186016353),	// VMRHB
    UINT64_C(253987186024545),	// VMRHF
    UINT64_C(253987186028641),	// VMRHG
    UINT64_C(253987186020449),	// VMRHH
    UINT64_C(253987186016352),	// VMRL
    UINT64_C(253987186016352),	// VMRLB
    UINT64_C(253987186024544),	// VMRLF
    UINT64_C(253987186028640),	// VMRLG
    UINT64_C(253987186020448),	// VMRLH
    UINT64_C(253987186016440),	// VMSL
    UINT64_C(253987236348088),	// VMSLG
    UINT64_C(252887674388601),	// VMSP
    UINT64_C(253987186016511),	// VMX
    UINT64_C(253987186016511),	// VMXB
    UINT64_C(253987186024703),	// VMXF
    UINT64_C(253987186028799),	// VMXG
    UINT64_C(253987186020607),	// VMXH
    UINT64_C(253987186016509),	// VMXL
    UINT64_C(253987186016509),	// VMXLB
    UINT64_C(253987186024701),	// VMXLF
    UINT64_C(253987186028797),	// VMXLG
    UINT64_C(253987186020605),	// VMXLH
    UINT64_C(253987186016360),	// VN
    UINT64_C(253987186016361),	// VNC
    UINT64_C(253987186016366),	// VNN
    UINT64_C(253987186016363),	// VNO
    UINT64_C(253987186016364),	// VNX
    UINT64_C(253987186016362),	// VO
    UINT64_C(253987186016367),	// VOC
    UINT64_C(253991480918084),	// VONE
    UINT64_C(253987186016388),	// VPDI
    UINT64_C(253987186016396),	// VPERM
    UINT64_C(253987186016404),	// VPK
    UINT64_C(253987186024596),	// VPKF
    UINT64_C(253987186028692),	// VPKG
    UINT64_C(253987186020500),	// VPKH
    UINT64_C(253987186016405),	// VPKLS
    UINT64_C(253987186024597),	// VPKLSF
    UINT64_C(253987187073173),	// VPKLSFS
    UINT64_C(253987186028693),	// VPKLSG
    UINT64_C(253987187077269),	// VPKLSGS
    UINT64_C(253987186020501),	// VPKLSH
    UINT64_C(253987187069077),	// VPKLSHS
    UINT64_C(253987186016407),	// VPKS
    UINT64_C(253987186024599),	// VPKSF
    UINT64_C(253987187073175),	// VPKSFS
    UINT64_C(253987186028695),	// VPKSG
    UINT64_C(253987187077271),	// VPKSGS
    UINT64_C(253987186020503),	// VPKSH
    UINT64_C(253987187069079),	// VPKSHS
    UINT64_C(252887674388532),	// VPKZ
    UINT64_C(253987186016336),	// VPOPCT
    UINT64_C(253987186016336),	// VPOPCTB
    UINT64_C(253987186024528),	// VPOPCTF
    UINT64_C(253987186028624),	// VPOPCTG
    UINT64_C(253987186020432),	// VPOPCTH
    UINT64_C(252887674388571),	// VPSOP
    UINT64_C(253987186016333),	// VREP
    UINT64_C(253987186016333),	// VREPB
    UINT64_C(253987186024525),	// VREPF
    UINT64_C(253987186028621),	// VREPG
    UINT64_C(253987186020429),	// VREPH
    UINT64_C(253987186016325),	// VREPI
    UINT64_C(253987186016325),	// VREPIB
    UINT64_C(253987186024517),	// VREPIF
    UINT64_C(253987186028613),	// VREPIG
    UINT64_C(253987186020421),	// VREPIH
    UINT64_C(252887674388603),	// VRP
    UINT64_C(253987186016503),	// VS
    UINT64_C(253987186016503),	// VSB
    UINT64_C(253987186016445),	// VSBCBI
    UINT64_C(253987253125309),	// VSBCBIQ
    UINT64_C(253987186016447),	// VSBI
    UINT64_C(253987253125311),	// VSBIQ
    UINT64_C(253987186016501),	// VSCBI
    UINT64_C(253987186016501),	// VSCBIB
    UINT64_C(253987186024693),	// VSCBIF
    UINT64_C(253987186028789),	// VSCBIG
    UINT64_C(253987186020597),	// VSCBIH
    UINT64_C(253987186032885),	// VSCBIQ
    UINT64_C(253987186016283),	// VSCEF
    UINT64_C(253987186016282),	// VSCEG
    UINT64_C(252887674388606),	// VSDP
    UINT64_C(253987186016351),	// VSEG
    UINT64_C(253987186016351),	// VSEGB
    UINT64_C(253987186024543),	// VSEGF
    UINT64_C(253987186020447),	// VSEGH
    UINT64_C(253987186016397),	// VSEL
    UINT64_C(253987186024695),	// VSF
    UINT64_C(253987186028791),	// VSG
    UINT64_C(253987186020599),	// VSH
    UINT64_C(253987186016372),	// VSL
    UINT64_C(253987186016373),	// VSLB
    UINT64_C(253987186016390),	// VSLD
    UINT64_C(253987186016375),	// VSLDB
    UINT64_C(252887674388595),	// VSP
    UINT64_C(253987186032887),	// VSQ
    UINT64_C(253987186016382),	// VSRA
    UINT64_C(253987186016383),	// VSRAB
    UINT64_C(253987186016391),	// VSRD
    UINT64_C(253987186016380),	// VSRL
    UINT64_C(253987186016381),	// VSRLB
    UINT64_C(252887674388569),	// VSRP
    UINT64_C(253987186016270),	// VST
    UINT64_C(253987186016270),	// VSTAlign
    UINT64_C(252887674388494),	// VSTBR
    UINT64_C(252887674396686),	// VSTBRF
    UINT64_C(252887674400782),	// VSTBRG
    UINT64_C(252887674392590),	// VSTBRH
    UINT64_C(252887674404878),	// VSTBRQ
    UINT64_C(253987186016264),	// VSTEB
    UINT64_C(252887674388491),	// VSTEBRF
    UINT64_C(252887674388490),	// VSTEBRG
    UINT64_C(252887674388489),	// VSTEBRH
    UINT64_C(253987186016267),	// VSTEF
    UINT64_C(253987186016266),	// VSTEG
    UINT64_C(253987186016265),	// VSTEH
    UINT64_C(252887674388495),	// VSTER
    UINT64_C(252887674396687),	// VSTERF
    UINT64_C(252887674400783),	// VSTERG
    UINT64_C(252887674392591),	// VSTERH
    UINT64_C(253987186016319),	// VSTL
    UINT64_C(253987186016318),	// VSTM
    UINT64_C(253987186016318),	// VSTMAlign
    UINT64_C(253987186016394),	// VSTRC
    UINT64_C(253987186016394),	// VSTRCB
    UINT64_C(253987187064970),	// VSTRCBS
    UINT64_C(253987219570826),	// VSTRCF
    UINT64_C(253987220619402),	// VSTRCFS
    UINT64_C(253987202793610),	// VSTRCH
    UINT64_C(253987203842186),	// VSTRCHS
    UINT64_C(253987188113546),	// VSTRCZB
    UINT64_C(253987189162122),	// VSTRCZBS
    UINT64_C(253987221667978),	// VSTRCZF
    UINT64_C(253987222716554),	// VSTRCZFS
    UINT64_C(253987204890762),	// VSTRCZH
    UINT64_C(253987205939338),	// VSTRCZHS
    UINT64_C(252887674388541),	// VSTRL
    UINT64_C(252887674388543),	// VSTRLR
    UINT64_C(253987186016395),	// VSTRS
    UINT64_C(253987186016395),	// VSTRSB
    UINT64_C(253987219570827),	// VSTRSF
    UINT64_C(253987202793611),	// VSTRSH
    UINT64_C(253987188113547),	// VSTRSZB
    UINT64_C(253987221667979),	// VSTRSZF
    UINT64_C(253987204890763),	// VSTRSZH
    UINT64_C(253987186016356),	// VSUM
    UINT64_C(253987186016356),	// VSUMB
    UINT64_C(253987186016357),	// VSUMG
    UINT64_C(253987186024549),	// VSUMGF
    UINT64_C(253987186020453),	// VSUMGH
    UINT64_C(253987186020452),	// VSUMH
    UINT64_C(253987186016359),	// VSUMQ
    UINT64_C(253987186024551),	// VSUMQF
    UINT64_C(253987186028647),	// VSUMQG
    UINT64_C(253987186016472),	// VTM
    UINT64_C(252887674388575),	// VTP
    UINT64_C(253987186016471),	// VUPH
    UINT64_C(253987186016471),	// VUPHB
    UINT64_C(253987186024663),	// VUPHF
    UINT64_C(253987186020567),	// VUPHH
    UINT64_C(252887674388540),	// VUPKZ
    UINT64_C(253987186016470),	// VUPL
    UINT64_C(253987186016470),	// VUPLB
    UINT64_C(253987186024662),	// VUPLF
    UINT64_C(253987186016469),	// VUPLH
    UINT64_C(253987186016469),	// VUPLHB
    UINT64_C(253987186024661),	// VUPLHF
    UINT64_C(253987186020565),	// VUPLHH
    UINT64_C(253987186020566),	// VUPLHW
    UINT64_C(253987186016468),	// VUPLL
    UINT64_C(253987186016468),	// VUPLLB
    UINT64_C(253987186024660),	// VUPLLF
    UINT64_C(253987186020564),	// VUPLLH
    UINT64_C(253987186016365),	// VX
    UINT64_C(253987186016324),	// VZERO
    UINT64_C(253987186553027),	// WCDGB
    UINT64_C(253987186553025),	// WCDLGB
    UINT64_C(253987186548931),	// WCEFB
    UINT64_C(253987186548929),	// WCELFB
    UINT64_C(253987186548930),	// WCFEB
    UINT64_C(253987186553026),	// WCGDB
    UINT64_C(253987186548928),	// WCLFEB
    UINT64_C(253987186553024),	// WCLGDB
    UINT64_C(253987186553059),	// WFADB
    UINT64_C(253987186548963),	// WFASB
    UINT64_C(253987186557155),	// WFAXB
    UINT64_C(253987186016459),	// WFC
    UINT64_C(253987186028747),	// WFCDB
    UINT64_C(253987186553064),	// WFCEDB
    UINT64_C(253987187601640),	// WFCEDBS
    UINT64_C(253987186548968),	// WFCESB
    UINT64_C(253987187597544),	// WFCESBS
    UINT64_C(253987186557160),	// WFCEXB
    UINT64_C(253987187605736),	// WFCEXBS
    UINT64_C(253987186553067),	// WFCHDB
    UINT64_C(253987187601643),	// WFCHDBS
    UINT64_C(253987186553066),	// WFCHEDB
    UINT64_C(253987187601642),	// WFCHEDBS
    UINT64_C(253987186548970),	// WFCHESB
    UINT64_C(253987187597546),	// WFCHESBS
    UINT64_C(253987186557162),	// WFCHEXB
    UINT64_C(253987187605738),	// WFCHEXBS
    UINT64_C(253987186548971),	// WFCHSB
    UINT64_C(253987187597547),	// WFCHSBS
    UINT64_C(253987186557163),	// WFCHXB
    UINT64_C(253987187605739),	// WFCHXBS
    UINT64_C(253987186024651),	// WFCSB
    UINT64_C(253987186032843),	// WFCXB
    UINT64_C(253987186553061),	// WFDDB
    UINT64_C(253987186548965),	// WFDSB
    UINT64_C(253987186557157),	// WFDXB
    UINT64_C(253987186553031),	// WFIDB
    UINT64_C(253987186548935),	// WFISB
    UINT64_C(253987186557127),	// WFIXB
    UINT64_C(253987186016458),	// WFK
    UINT64_C(253987186028746),	// WFKDB
    UINT64_C(253987186815208),	// WFKEDB
    UINT64_C(253987187863784),	// WFKEDBS
    UINT64_C(253987186811112),	// WFKESB
    UINT64_C(253987187859688),	// WFKESBS
    UINT64_C(253987186819304),	// WFKEXB
    UINT64_C(253987187867880),	// WFKEXBS
    UINT64_C(253987186815211),	// WFKHDB
    UINT64_C(253987187863787),	// WFKHDBS
    UINT64_C(253987186815210),	// WFKHEDB
    UINT64_C(253987187863786),	// WFKHEDBS
    UINT64_C(253987186811114),	// WFKHESB
    UINT64_C(253987187859690),	// WFKHESBS
    UINT64_C(253987186819306),	// WFKHEXB
    UINT64_C(253987187867882),	// WFKHEXBS
    UINT64_C(253987186811115),	// WFKHSB
    UINT64_C(253987187859691),	// WFKHSBS
    UINT64_C(253987186819307),	// WFKHXB
    UINT64_C(253987187867883),	// WFKHXBS
    UINT64_C(253987186024650),	// WFKSB
    UINT64_C(253987186032842),	// WFKXB
    UINT64_C(253987186553036),	// WFLCDB
    UINT64_C(253987186548940),	// WFLCSB
    UINT64_C(253987186557132),	// WFLCXB
    UINT64_C(253987186553028),	// WFLLD
    UINT64_C(253987186548932),	// WFLLS
    UINT64_C(253987187601612),	// WFLNDB
    UINT64_C(253987187597516),	// WFLNSB
    UINT64_C(253987187605708),	// WFLNXB
    UINT64_C(253987188650188),	// WFLPDB
    UINT64_C(253987188646092),	// WFLPSB
    UINT64_C(253987188654284),	// WFLPXB
    UINT64_C(253987186553029),	// WFLRD
    UINT64_C(253987186557125),	// WFLRX
    UINT64_C(253987236872335),	// WFMADB
    UINT64_C(253987220095119),	// WFMASB
    UINT64_C(253987253649551),	// WFMAXB
    UINT64_C(253987186553071),	// WFMAXDB
    UINT64_C(253987186548975),	// WFMAXSB
    UINT64_C(253987186557167),	// WFMAXXB
    UINT64_C(253987186553063),	// WFMDB
    UINT64_C(253987186553070),	// WFMINDB
    UINT64_C(253987186548974),	// WFMINSB
    UINT64_C(253987186557166),	// WFMINXB
    UINT64_C(253987186548967),	// WFMSB
    UINT64_C(253987236872334),	// WFMSDB
    UINT64_C(253987220095118),	// WFMSSB
    UINT64_C(253987253649550),	// WFMSXB
    UINT64_C(253987186557159),	// WFMXB
    UINT64_C(253987236872351),	// WFNMADB
    UINT64_C(253987220095135),	// WFNMASB
    UINT64_C(253987253649567),	// WFNMAXB
    UINT64_C(253987236872350),	// WFNMSDB
    UINT64_C(253987220095134),	// WFNMSSB
    UINT64_C(253987253649566),	// WFNMSXB
    UINT64_C(253987186553036),	// WFPSODB
    UINT64_C(253987186548940),	// WFPSOSB
    UINT64_C(253987186557132),	// WFPSOXB
    UINT64_C(253987186553058),	// WFSDB
    UINT64_C(253987186553038),	// WFSQDB
    UINT64_C(253987186548942),	// WFSQSB
    UINT64_C(253987186557134),	// WFSQXB
    UINT64_C(253987186548962),	// WFSSB
    UINT64_C(253987186557154),	// WFSXB
    UINT64_C(253987186552906),	// WFTCIDB
    UINT64_C(253987186548810),	// WFTCISB
    UINT64_C(253987186557002),	// WFTCIXB
    UINT64_C(253987186548932),	// WLDEB
    UINT64_C(253987186553029),	// WLEDB
    UINT64_C(1459617792),	// X
    UINT64_C(236394999971840),	// XC
    UINT64_C(249589139505282),	// XG
    UINT64_C(3112304640),	// XGR
    UINT64_C(3118923776),	// XGRK
    UINT64_C(2533359616),	// XI
    UINT64_C(211132002336768),	// XIHF
    UINT64_C(211136297304064),	// XILF
    UINT64_C(258385232527447),	// XIY
    UINT64_C(5888),	// XR
    UINT64_C(3119972352),	// XRK
    UINT64_C(2994077696),	// XSCH
    UINT64_C(249589139505239),	// XY
    UINT64_C(272678883688448),	// ZAP
    UINT64_C(0)
  };
  const unsigned opcode = MI.getOpcode();
  uint64_t Value = InstBits[opcode];
  uint64_t op = 0;
  (void)op;  // suppress warning
  switch (opcode) {
    case SystemZ::CSCH:
    case SystemZ::HSCH:
    case SystemZ::IPK:
    case SystemZ::PALB:
    case SystemZ::PCC:
    case SystemZ::PCKMO:
    case SystemZ::PFPO:
    case SystemZ::PR:
    case SystemZ::PTFF:
    case SystemZ::PTLB:
    case SystemZ::RCHP:
    case SystemZ::RSCH:
    case SystemZ::SAL:
    case SystemZ::SAM24:
    case SystemZ::SAM31:
    case SystemZ::SAM64:
    case SystemZ::SCHM:
    case SystemZ::SCKPF:
    case SystemZ::TAM:
    case SystemZ::TEND:
    case SystemZ::TRAP2:
    case SystemZ::UPT:
    case SystemZ::XSCH: {
      break;
    }
    case SystemZ::CLI:
    case SystemZ::MC:
    case SystemZ::MVI:
    case SystemZ::NI:
    case SystemZ::OI:
    case SystemZ::STNSM:
    case SystemZ::STOSM:
    case SystemZ::TM:
    case SystemZ::XI: {
      // op: BD1
      op = getBDAddr12Encoding(MI, 0, Fixups, STI);
      op &= UINT64_C(65535);
      Value |= op;
      // op: I2
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      op &= UINT64_C(255);
      op <<= 16;
      Value |= op;
      break;
    }
    case SystemZ::LASP:
    case SystemZ::MVCDK:
    case SystemZ::MVCRL:
    case SystemZ::MVCSK:
    case SystemZ::STRAG:
    case SystemZ::TPROT: {
      // op: BD1
      op = getBDAddr12Encoding(MI, 0, Fixups, STI);
      op &= UINT64_C(65535);
      op <<= 16;
      Value |= op;
      // op: BD2
      op = getBDAddr12Encoding(MI, 2, Fixups, STI);
      op &= UINT64_C(65535);
      Value |= op;
      break;
    }
    case SystemZ::CSST:
    case SystemZ::ECTG:
    case SystemZ::MVCOS: {
      // op: BD1
      op = getBDAddr12Encoding(MI, 0, Fixups, STI);
      op &= UINT64_C(65535);
      op <<= 16;
      Value |= op;
      // op: BD2
      op = getBDAddr12Encoding(MI, 2, Fixups, STI);
      op &= UINT64_C(65535);
      Value |= op;
      // op: R3
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 36;
      Value |= op;
      break;
    }
    case SystemZ::PKA:
    case SystemZ::PKU: {
      // op: BD1
      op = getBDAddr12Encoding(MI, 0, Fixups, STI);
      op &= UINT64_C(65535);
      op <<= 16;
      Value |= op;
      // op: BDL2
      op = getBDLAddr12Len8Encoding(MI, 2, Fixups, STI);
      Value |= (op & UINT64_C(16711680)) << 16;
      Value |= (op & UINT64_C(65535));
      break;
    }
    case SystemZ::CGHSI:
    case SystemZ::CHHSI:
    case SystemZ::CHSI:
    case SystemZ::CLFHSI:
    case SystemZ::CLGHSI:
    case SystemZ::CLHHSI:
    case SystemZ::MVGHI:
    case SystemZ::MVHHI:
    case SystemZ::MVHI:
    case SystemZ::TBEGIN:
    case SystemZ::TBEGINC: {
      // op: BD1
      op = getBDAddr12Encoding(MI, 0, Fixups, STI);
      op &= UINT64_C(65535);
      op <<= 16;
      Value |= op;
      // op: I2
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      op &= UINT64_C(65535);
      Value |= op;
      break;
    }
    case SystemZ::InsnSI: {
      // op: BD1
      op = getBDAddr12Encoding(MI, 1, Fixups, STI);
      op &= UINT64_C(65535);
      Value |= op;
      // op: I2
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      op &= UINT64_C(255);
      op <<= 16;
      Value |= op;
      // op: enc
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(4278190080);
      Value |= op;
      break;
    }
    case SystemZ::LPD:
    case SystemZ::LPDG: {
      // op: BD1
      op = getBDAddr12Encoding(MI, 1, Fixups, STI);
      op &= UINT64_C(65535);
      op <<= 16;
      Value |= op;
      // op: BD2
      op = getBDAddr12Encoding(MI, 3, Fixups, STI);
      op &= UINT64_C(65535);
      Value |= op;
      // op: R3
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 36;
      Value |= op;
      break;
    }
    case SystemZ::InsnSSF: {
      // op: BD1
      op = getBDAddr12Encoding(MI, 1, Fixups, STI);
      op &= UINT64_C(65535);
      op <<= 16;
      Value |= op;
      // op: BD2
      op = getBDAddr12Encoding(MI, 3, Fixups, STI);
      op &= UINT64_C(65535);
      Value |= op;
      // op: R3
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 36;
      Value |= op;
      // op: enc
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(280375465082880));
      Value |= (op & UINT64_C(64424509440));
      break;
    }
    case SystemZ::InsnSSE: {
      // op: BD1
      op = getBDAddr12Encoding(MI, 1, Fixups, STI);
      op &= UINT64_C(65535);
      op <<= 16;
      Value |= op;
      // op: BD2
      op = getBDAddr12Encoding(MI, 3, Fixups, STI);
      op &= UINT64_C(65535);
      Value |= op;
      // op: enc
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(281470681743360);
      Value |= op;
      break;
    }
    case SystemZ::InsnSIL: {
      // op: BD1
      op = getBDAddr12Encoding(MI, 1, Fixups, STI);
      op &= UINT64_C(65535);
      op <<= 16;
      Value |= op;
      // op: I2
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      op &= UINT64_C(65535);
      Value |= op;
      // op: enc
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(281470681743360);
      Value |= op;
      break;
    }
    case SystemZ::AGSI:
    case SystemZ::ALGSI:
    case SystemZ::ALSI:
    case SystemZ::ASI:
    case SystemZ::CLIY:
    case SystemZ::MVIY:
    case SystemZ::NIY:
    case SystemZ::OIY:
    case SystemZ::TMY:
    case SystemZ::XIY: {
      // op: BD1
      op = getBDAddr20Encoding(MI, 0, Fixups, STI);
      op &= UINT64_C(16777215);
      op <<= 8;
      Value |= op;
      // op: I2
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      op &= UINT64_C(255);
      op <<= 32;
      Value |= op;
      break;
    }
    case SystemZ::InsnSIY: {
      // op: BD1
      op = getBDAddr20Encoding(MI, 1, Fixups, STI);
      op &= UINT64_C(16777215);
      op <<= 8;
      Value |= op;
      // op: I2
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      op &= UINT64_C(255);
      op <<= 32;
      Value |= op;
      // op: enc
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(280375465082880));
      Value |= (op & UINT64_C(255));
      break;
    }
    case SystemZ::CFC:
    case SystemZ::LCCTL:
    case SystemZ::LFAS:
    case SystemZ::LFPC:
    case SystemZ::LPCTL:
    case SystemZ::LPP:
    case SystemZ::LPSW:
    case SystemZ::LPSWE:
    case SystemZ::LSCTL:
    case SystemZ::MSCH:
    case SystemZ::PC:
    case SystemZ::QCTRI:
    case SystemZ::QSI:
    case SystemZ::RP:
    case SystemZ::SAC:
    case SystemZ::SACF:
    case SystemZ::SCK:
    case SystemZ::SCKC:
    case SystemZ::SIE:
    case SystemZ::SIGA:
    case SystemZ::SPKA:
    case SystemZ::SPT:
    case SystemZ::SPX:
    case SystemZ::SRNM:
    case SystemZ::SRNMB:
    case SystemZ::SRNMT:
    case SystemZ::SSCH:
    case SystemZ::SSM:
    case SystemZ::STAP:
    case SystemZ::STCK:
    case SystemZ::STCKC:
    case SystemZ::STCKE:
    case SystemZ::STCKF:
    case SystemZ::STCPS:
    case SystemZ::STCRW:
    case SystemZ::STFL:
    case SystemZ::STFLE:
    case SystemZ::STFPC:
    case SystemZ::STIDP:
    case SystemZ::STPT:
    case SystemZ::STPX:
    case SystemZ::STSCH:
    case SystemZ::STSI:
    case SystemZ::TABORT:
    case SystemZ::TPI:
    case SystemZ::TRAP4:
    case SystemZ::TS:
    case SystemZ::TSCH: {
      // op: BD2
      op = getBDAddr12Encoding(MI, 0, Fixups, STI);
      op &= UINT64_C(65535);
      Value |= op;
      break;
    }
    case SystemZ::InsnS: {
      // op: BD2
      op = getBDAddr12Encoding(MI, 1, Fixups, STI);
      op &= UINT64_C(65535);
      Value |= op;
      // op: enc
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(4294901760);
      Value |= op;
      break;
    }
    case SystemZ::TP: {
      // op: BDL1
      op = getBDLAddr12Len4Encoding(MI, 0, Fixups, STI);
      Value |= (op & UINT64_C(983040)) << 20;
      Value |= (op & UINT64_C(65535)) << 16;
      break;
    }
    case SystemZ::SRP: {
      // op: BDL1
      op = getBDLAddr12Len4Encoding(MI, 0, Fixups, STI);
      Value |= (op & UINT64_C(983040)) << 20;
      Value |= (op & UINT64_C(65535)) << 16;
      // op: BD2
      op = getBDAddr12Encoding(MI, 3, Fixups, STI);
      op &= UINT64_C(65535);
      Value |= op;
      // op: I3
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 32;
      Value |= op;
      break;
    }
    case SystemZ::AP:
    case SystemZ::CP:
    case SystemZ::DP:
    case SystemZ::MP:
    case SystemZ::MVO:
    case SystemZ::PACK:
    case SystemZ::SP:
    case SystemZ::UNPK:
    case SystemZ::ZAP: {
      // op: BDL1
      op = getBDLAddr12Len4Encoding(MI, 0, Fixups, STI);
      Value |= (op & UINT64_C(983040)) << 20;
      Value |= (op & UINT64_C(65535)) << 16;
      // op: BDL2
      op = getBDLAddr12Len4Encoding(MI, 3, Fixups, STI);
      Value |= (op & UINT64_C(983040)) << 16;
      Value |= (op & UINT64_C(65535));
      break;
    }
    case SystemZ::CLC:
    case SystemZ::ED:
    case SystemZ::EDMK:
    case SystemZ::MVC:
    case SystemZ::MVCIN:
    case SystemZ::MVN:
    case SystemZ::MVZ:
    case SystemZ::NC:
    case SystemZ::OC:
    case SystemZ::TR:
    case SystemZ::TRT:
    case SystemZ::TRTR:
    case SystemZ::UNPKA:
    case SystemZ::UNPKU:
    case SystemZ::XC: {
      // op: BDL1
      op = getBDLAddr12Len8Encoding(MI, 0, Fixups, STI);
      op &= UINT64_C(16777215);
      op <<= 16;
      Value |= op;
      // op: BD2
      op = getBDAddr12Encoding(MI, 3, Fixups, STI);
      op &= UINT64_C(65535);
      Value |= op;
      break;
    }
    case SystemZ::NIAI: {
      // op: I1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 4;
      Value |= op;
      // op: I2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      op &= UINT64_C(15);
      Value |= op;
      break;
    }
    case SystemZ::SVC: {
      // op: I1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(255);
      Value |= op;
      break;
    }
    case SystemZ::BRCAsm: {
      // op: M1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 20;
      Value |= op;
      // op: RI2
      op = getPC16DBLEncoding(MI, 1, Fixups, STI);
      op &= UINT64_C(65535);
      Value |= op;
      break;
    }
    case SystemZ::BCAsm: {
      // op: M1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 20;
      Value |= op;
      // op: XBD2
      op = getBDXAddr12Encoding(MI, 1, Fixups, STI);
      op &= UINT64_C(1048575);
      Value |= op;
      break;
    }
    case SystemZ::BPRP: {
      // op: M1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 36;
      Value |= op;
      // op: RI2
      op = getPC12DBLBPPEncoding(MI, 1, Fixups, STI);
      op &= UINT64_C(4095);
      op <<= 24;
      Value |= op;
      // op: RI3
      op = getPC24DBLBPPEncoding(MI, 2, Fixups, STI);
      op &= UINT64_C(16777215);
      Value |= op;
      break;
    }
    case SystemZ::BPP: {
      // op: M1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 36;
      Value |= op;
      // op: RI2
      op = getPC16DBLBPPEncoding(MI, 1, Fixups, STI);
      op &= UINT64_C(65535);
      Value |= op;
      // op: BD3
      op = getBDXAddr12Encoding(MI, 2, Fixups, STI);
      op &= UINT64_C(65535);
      op <<= 16;
      Value |= op;
      break;
    }
    case SystemZ::BRCLAsm:
    case SystemZ::PFDRL: {
      // op: M1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 36;
      Value |= op;
      // op: RI2
      op = getPC32DBLEncoding(MI, 1, Fixups, STI);
      op &= UINT64_C(4294967295);
      Value |= op;
      break;
    }
    case SystemZ::BICAsm:
    case SystemZ::PFD: {
      // op: M1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 36;
      Value |= op;
      // op: XBD2
      op = getBDXAddr20Encoding(MI, 1, Fixups, STI);
      op &= UINT64_C(268435455);
      op <<= 8;
      Value |= op;
      break;
    }
    case SystemZ::BRC: {
      // op: M1
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 20;
      Value |= op;
      // op: RI2
      op = getPC16DBLEncoding(MI, 2, Fixups, STI);
      op &= UINT64_C(65535);
      Value |= op;
      break;
    }
    case SystemZ::BC: {
      // op: M1
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 20;
      Value |= op;
      // op: XBD2
      op = getBDXAddr12Encoding(MI, 2, Fixups, STI);
      op &= UINT64_C(1048575);
      Value |= op;
      break;
    }
    case SystemZ::BRCL: {
      // op: M1
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 36;
      Value |= op;
      // op: RI2
      op = getPC32DBLEncoding(MI, 2, Fixups, STI);
      op &= UINT64_C(4294967295);
      Value |= op;
      break;
    }
    case SystemZ::BIC: {
      // op: M1
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 36;
      Value |= op;
      // op: XBD2
      op = getBDXAddr20Encoding(MI, 2, Fixups, STI);
      op &= UINT64_C(268435455);
      op <<= 8;
      Value |= op;
      break;
    }
    case SystemZ::CDPT:
    case SystemZ::CDZT:
    case SystemZ::CPDT:
    case SystemZ::CPXT:
    case SystemZ::CXPT:
    case SystemZ::CXZT:
    case SystemZ::CZDT:
    case SystemZ::CZXT: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 12;
      Value |= op;
      // op: BDL2
      op = getBDLAddr12Len8Encoding(MI, 1, Fixups, STI);
      op &= UINT64_C(16777215);
      op <<= 16;
      Value |= op;
      // op: M3
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 8;
      Value |= op;
      break;
    }
    case SystemZ::MY:
    case SystemZ::MYH:
    case SystemZ::MYL:
    case SystemZ::SLDT:
    case SystemZ::SLXT:
    case SystemZ::SRDT:
    case SystemZ::SRXT: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 12;
      Value |= op;
      // op: R3
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 36;
      Value |= op;
      // op: XBD2
      op = getBDXAddr12Encoding(MI, 2, Fixups, STI);
      op &= UINT64_C(1048575);
      op <<= 16;
      Value |= op;
      break;
    }
    case SystemZ::MYHR:
    case SystemZ::MYLR:
    case SystemZ::MYR: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 12;
      Value |= op;
      // op: R3
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 4;
      Value |= op;
      // op: R2
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      op &= UINT64_C(15);
      Value |= op;
      break;
    }
    case SystemZ::MAD:
    case SystemZ::MADB:
    case SystemZ::MAE:
    case SystemZ::MAEB:
    case SystemZ::MAY:
    case SystemZ::MAYH:
    case SystemZ::MAYL:
    case SystemZ::MSD:
    case SystemZ::MSDB:
    case SystemZ::MSE:
    case SystemZ::MSEB: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 12;
      Value |= op;
      // op: R3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 36;
      Value |= op;
      // op: XBD2
      op = getBDXAddr12Encoding(MI, 3, Fixups, STI);
      op &= UINT64_C(1048575);
      op <<= 16;
      Value |= op;
      break;
    }
    case SystemZ::MADBR:
    case SystemZ::MADR:
    case SystemZ::MAEBR:
    case SystemZ::MAER:
    case SystemZ::MAYHR:
    case SystemZ::MAYLR:
    case SystemZ::MAYR:
    case SystemZ::MSDBR:
    case SystemZ::MSDR:
    case SystemZ::MSEBR:
    case SystemZ::MSER: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 12;
      Value |= op;
      // op: R3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 4;
      Value |= op;
      // op: R2
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      op &= UINT64_C(15);
      Value |= op;
      break;
    }
    case SystemZ::SLA:
    case SystemZ::SLDA:
    case SystemZ::SLDL:
    case SystemZ::SLL:
    case SystemZ::SRA:
    case SystemZ::SRDA:
    case SystemZ::SRDL:
    case SystemZ::SRL: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 20;
      Value |= op;
      // op: BD2
      op = getBDAddr12Encoding(MI, 2, Fixups, STI);
      op &= UINT64_C(65535);
      Value |= op;
      break;
    }
    case SystemZ::CGHI:
    case SystemZ::CHI:
    case SystemZ::LGHI:
    case SystemZ::LHI:
    case SystemZ::LLIHH:
    case SystemZ::LLIHL:
    case SystemZ::LLILH:
    case SystemZ::LLILL:
    case SystemZ::TMHH:
    case SystemZ::TMHL:
    case SystemZ::TMLH:
    case SystemZ::TMLL: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 20;
      Value |= op;
      // op: I2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      op &= UINT64_C(65535);
      Value |= op;
      break;
    }
    case SystemZ::AGHI:
    case SystemZ::AHI:
    case SystemZ::IIHH:
    case SystemZ::IIHL:
    case SystemZ::IILH:
    case SystemZ::IILL:
    case SystemZ::MGHI:
    case SystemZ::MHI:
    case SystemZ::NIHH:
    case SystemZ::NIHL:
    case SystemZ::NILH:
    case SystemZ::NILL:
    case SystemZ::OIHH:
    case SystemZ::OIHL:
    case SystemZ::OILH:
    case SystemZ::OILL: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 20;
      Value |= op;
      // op: I2
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      op &= UINT64_C(65535);
      Value |= op;
      break;
    }
    case SystemZ::CLM:
    case SystemZ::STCM: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 20;
      Value |= op;
      // op: M3
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 16;
      Value |= op;
      // op: BD2
      op = getBDAddr12Encoding(MI, 2, Fixups, STI);
      op &= UINT64_C(65535);
      Value |= op;
      break;
    }
    case SystemZ::ICM: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 20;
      Value |= op;
      // op: M3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 16;
      Value |= op;
      // op: BD2
      op = getBDAddr12Encoding(MI, 3, Fixups, STI);
      op &= UINT64_C(65535);
      Value |= op;
      break;
    }
    case SystemZ::DIAG:
    case SystemZ::LAM:
    case SystemZ::LCTL:
    case SystemZ::LM:
    case SystemZ::SIGP:
    case SystemZ::STAM:
    case SystemZ::STCTL:
    case SystemZ::STM:
    case SystemZ::TRACE: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 20;
      Value |= op;
      // op: R3
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 16;
      Value |= op;
      // op: BD2
      op = getBDAddr12Encoding(MI, 2, Fixups, STI);
      op &= UINT64_C(65535);
      Value |= op;
      break;
    }
    case SystemZ::CLCLE:
    case SystemZ::MVCLE: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 20;
      Value |= op;
      // op: R3
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 16;
      Value |= op;
      // op: BD2
      op = getBDAddr12Encoding(MI, 4, Fixups, STI);
      op &= UINT64_C(65535);
      Value |= op;
      break;
    }
    case SystemZ::BXH:
    case SystemZ::BXLE:
    case SystemZ::CDS:
    case SystemZ::CS: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 20;
      Value |= op;
      // op: R3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 16;
      Value |= op;
      // op: BD2
      op = getBDAddr12Encoding(MI, 3, Fixups, STI);
      op &= UINT64_C(65535);
      Value |= op;
      break;
    }
    case SystemZ::BRXH:
    case SystemZ::BRXLE: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 20;
      Value |= op;
      // op: R3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 16;
      Value |= op;
      // op: RI2
      op = getPC16DBLEncoding(MI, 3, Fixups, STI);
      op &= UINT64_C(65535);
      Value |= op;
      break;
    }
    case SystemZ::BRCT:
    case SystemZ::BRCTG: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 20;
      Value |= op;
      // op: RI2
      op = getPC16DBLEncoding(MI, 2, Fixups, STI);
      op &= UINT64_C(65535);
      Value |= op;
      break;
    }
    case SystemZ::BRAS: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 20;
      Value |= op;
      // op: RI2
      op = getPC16DBLTLSEncoding(MI, 1, Fixups, STI);
      op &= UINT64_C(65535);
      Value |= op;
      break;
    }
    case SystemZ::BAL:
    case SystemZ::BAS:
    case SystemZ::C:
    case SystemZ::CD:
    case SystemZ::CE:
    case SystemZ::CH:
    case SystemZ::CL:
    case SystemZ::CVD:
    case SystemZ::EX:
    case SystemZ::L:
    case SystemZ::LA:
    case SystemZ::LAE:
    case SystemZ::LD:
    case SystemZ::LE:
    case SystemZ::LH:
    case SystemZ::LRA:
    case SystemZ::ST:
    case SystemZ::STC:
    case SystemZ::STD:
    case SystemZ::STE:
    case SystemZ::STH: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 20;
      Value |= op;
      // op: XBD2
      op = getBDXAddr12Encoding(MI, 1, Fixups, STI);
      op &= UINT64_C(1048575);
      Value |= op;
      break;
    }
    case SystemZ::A:
    case SystemZ::AD:
    case SystemZ::AE:
    case SystemZ::AH:
    case SystemZ::AL:
    case SystemZ::AU:
    case SystemZ::AW:
    case SystemZ::BCT:
    case SystemZ::CVB:
    case SystemZ::D:
    case SystemZ::DD:
    case SystemZ::DE:
    case SystemZ::IC:
    case SystemZ::IC32:
    case SystemZ::M:
    case SystemZ::MD:
    case SystemZ::MDE:
    case SystemZ::ME:
    case SystemZ::MH:
    case SystemZ::MS:
    case SystemZ::MXD:
    case SystemZ::N:
    case SystemZ::O:
    case SystemZ::S:
    case SystemZ::SD:
    case SystemZ::SE:
    case SystemZ::SH:
    case SystemZ::SL:
    case SystemZ::SU:
    case SystemZ::SW:
    case SystemZ::X: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 20;
      Value |= op;
      // op: XBD2
      op = getBDXAddr12Encoding(MI, 2, Fixups, STI);
      op &= UINT64_C(1048575);
      Value |= op;
      break;
    }
    case SystemZ::PLO: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 36;
      Value |= op;
      // op: BD2
      op = getBDAddr12Encoding(MI, 1, Fixups, STI);
      op &= UINT64_C(65535);
      op <<= 16;
      Value |= op;
      // op: R3
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 32;
      Value |= op;
      // op: BD4
      op = getBDAddr12Encoding(MI, 4, Fixups, STI);
      op &= UINT64_C(65535);
      Value |= op;
      break;
    }
    case SystemZ::LMD: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 36;
      Value |= op;
      // op: BD2
      op = getBDAddr12Encoding(MI, 2, Fixups, STI);
      op &= UINT64_C(65535);
      op <<= 16;
      Value |= op;
      // op: R3
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 32;
      Value |= op;
      // op: BD4
      op = getBDAddr12Encoding(MI, 4, Fixups, STI);
      op &= UINT64_C(65535);
      Value |= op;
      break;
    }
    case SystemZ::VLGVB:
    case SystemZ::VLGVF:
    case SystemZ::VLGVG:
    case SystemZ::VLGVH: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 36;
      Value |= op;
      // op: BD2
      op = getBDAddr12Encoding(MI, 2, Fixups, STI);
      op &= UINT64_C(65535);
      op <<= 16;
      Value |= op;
      // op: V3
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      Value |= (op & UINT64_C(16)) << 6;
      break;
    }
    case SystemZ::VLGV: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 36;
      Value |= op;
      // op: BD2
      op = getBDAddr12Encoding(MI, 2, Fixups, STI);
      op &= UINT64_C(65535);
      op <<= 16;
      Value |= op;
      // op: V3
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      Value |= (op & UINT64_C(16)) << 6;
      // op: M4
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 12;
      Value |= op;
      break;
    }
    case SystemZ::CLGTAsmE:
    case SystemZ::CLGTAsmH:
    case SystemZ::CLGTAsmHE:
    case SystemZ::CLGTAsmL:
    case SystemZ::CLGTAsmLE:
    case SystemZ::CLGTAsmLH:
    case SystemZ::CLGTAsmNE:
    case SystemZ::CLGTAsmNH:
    case SystemZ::CLGTAsmNHE:
    case SystemZ::CLGTAsmNL:
    case SystemZ::CLGTAsmNLE:
    case SystemZ::CLGTAsmNLH:
    case SystemZ::CLTAsmE:
    case SystemZ::CLTAsmH:
    case SystemZ::CLTAsmHE:
    case SystemZ::CLTAsmL:
    case SystemZ::CLTAsmLE:
    case SystemZ::CLTAsmLH:
    case SystemZ::CLTAsmNE:
    case SystemZ::CLTAsmNH:
    case SystemZ::CLTAsmNHE:
    case SystemZ::CLTAsmNL:
    case SystemZ::CLTAsmNLE:
    case SystemZ::CLTAsmNLH:
    case SystemZ::STOCAsmE:
    case SystemZ::STOCAsmH:
    case SystemZ::STOCAsmHE:
    case SystemZ::STOCAsmL:
    case SystemZ::STOCAsmLE:
    case SystemZ::STOCAsmLH:
    case SystemZ::STOCAsmM:
    case SystemZ::STOCAsmNE:
    case SystemZ::STOCAsmNH:
    case SystemZ::STOCAsmNHE:
    case SystemZ::STOCAsmNL:
    case SystemZ::STOCAsmNLE:
    case SystemZ::STOCAsmNLH:
    case SystemZ::STOCAsmNM:
    case SystemZ::STOCAsmNO:
    case SystemZ::STOCAsmNP:
    case SystemZ::STOCAsmNZ:
    case SystemZ::STOCAsmO:
    case SystemZ::STOCAsmP:
    case SystemZ::STOCAsmZ:
    case SystemZ::STOCFHAsmE:
    case SystemZ::STOCFHAsmH:
    case SystemZ::STOCFHAsmHE:
    case SystemZ::STOCFHAsmL:
    case SystemZ::STOCFHAsmLE:
    case SystemZ::STOCFHAsmLH:
    case SystemZ::STOCFHAsmM:
    case SystemZ::STOCFHAsmNE:
    case SystemZ::STOCFHAsmNH:
    case SystemZ::STOCFHAsmNHE:
    case SystemZ::STOCFHAsmNL:
    case SystemZ::STOCFHAsmNLE:
    case SystemZ::STOCFHAsmNLH:
    case SystemZ::STOCFHAsmNM:
    case SystemZ::STOCFHAsmNO:
    case SystemZ::STOCFHAsmNP:
    case SystemZ::STOCFHAsmNZ:
    case SystemZ::STOCFHAsmO:
    case SystemZ::STOCFHAsmP:
    case SystemZ::STOCFHAsmZ:
    case SystemZ::STOCGAsmE:
    case SystemZ::STOCGAsmH:
    case SystemZ::STOCGAsmHE:
    case SystemZ::STOCGAsmL:
    case SystemZ::STOCGAsmLE:
    case SystemZ::STOCGAsmLH:
    case SystemZ::STOCGAsmM:
    case SystemZ::STOCGAsmNE:
    case SystemZ::STOCGAsmNH:
    case SystemZ::STOCGAsmNHE:
    case SystemZ::STOCGAsmNL:
    case SystemZ::STOCGAsmNLE:
    case SystemZ::STOCGAsmNLH:
    case SystemZ::STOCGAsmNM:
    case SystemZ::STOCGAsmNO:
    case SystemZ::STOCGAsmNP:
    case SystemZ::STOCGAsmNZ:
    case SystemZ::STOCGAsmO:
    case SystemZ::STOCGAsmP:
    case SystemZ::STOCGAsmZ: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 36;
      Value |= op;
      // op: BD2
      op = getBDAddr20Encoding(MI, 1, Fixups, STI);
      op &= UINT64_C(16777215);
      op <<= 8;
      Value |= op;
      break;
    }
    case SystemZ::LOCAsmE:
    case SystemZ::LOCAsmH:
    case SystemZ::LOCAsmHE:
    case SystemZ::LOCAsmL:
    case SystemZ::LOCAsmLE:
    case SystemZ::LOCAsmLH:
    case SystemZ::LOCAsmM:
    case SystemZ::LOCAsmNE:
    case SystemZ::LOCAsmNH:
    case SystemZ::LOCAsmNHE:
    case SystemZ::LOCAsmNL:
    case SystemZ::LOCAsmNLE:
    case SystemZ::LOCAsmNLH:
    case SystemZ::LOCAsmNM:
    case SystemZ::LOCAsmNO:
    case SystemZ::LOCAsmNP:
    case SystemZ::LOCAsmNZ:
    case SystemZ::LOCAsmO:
    case SystemZ::LOCAsmP:
    case SystemZ::LOCAsmZ:
    case SystemZ::LOCFHAsmE:
    case SystemZ::LOCFHAsmH:
    case SystemZ::LOCFHAsmHE:
    case SystemZ::LOCFHAsmL:
    case SystemZ::LOCFHAsmLE:
    case SystemZ::LOCFHAsmLH:
    case SystemZ::LOCFHAsmM:
    case SystemZ::LOCFHAsmNE:
    case SystemZ::LOCFHAsmNH:
    case SystemZ::LOCFHAsmNHE:
    case SystemZ::LOCFHAsmNL:
    case SystemZ::LOCFHAsmNLE:
    case SystemZ::LOCFHAsmNLH:
    case SystemZ::LOCFHAsmNM:
    case SystemZ::LOCFHAsmNO:
    case SystemZ::LOCFHAsmNP:
    case SystemZ::LOCFHAsmNZ:
    case SystemZ::LOCFHAsmO:
    case SystemZ::LOCFHAsmP:
    case SystemZ::LOCFHAsmZ:
    case SystemZ::LOCGAsmE:
    case SystemZ::LOCGAsmH:
    case SystemZ::LOCGAsmHE:
    case SystemZ::LOCGAsmL:
    case SystemZ::LOCGAsmLE:
    case SystemZ::LOCGAsmLH:
    case SystemZ::LOCGAsmM:
    case SystemZ::LOCGAsmNE:
    case SystemZ::LOCGAsmNH:
    case SystemZ::LOCGAsmNHE:
    case SystemZ::LOCGAsmNL:
    case SystemZ::LOCGAsmNLE:
    case SystemZ::LOCGAsmNLH:
    case SystemZ::LOCGAsmNM:
    case SystemZ::LOCGAsmNO:
    case SystemZ::LOCGAsmNP:
    case SystemZ::LOCGAsmNZ:
    case SystemZ::LOCGAsmO:
    case SystemZ::LOCGAsmP:
    case SystemZ::LOCGAsmZ: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 36;
      Value |= op;
      // op: BD2
      op = getBDAddr20Encoding(MI, 2, Fixups, STI);
      op &= UINT64_C(16777215);
      op <<= 8;
      Value |= op;
      break;
    }
    case SystemZ::CGIBAsmE:
    case SystemZ::CGIBAsmH:
    case SystemZ::CGIBAsmHE:
    case SystemZ::CGIBAsmL:
    case SystemZ::CGIBAsmLE:
    case SystemZ::CGIBAsmLH:
    case SystemZ::CGIBAsmNE:
    case SystemZ::CGIBAsmNH:
    case SystemZ::CGIBAsmNHE:
    case SystemZ::CGIBAsmNL:
    case SystemZ::CGIBAsmNLE:
    case SystemZ::CGIBAsmNLH:
    case SystemZ::CIBAsmE:
    case SystemZ::CIBAsmH:
    case SystemZ::CIBAsmHE:
    case SystemZ::CIBAsmL:
    case SystemZ::CIBAsmLE:
    case SystemZ::CIBAsmLH:
    case SystemZ::CIBAsmNE:
    case SystemZ::CIBAsmNH:
    case SystemZ::CIBAsmNHE:
    case SystemZ::CIBAsmNL:
    case SystemZ::CIBAsmNLE:
    case SystemZ::CIBAsmNLH:
    case SystemZ::CLGIBAsmE:
    case SystemZ::CLGIBAsmH:
    case SystemZ::CLGIBAsmHE:
    case SystemZ::CLGIBAsmL:
    case SystemZ::CLGIBAsmLE:
    case SystemZ::CLGIBAsmLH:
    case SystemZ::CLGIBAsmNE:
    case SystemZ::CLGIBAsmNH:
    case SystemZ::CLGIBAsmNHE:
    case SystemZ::CLGIBAsmNL:
    case SystemZ::CLGIBAsmNLE:
    case SystemZ::CLGIBAsmNLH:
    case SystemZ::CLIBAsmE:
    case SystemZ::CLIBAsmH:
    case SystemZ::CLIBAsmHE:
    case SystemZ::CLIBAsmL:
    case SystemZ::CLIBAsmLE:
    case SystemZ::CLIBAsmLH:
    case SystemZ::CLIBAsmNE:
    case SystemZ::CLIBAsmNH:
    case SystemZ::CLIBAsmNHE:
    case SystemZ::CLIBAsmNL:
    case SystemZ::CLIBAsmNLE:
    case SystemZ::CLIBAsmNLH: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 36;
      Value |= op;
      // op: I2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      op &= UINT64_C(255);
      op <<= 8;
      Value |= op;
      // op: BD4
      op = getBDAddr12Encoding(MI, 2, Fixups, STI);
      op &= UINT64_C(65535);
      op <<= 16;
      Value |= op;
      break;
    }
    case SystemZ::CGIB:
    case SystemZ::CGIBAsm:
    case SystemZ::CIB:
    case SystemZ::CIBAsm:
    case SystemZ::CLGIB:
    case SystemZ::CLGIBAsm:
    case SystemZ::CLIB:
    case SystemZ::CLIBAsm: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 36;
      Value |= op;
      // op: I2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      op &= UINT64_C(255);
      op <<= 8;
      Value |= op;
      // op: M3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 32;
      Value |= op;
      // op: BD4
      op = getBDAddr12Encoding(MI, 3, Fixups, STI);
      op &= UINT64_C(65535);
      op <<= 16;
      Value |= op;
      break;
    }
    case SystemZ::CGIJ:
    case SystemZ::CGIJAsm:
    case SystemZ::CIJ:
    case SystemZ::CIJAsm:
    case SystemZ::CLGIJ:
    case SystemZ::CLGIJAsm:
    case SystemZ::CLIJ:
    case SystemZ::CLIJAsm: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 36;
      Value |= op;
      // op: I2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      op &= UINT64_C(255);
      op <<= 8;
      Value |= op;
      // op: M3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 32;
      Value |= op;
      // op: RI4
      op = getPC16DBLEncoding(MI, 3, Fixups, STI);
      op &= UINT64_C(65535);
      op <<= 16;
      Value |= op;
      break;
    }
    case SystemZ::CGIJAsmE:
    case SystemZ::CGIJAsmH:
    case SystemZ::CGIJAsmHE:
    case SystemZ::CGIJAsmL:
    case SystemZ::CGIJAsmLE:
    case SystemZ::CGIJAsmLH:
    case SystemZ::CGIJAsmNE:
    case SystemZ::CGIJAsmNH:
    case SystemZ::CGIJAsmNHE:
    case SystemZ::CGIJAsmNL:
    case SystemZ::CGIJAsmNLE:
    case SystemZ::CGIJAsmNLH:
    case SystemZ::CIJAsmE:
    case SystemZ::CIJAsmH:
    case SystemZ::CIJAsmHE:
    case SystemZ::CIJAsmL:
    case SystemZ::CIJAsmLE:
    case SystemZ::CIJAsmLH:
    case SystemZ::CIJAsmNE:
    case SystemZ::CIJAsmNH:
    case SystemZ::CIJAsmNHE:
    case SystemZ::CIJAsmNL:
    case SystemZ::CIJAsmNLE:
    case SystemZ::CIJAsmNLH:
    case SystemZ::CLGIJAsmE:
    case SystemZ::CLGIJAsmH:
    case SystemZ::CLGIJAsmHE:
    case SystemZ::CLGIJAsmL:
    case SystemZ::CLGIJAsmLE:
    case SystemZ::CLGIJAsmLH:
    case SystemZ::CLGIJAsmNE:
    case SystemZ::CLGIJAsmNH:
    case SystemZ::CLGIJAsmNHE:
    case SystemZ::CLGIJAsmNL:
    case SystemZ::CLGIJAsmNLE:
    case SystemZ::CLGIJAsmNLH:
    case SystemZ::CLIJAsmE:
    case SystemZ::CLIJAsmH:
    case SystemZ::CLIJAsmHE:
    case SystemZ::CLIJAsmL:
    case SystemZ::CLIJAsmLE:
    case SystemZ::CLIJAsmLH:
    case SystemZ::CLIJAsmNE:
    case SystemZ::CLIJAsmNH:
    case SystemZ::CLIJAsmNHE:
    case SystemZ::CLIJAsmNL:
    case SystemZ::CLIJAsmNLE:
    case SystemZ::CLIJAsmNLH: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 36;
      Value |= op;
      // op: I2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      op &= UINT64_C(255);
      op <<= 8;
      Value |= op;
      // op: RI4
      op = getPC16DBLEncoding(MI, 2, Fixups, STI);
      op &= UINT64_C(65535);
      op <<= 16;
      Value |= op;
      break;
    }
    case SystemZ::CFI:
    case SystemZ::CGFI:
    case SystemZ::CIH:
    case SystemZ::CLFI:
    case SystemZ::CLGFI:
    case SystemZ::CLIH:
    case SystemZ::IIHF:
    case SystemZ::IILF:
    case SystemZ::LGFI:
    case SystemZ::LLIHF:
    case SystemZ::LLILF: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 36;
      Value |= op;
      // op: I2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      op &= UINT64_C(4294967295);
      Value |= op;
      break;
    }
    case SystemZ::CGITAsmE:
    case SystemZ::CGITAsmH:
    case SystemZ::CGITAsmHE:
    case SystemZ::CGITAsmL:
    case SystemZ::CGITAsmLE:
    case SystemZ::CGITAsmLH:
    case SystemZ::CGITAsmNE:
    case SystemZ::CGITAsmNH:
    case SystemZ::CGITAsmNHE:
    case SystemZ::CGITAsmNL:
    case SystemZ::CGITAsmNLE:
    case SystemZ::CGITAsmNLH:
    case SystemZ::CITAsmE:
    case SystemZ::CITAsmH:
    case SystemZ::CITAsmHE:
    case SystemZ::CITAsmL:
    case SystemZ::CITAsmLE:
    case SystemZ::CITAsmLH:
    case SystemZ::CITAsmNE:
    case SystemZ::CITAsmNH:
    case SystemZ::CITAsmNHE:
    case SystemZ::CITAsmNL:
    case SystemZ::CITAsmNLE:
    case SystemZ::CITAsmNLH:
    case SystemZ::CLFITAsmE:
    case SystemZ::CLFITAsmH:
    case SystemZ::CLFITAsmHE:
    case SystemZ::CLFITAsmL:
    case SystemZ::CLFITAsmLE:
    case SystemZ::CLFITAsmLH:
    case SystemZ::CLFITAsmNE:
    case SystemZ::CLFITAsmNH:
    case SystemZ::CLFITAsmNHE:
    case SystemZ::CLFITAsmNL:
    case SystemZ::CLFITAsmNLE:
    case SystemZ::CLFITAsmNLH:
    case SystemZ::CLGITAsmE:
    case SystemZ::CLGITAsmH:
    case SystemZ::CLGITAsmHE:
    case SystemZ::CLGITAsmL:
    case SystemZ::CLGITAsmLE:
    case SystemZ::CLGITAsmLH:
    case SystemZ::CLGITAsmNE:
    case SystemZ::CLGITAsmNH:
    case SystemZ::CLGITAsmNHE:
    case SystemZ::CLGITAsmNL:
    case SystemZ::CLGITAsmNLE:
    case SystemZ::CLGITAsmNLH: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 36;
      Value |= op;
      // op: I2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      op &= UINT64_C(65535);
      op <<= 16;
      Value |= op;
      break;
    }
    case SystemZ::CGIT:
    case SystemZ::CGITAsm:
    case SystemZ::CIT:
    case SystemZ::CITAsm:
    case SystemZ::CLFIT:
    case SystemZ::CLFITAsm:
    case SystemZ::CLGIT:
    case SystemZ::CLGITAsm: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 36;
      Value |= op;
      // op: I2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      op &= UINT64_C(65535);
      op <<= 16;
      Value |= op;
      // op: M3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 12;
      Value |= op;
      break;
    }
    case SystemZ::AFI:
    case SystemZ::AGFI:
    case SystemZ::AIH:
    case SystemZ::ALFI:
    case SystemZ::ALGFI:
    case SystemZ::ALSIH:
    case SystemZ::ALSIHN:
    case SystemZ::MSFI:
    case SystemZ::MSGFI:
    case SystemZ::NIHF:
    case SystemZ::NILF:
    case SystemZ::OIHF:
    case SystemZ::OILF:
    case SystemZ::SLFI:
    case SystemZ::SLGFI:
    case SystemZ::XIHF:
    case SystemZ::XILF: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 36;
      Value |= op;
      // op: I2
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      op &= UINT64_C(4294967295);
      Value |= op;
      break;
    }
    case SystemZ::LOCGHIAsmE:
    case SystemZ::LOCGHIAsmH:
    case SystemZ::LOCGHIAsmHE:
    case SystemZ::LOCGHIAsmL:
    case SystemZ::LOCGHIAsmLE:
    case SystemZ::LOCGHIAsmLH:
    case SystemZ::LOCGHIAsmM:
    case SystemZ::LOCGHIAsmNE:
    case SystemZ::LOCGHIAsmNH:
    case SystemZ::LOCGHIAsmNHE:
    case SystemZ::LOCGHIAsmNL:
    case SystemZ::LOCGHIAsmNLE:
    case SystemZ::LOCGHIAsmNLH:
    case SystemZ::LOCGHIAsmNM:
    case SystemZ::LOCGHIAsmNO:
    case SystemZ::LOCGHIAsmNP:
    case SystemZ::LOCGHIAsmNZ:
    case SystemZ::LOCGHIAsmO:
    case SystemZ::LOCGHIAsmP:
    case SystemZ::LOCGHIAsmZ:
    case SystemZ::LOCHHIAsmE:
    case SystemZ::LOCHHIAsmH:
    case SystemZ::LOCHHIAsmHE:
    case SystemZ::LOCHHIAsmL:
    case SystemZ::LOCHHIAsmLE:
    case SystemZ::LOCHHIAsmLH:
    case SystemZ::LOCHHIAsmM:
    case SystemZ::LOCHHIAsmNE:
    case SystemZ::LOCHHIAsmNH:
    case SystemZ::LOCHHIAsmNHE:
    case SystemZ::LOCHHIAsmNL:
    case SystemZ::LOCHHIAsmNLE:
    case SystemZ::LOCHHIAsmNLH:
    case SystemZ::LOCHHIAsmNM:
    case SystemZ::LOCHHIAsmNO:
    case SystemZ::LOCHHIAsmNP:
    case SystemZ::LOCHHIAsmNZ:
    case SystemZ::LOCHHIAsmO:
    case SystemZ::LOCHHIAsmP:
    case SystemZ::LOCHHIAsmZ:
    case SystemZ::LOCHIAsmE:
    case SystemZ::LOCHIAsmH:
    case SystemZ::LOCHIAsmHE:
    case SystemZ::LOCHIAsmL:
    case SystemZ::LOCHIAsmLE:
    case SystemZ::LOCHIAsmLH:
    case SystemZ::LOCHIAsmM:
    case SystemZ::LOCHIAsmNE:
    case SystemZ::LOCHIAsmNH:
    case SystemZ::LOCHIAsmNHE:
    case SystemZ::LOCHIAsmNL:
    case SystemZ::LOCHIAsmNLE:
    case SystemZ::LOCHIAsmNLH:
    case SystemZ::LOCHIAsmNM:
    case SystemZ::LOCHIAsmNO:
    case SystemZ::LOCHIAsmNP:
    case SystemZ::LOCHIAsmNZ:
    case SystemZ::LOCHIAsmO:
    case SystemZ::LOCHIAsmP:
    case SystemZ::LOCHIAsmZ: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 36;
      Value |= op;
      // op: I2
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      op &= UINT64_C(65535);
      op <<= 16;
      Value |= op;
      break;
    }
    case SystemZ::CLMH:
    case SystemZ::CLMY:
    case SystemZ::STCMH:
    case SystemZ::STCMY: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 36;
      Value |= op;
      // op: M3
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 32;
      Value |= op;
      // op: BD2
      op = getBDAddr20Encoding(MI, 2, Fixups, STI);
      op &= UINT64_C(16777215);
      op <<= 8;
      Value |= op;
      break;
    }
    case SystemZ::ICMH:
    case SystemZ::ICMY: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 36;
      Value |= op;
      // op: M3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 32;
      Value |= op;
      // op: BD2
      op = getBDAddr20Encoding(MI, 3, Fixups, STI);
      op &= UINT64_C(16777215);
      op <<= 8;
      Value |= op;
      break;
    }
    case SystemZ::CLGT:
    case SystemZ::CLGTAsm:
    case SystemZ::CLT:
    case SystemZ::CLTAsm:
    case SystemZ::STOCAsm:
    case SystemZ::STOCFHAsm:
    case SystemZ::STOCGAsm: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 36;
      Value |= op;
      // op: M3
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 32;
      Value |= op;
      // op: BD2
      op = getBDAddr20Encoding(MI, 1, Fixups, STI);
      op &= UINT64_C(16777215);
      op <<= 8;
      Value |= op;
      break;
    }
    case SystemZ::LOCGHIAsm:
    case SystemZ::LOCHHIAsm:
    case SystemZ::LOCHIAsm: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 36;
      Value |= op;
      // op: M3
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 32;
      Value |= op;
      // op: I2
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      op &= UINT64_C(65535);
      op <<= 16;
      Value |= op;
      break;
    }
    case SystemZ::STOC:
    case SystemZ::STOCFH:
    case SystemZ::STOCG: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 36;
      Value |= op;
      // op: M3
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 32;
      Value |= op;
      // op: BD2
      op = getBDAddr20Encoding(MI, 1, Fixups, STI);
      op &= UINT64_C(16777215);
      op <<= 8;
      Value |= op;
      break;
    }
    case SystemZ::LOCAsm:
    case SystemZ::LOCFHAsm:
    case SystemZ::LOCGAsm: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 36;
      Value |= op;
      // op: M3
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 32;
      Value |= op;
      // op: BD2
      op = getBDAddr20Encoding(MI, 2, Fixups, STI);
      op &= UINT64_C(16777215);
      op <<= 8;
      Value |= op;
      break;
    }
    case SystemZ::LOCGHI:
    case SystemZ::LOCHHI:
    case SystemZ::LOCHI: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 36;
      Value |= op;
      // op: M3
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 32;
      Value |= op;
      // op: I2
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      op &= UINT64_C(65535);
      op <<= 16;
      Value |= op;
      break;
    }
    case SystemZ::LOC:
    case SystemZ::LOCFH:
    case SystemZ::LOCG: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 36;
      Value |= op;
      // op: M3
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 32;
      Value |= op;
      // op: BD2
      op = getBDAddr20Encoding(MI, 2, Fixups, STI);
      op &= UINT64_C(16777215);
      op <<= 8;
      Value |= op;
      break;
    }
    case SystemZ::CGRBAsmE:
    case SystemZ::CGRBAsmH:
    case SystemZ::CGRBAsmHE:
    case SystemZ::CGRBAsmL:
    case SystemZ::CGRBAsmLE:
    case SystemZ::CGRBAsmLH:
    case SystemZ::CGRBAsmNE:
    case SystemZ::CGRBAsmNH:
    case SystemZ::CGRBAsmNHE:
    case SystemZ::CGRBAsmNL:
    case SystemZ::CGRBAsmNLE:
    case SystemZ::CGRBAsmNLH:
    case SystemZ::CLGRBAsmE:
    case SystemZ::CLGRBAsmH:
    case SystemZ::CLGRBAsmHE:
    case SystemZ::CLGRBAsmL:
    case SystemZ::CLGRBAsmLE:
    case SystemZ::CLGRBAsmLH:
    case SystemZ::CLGRBAsmNE:
    case SystemZ::CLGRBAsmNH:
    case SystemZ::CLGRBAsmNHE:
    case SystemZ::CLGRBAsmNL:
    case SystemZ::CLGRBAsmNLE:
    case SystemZ::CLGRBAsmNLH:
    case SystemZ::CLRBAsmE:
    case SystemZ::CLRBAsmH:
    case SystemZ::CLRBAsmHE:
    case SystemZ::CLRBAsmL:
    case SystemZ::CLRBAsmLE:
    case SystemZ::CLRBAsmLH:
    case SystemZ::CLRBAsmNE:
    case SystemZ::CLRBAsmNH:
    case SystemZ::CLRBAsmNHE:
    case SystemZ::CLRBAsmNL:
    case SystemZ::CLRBAsmNLE:
    case SystemZ::CLRBAsmNLH:
    case SystemZ::CRBAsmE:
    case SystemZ::CRBAsmH:
    case SystemZ::CRBAsmHE:
    case SystemZ::CRBAsmL:
    case SystemZ::CRBAsmLE:
    case SystemZ::CRBAsmLH:
    case SystemZ::CRBAsmNE:
    case SystemZ::CRBAsmNH:
    case SystemZ::CRBAsmNHE:
    case SystemZ::CRBAsmNL:
    case SystemZ::CRBAsmNLE:
    case SystemZ::CRBAsmNLH: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 36;
      Value |= op;
      // op: R2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 32;
      Value |= op;
      // op: BD4
      op = getBDAddr12Encoding(MI, 2, Fixups, STI);
      op &= UINT64_C(65535);
      op <<= 16;
      Value |= op;
      break;
    }
    case SystemZ::CGRB:
    case SystemZ::CGRBAsm:
    case SystemZ::CLGRB:
    case SystemZ::CLGRBAsm:
    case SystemZ::CLRB:
    case SystemZ::CLRBAsm:
    case SystemZ::CRB:
    case SystemZ::CRBAsm: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 36;
      Value |= op;
      // op: R2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 32;
      Value |= op;
      // op: M3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 12;
      Value |= op;
      // op: BD4
      op = getBDAddr12Encoding(MI, 3, Fixups, STI);
      op &= UINT64_C(65535);
      op <<= 16;
      Value |= op;
      break;
    }
    case SystemZ::CGRJ:
    case SystemZ::CGRJAsm:
    case SystemZ::CLGRJ:
    case SystemZ::CLGRJAsm:
    case SystemZ::CLRJ:
    case SystemZ::CLRJAsm:
    case SystemZ::CRJ:
    case SystemZ::CRJAsm: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 36;
      Value |= op;
      // op: R2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 32;
      Value |= op;
      // op: M3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 12;
      Value |= op;
      // op: RI4
      op = getPC16DBLEncoding(MI, 3, Fixups, STI);
      op &= UINT64_C(65535);
      op <<= 16;
      Value |= op;
      break;
    }
    case SystemZ::CGRJAsmE:
    case SystemZ::CGRJAsmH:
    case SystemZ::CGRJAsmHE:
    case SystemZ::CGRJAsmL:
    case SystemZ::CGRJAsmLE:
    case SystemZ::CGRJAsmLH:
    case SystemZ::CGRJAsmNE:
    case SystemZ::CGRJAsmNH:
    case SystemZ::CGRJAsmNHE:
    case SystemZ::CGRJAsmNL:
    case SystemZ::CGRJAsmNLE:
    case SystemZ::CGRJAsmNLH:
    case SystemZ::CLGRJAsmE:
    case SystemZ::CLGRJAsmH:
    case SystemZ::CLGRJAsmHE:
    case SystemZ::CLGRJAsmL:
    case SystemZ::CLGRJAsmLE:
    case SystemZ::CLGRJAsmLH:
    case SystemZ::CLGRJAsmNE:
    case SystemZ::CLGRJAsmNH:
    case SystemZ::CLGRJAsmNHE:
    case SystemZ::CLGRJAsmNL:
    case SystemZ::CLGRJAsmNLE:
    case SystemZ::CLGRJAsmNLH:
    case SystemZ::CLRJAsmE:
    case SystemZ::CLRJAsmH:
    case SystemZ::CLRJAsmHE:
    case SystemZ::CLRJAsmL:
    case SystemZ::CLRJAsmLE:
    case SystemZ::CLRJAsmLH:
    case SystemZ::CLRJAsmNE:
    case SystemZ::CLRJAsmNH:
    case SystemZ::CLRJAsmNHE:
    case SystemZ::CLRJAsmNL:
    case SystemZ::CLRJAsmNLE:
    case SystemZ::CLRJAsmNLH:
    case SystemZ::CRJAsmE:
    case SystemZ::CRJAsmH:
    case SystemZ::CRJAsmHE:
    case SystemZ::CRJAsmL:
    case SystemZ::CRJAsmLE:
    case SystemZ::CRJAsmLH:
    case SystemZ::CRJAsmNE:
    case SystemZ::CRJAsmNH:
    case SystemZ::CRJAsmNHE:
    case SystemZ::CRJAsmNL:
    case SystemZ::CRJAsmNLE:
    case SystemZ::CRJAsmNLH: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 36;
      Value |= op;
      // op: R2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 32;
      Value |= op;
      // op: RI4
      op = getPC16DBLEncoding(MI, 2, Fixups, STI);
      op &= UINT64_C(65535);
      op <<= 16;
      Value |= op;
      break;
    }
    case SystemZ::RISBG:
    case SystemZ::RISBG32:
    case SystemZ::RISBGN:
    case SystemZ::RISBHG:
    case SystemZ::RISBLG:
    case SystemZ::RNSBG:
    case SystemZ::ROSBG:
    case SystemZ::RXSBG: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 36;
      Value |= op;
      // op: R2
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 32;
      Value |= op;
      // op: I3
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      op &= UINT64_C(255);
      op <<= 24;
      Value |= op;
      // op: I4
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      op &= UINT64_C(255);
      op <<= 16;
      Value |= op;
      // op: I5
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups, STI);
      op &= UINT64_C(255);
      op <<= 8;
      Value |= op;
      break;
    }
    case SystemZ::ECAG:
    case SystemZ::LAA:
    case SystemZ::LAAG:
    case SystemZ::LAAL:
    case SystemZ::LAALG:
    case SystemZ::LAMY:
    case SystemZ::LAN:
    case SystemZ::LANG:
    case SystemZ::LAO:
    case SystemZ::LAOG:
    case SystemZ::LAX:
    case SystemZ::LAXG:
    case SystemZ::LCTLG:
    case SystemZ::LMG:
    case SystemZ::LMH:
    case SystemZ::LMY:
    case SystemZ::RLL:
    case SystemZ::RLLG:
    case SystemZ::SLAG:
    case SystemZ::SLAK:
    case SystemZ::SLLG:
    case SystemZ::SLLK:
    case SystemZ::SRAG:
    case SystemZ::SRAK:
    case SystemZ::SRLG:
    case SystemZ::SRLK:
    case SystemZ::STAMY:
    case SystemZ::STCTG:
    case SystemZ::STMG:
    case SystemZ::STMH:
    case SystemZ::STMY:
    case SystemZ::TRACG: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 36;
      Value |= op;
      // op: R3
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 32;
      Value |= op;
      // op: BD2
      op = getBDAddr20Encoding(MI, 2, Fixups, STI);
      op &= UINT64_C(16777215);
      op <<= 8;
      Value |= op;
      break;
    }
    case SystemZ::CLCLU:
    case SystemZ::MVCLU: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 36;
      Value |= op;
      // op: R3
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 32;
      Value |= op;
      // op: BD2
      op = getBDAddr20Encoding(MI, 4, Fixups, STI);
      op &= UINT64_C(16777215);
      op <<= 8;
      Value |= op;
      break;
    }
    case SystemZ::AGHIK:
    case SystemZ::AHIK:
    case SystemZ::ALGHSIK:
    case SystemZ::ALHSIK: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 36;
      Value |= op;
      // op: R3
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 32;
      Value |= op;
      // op: I2
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      op &= UINT64_C(65535);
      op <<= 16;
      Value |= op;
      break;
    }
    case SystemZ::BXHG:
    case SystemZ::BXLEG:
    case SystemZ::CDSG:
    case SystemZ::CDSY:
    case SystemZ::CSG:
    case SystemZ::CSY: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 36;
      Value |= op;
      // op: R3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 32;
      Value |= op;
      // op: BD2
      op = getBDAddr20Encoding(MI, 3, Fixups, STI);
      op &= UINT64_C(16777215);
      op <<= 8;
      Value |= op;
      break;
    }
    case SystemZ::BRXHG:
    case SystemZ::BRXLG: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 36;
      Value |= op;
      // op: R3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 32;
      Value |= op;
      // op: RI2
      op = getPC16DBLEncoding(MI, 3, Fixups, STI);
      op &= UINT64_C(65535);
      op <<= 16;
      Value |= op;
      break;
    }
    case SystemZ::CGFRL:
    case SystemZ::CGHRL:
    case SystemZ::CGRL:
    case SystemZ::CHRL:
    case SystemZ::CLGFRL:
    case SystemZ::CLGHRL:
    case SystemZ::CLGRL:
    case SystemZ::CLHRL:
    case SystemZ::CLRL:
    case SystemZ::CRL:
    case SystemZ::EXRL:
    case SystemZ::LARL:
    case SystemZ::LGFRL:
    case SystemZ::LGHRL:
    case SystemZ::LGRL:
    case SystemZ::LHRL:
    case SystemZ::LLGFRL:
    case SystemZ::LLGHRL:
    case SystemZ::LLHRL:
    case SystemZ::LRL:
    case SystemZ::STGRL:
    case SystemZ::STHRL:
    case SystemZ::STRL: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 36;
      Value |= op;
      // op: RI2
      op = getPC32DBLEncoding(MI, 1, Fixups, STI);
      op &= UINT64_C(4294967295);
      Value |= op;
      break;
    }
    case SystemZ::BRCTH: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 36;
      Value |= op;
      // op: RI2
      op = getPC32DBLEncoding(MI, 2, Fixups, STI);
      op &= UINT64_C(4294967295);
      Value |= op;
      break;
    }
    case SystemZ::BRASL: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 36;
      Value |= op;
      // op: RI2
      op = getPC32DBLTLSEncoding(MI, 1, Fixups, STI);
      op &= UINT64_C(4294967295);
      Value |= op;
      break;
    }
    case SystemZ::VCVB:
    case SystemZ::VCVBG: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 36;
      Value |= op;
      // op: V2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      Value |= (op & UINT64_C(16)) << 6;
      // op: M3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 20;
      Value |= op;
      break;
    }
    case SystemZ::VCVBGOpt:
    case SystemZ::VCVBOpt: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 36;
      Value |= op;
      // op: V2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      Value |= (op & UINT64_C(16)) << 6;
      // op: M3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 20;
      Value |= op;
      // op: M4
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 16;
      Value |= op;
      break;
    }
    case SystemZ::CDB:
    case SystemZ::CEB:
    case SystemZ::KDB:
    case SystemZ::KEB:
    case SystemZ::LDE:
    case SystemZ::LDE32:
    case SystemZ::LDEB:
    case SystemZ::LXD:
    case SystemZ::LXDB:
    case SystemZ::LXE:
    case SystemZ::LXEB:
    case SystemZ::SQD:
    case SystemZ::SQDB:
    case SystemZ::SQE:
    case SystemZ::SQEB:
    case SystemZ::TCDB:
    case SystemZ::TCEB:
    case SystemZ::TCXB:
    case SystemZ::TDCDT:
    case SystemZ::TDCET:
    case SystemZ::TDCXT:
    case SystemZ::TDGDT:
    case SystemZ::TDGET:
    case SystemZ::TDGXT: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 36;
      Value |= op;
      // op: XBD2
      op = getBDXAddr12Encoding(MI, 1, Fixups, STI);
      op &= UINT64_C(1048575);
      op <<= 16;
      Value |= op;
      break;
    }
    case SystemZ::LCBB: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 36;
      Value |= op;
      // op: XBD2
      op = getBDXAddr12Encoding(MI, 1, Fixups, STI);
      op &= UINT64_C(1048575);
      op <<= 16;
      Value |= op;
      // op: M3
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 12;
      Value |= op;
      break;
    }
    case SystemZ::ADB:
    case SystemZ::AEB:
    case SystemZ::DDB:
    case SystemZ::DEB:
    case SystemZ::MDB:
    case SystemZ::MDEB:
    case SystemZ::MEE:
    case SystemZ::MEEB:
    case SystemZ::MXDB:
    case SystemZ::SDB:
    case SystemZ::SEB: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 36;
      Value |= op;
      // op: XBD2
      op = getBDXAddr12Encoding(MI, 2, Fixups, STI);
      op &= UINT64_C(1048575);
      op <<= 16;
      Value |= op;
      break;
    }
    case SystemZ::CG:
    case SystemZ::CGF:
    case SystemZ::CGH:
    case SystemZ::CHF:
    case SystemZ::CHY:
    case SystemZ::CLG:
    case SystemZ::CLGF:
    case SystemZ::CLHF:
    case SystemZ::CLY:
    case SystemZ::CVDG:
    case SystemZ::CVDY:
    case SystemZ::CY:
    case SystemZ::LAEY:
    case SystemZ::LAT:
    case SystemZ::LAY:
    case SystemZ::LB:
    case SystemZ::LBH:
    case SystemZ::LDY:
    case SystemZ::LEY:
    case SystemZ::LFH:
    case SystemZ::LFHAT:
    case SystemZ::LG:
    case SystemZ::LGAT:
    case SystemZ::LGB:
    case SystemZ::LGF:
    case SystemZ::LGG:
    case SystemZ::LGH:
    case SystemZ::LGSC:
    case SystemZ::LHH:
    case SystemZ::LHY:
    case SystemZ::LLC:
    case SystemZ::LLCH:
    case SystemZ::LLGC:
    case SystemZ::LLGF:
    case SystemZ::LLGFAT:
    case SystemZ::LLGFSG:
    case SystemZ::LLGH:
    case SystemZ::LLGT:
    case SystemZ::LLGTAT:
    case SystemZ::LLH:
    case SystemZ::LLHH:
    case SystemZ::LLZRGF:
    case SystemZ::LPQ:
    case SystemZ::LRAG:
    case SystemZ::LRAY:
    case SystemZ::LRV:
    case SystemZ::LRVG:
    case SystemZ::LRVH:
    case SystemZ::LT:
    case SystemZ::LTG:
    case SystemZ::LTGF:
    case SystemZ::LY:
    case SystemZ::LZRF:
    case SystemZ::LZRG:
    case SystemZ::NTSTG:
    case SystemZ::STCH:
    case SystemZ::STCY:
    case SystemZ::STDY:
    case SystemZ::STEY:
    case SystemZ::STFH:
    case SystemZ::STG:
    case SystemZ::STGSC:
    case SystemZ::STHH:
    case SystemZ::STHY:
    case SystemZ::STPQ:
    case SystemZ::STRV:
    case SystemZ::STRVG:
    case SystemZ::STRVH:
    case SystemZ::STY: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 36;
      Value |= op;
      // op: XBD2
      op = getBDXAddr20Encoding(MI, 1, Fixups, STI);
      op &= UINT64_C(268435455);
      op <<= 8;
      Value |= op;
      break;
    }
    case SystemZ::AG:
    case SystemZ::AGF:
    case SystemZ::AGH:
    case SystemZ::AHY:
    case SystemZ::ALC:
    case SystemZ::ALCG:
    case SystemZ::ALG:
    case SystemZ::ALGF:
    case SystemZ::ALY:
    case SystemZ::AY:
    case SystemZ::BCTG:
    case SystemZ::CVBG:
    case SystemZ::CVBY:
    case SystemZ::DL:
    case SystemZ::DLG:
    case SystemZ::DSG:
    case SystemZ::DSGF:
    case SystemZ::IC32Y:
    case SystemZ::ICY:
    case SystemZ::MFY:
    case SystemZ::MG:
    case SystemZ::MGH:
    case SystemZ::MHY:
    case SystemZ::ML:
    case SystemZ::MLG:
    case SystemZ::MSC:
    case SystemZ::MSG:
    case SystemZ::MSGC:
    case SystemZ::MSGF:
    case SystemZ::MSY:
    case SystemZ::NG:
    case SystemZ::NY:
    case SystemZ::OG:
    case SystemZ::OY:
    case SystemZ::SG:
    case SystemZ::SGF:
    case SystemZ::SGH:
    case SystemZ::SHY:
    case SystemZ::SLB:
    case SystemZ::SLBG:
    case SystemZ::SLG:
    case SystemZ::SLGF:
    case SystemZ::SLY:
    case SystemZ::SY:
    case SystemZ::XG:
    case SystemZ::XY: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 36;
      Value |= op;
      // op: XBD2
      op = getBDXAddr20Encoding(MI, 2, Fixups, STI);
      op &= UINT64_C(268435455);
      op <<= 8;
      Value |= op;
      break;
    }
    case SystemZ::EFPC:
    case SystemZ::EPAIR:
    case SystemZ::EPAR:
    case SystemZ::ESAIR:
    case SystemZ::ESAR:
    case SystemZ::ESEA:
    case SystemZ::ETND:
    case SystemZ::IAC:
    case SystemZ::IPM:
    case SystemZ::LZDR:
    case SystemZ::LZER:
    case SystemZ::LZXR:
    case SystemZ::MSTA:
    case SystemZ::PTF:
    case SystemZ::SFASR:
    case SystemZ::SFPC:
    case SystemZ::SPM:
    case SystemZ::SSAIR:
    case SystemZ::SSAR: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 4;
      Value |= op;
      break;
    }
    case SystemZ::BAKR:
    case SystemZ::BALR:
    case SystemZ::BASR:
    case SystemZ::BASSM:
    case SystemZ::BCRAsm:
    case SystemZ::BSA:
    case SystemZ::BSG:
    case SystemZ::BSM:
    case SystemZ::CDBR:
    case SystemZ::CDFBR:
    case SystemZ::CDFR:
    case SystemZ::CDGBR:
    case SystemZ::CDGR:
    case SystemZ::CDGTR:
    case SystemZ::CDR:
    case SystemZ::CDSTR:
    case SystemZ::CDTR:
    case SystemZ::CDUTR:
    case SystemZ::CEBR:
    case SystemZ::CEDTR:
    case SystemZ::CEFBR:
    case SystemZ::CEFR:
    case SystemZ::CEGBR:
    case SystemZ::CEGR:
    case SystemZ::CER:
    case SystemZ::CEXTR:
    case SystemZ::CGFR:
    case SystemZ::CGR:
    case SystemZ::CGRTAsmE:
    case SystemZ::CGRTAsmH:
    case SystemZ::CGRTAsmHE:
    case SystemZ::CGRTAsmL:
    case SystemZ::CGRTAsmLE:
    case SystemZ::CGRTAsmLH:
    case SystemZ::CGRTAsmNE:
    case SystemZ::CGRTAsmNH:
    case SystemZ::CGRTAsmNHE:
    case SystemZ::CGRTAsmNL:
    case SystemZ::CGRTAsmNLE:
    case SystemZ::CGRTAsmNLH:
    case SystemZ::CHHR:
    case SystemZ::CHLR:
    case SystemZ::CKSM:
    case SystemZ::CLCL:
    case SystemZ::CLGFR:
    case SystemZ::CLGR:
    case SystemZ::CLGRTAsmE:
    case SystemZ::CLGRTAsmH:
    case SystemZ::CLGRTAsmHE:
    case SystemZ::CLGRTAsmL:
    case SystemZ::CLGRTAsmLE:
    case SystemZ::CLGRTAsmLH:
    case SystemZ::CLGRTAsmNE:
    case SystemZ::CLGRTAsmNH:
    case SystemZ::CLGRTAsmNHE:
    case SystemZ::CLGRTAsmNL:
    case SystemZ::CLGRTAsmNLE:
    case SystemZ::CLGRTAsmNLH:
    case SystemZ::CLHHR:
    case SystemZ::CLHLR:
    case SystemZ::CLR:
    case SystemZ::CLRTAsmE:
    case SystemZ::CLRTAsmH:
    case SystemZ::CLRTAsmHE:
    case SystemZ::CLRTAsmL:
    case SystemZ::CLRTAsmLE:
    case SystemZ::CLRTAsmLH:
    case SystemZ::CLRTAsmNE:
    case SystemZ::CLRTAsmNH:
    case SystemZ::CLRTAsmNHE:
    case SystemZ::CLRTAsmNL:
    case SystemZ::CLRTAsmNLE:
    case SystemZ::CLRTAsmNLH:
    case SystemZ::CLST:
    case SystemZ::CMPSC:
    case SystemZ::CPYA:
    case SystemZ::CR:
    case SystemZ::CRTAsmE:
    case SystemZ::CRTAsmH:
    case SystemZ::CRTAsmHE:
    case SystemZ::CRTAsmL:
    case SystemZ::CRTAsmLE:
    case SystemZ::CRTAsmLH:
    case SystemZ::CRTAsmNE:
    case SystemZ::CRTAsmNH:
    case SystemZ::CRTAsmNHE:
    case SystemZ::CRTAsmNL:
    case SystemZ::CRTAsmNLE:
    case SystemZ::CRTAsmNLH:
    case SystemZ::CU12Opt:
    case SystemZ::CU14Opt:
    case SystemZ::CU21Opt:
    case SystemZ::CU24Opt:
    case SystemZ::CU41:
    case SystemZ::CU42:
    case SystemZ::CUDTR:
    case SystemZ::CUSE:
    case SystemZ::CUTFUOpt:
    case SystemZ::CUUTFOpt:
    case SystemZ::CUXTR:
    case SystemZ::CXBR:
    case SystemZ::CXFBR:
    case SystemZ::CXFR:
    case SystemZ::CXGBR:
    case SystemZ::CXGR:
    case SystemZ::CXGTR:
    case SystemZ::CXR:
    case SystemZ::CXSTR:
    case SystemZ::CXTR:
    case SystemZ::CXUTR:
    case SystemZ::EAR:
    case SystemZ::ECCTR:
    case SystemZ::ECPGA:
    case SystemZ::EEDTR:
    case SystemZ::EEXTR:
    case SystemZ::EPCTR:
    case SystemZ::EPSW:
    case SystemZ::EREG:
    case SystemZ::EREGG:
    case SystemZ::ESDTR:
    case SystemZ::ESTA:
    case SystemZ::ESXTR:
    case SystemZ::FIDR:
    case SystemZ::FIER:
    case SystemZ::FIXR:
    case SystemZ::FLOGR:
    case SystemZ::HDR:
    case SystemZ::HER:
    case SystemZ::IPTEOptOpt:
    case SystemZ::IRBM:
    case SystemZ::KDBR:
    case SystemZ::KDTR:
    case SystemZ::KEBR:
    case SystemZ::KM:
    case SystemZ::KMC:
    case SystemZ::KMF:
    case SystemZ::KMO:
    case SystemZ::KXBR:
    case SystemZ::KXTR:
    case SystemZ::LBR:
    case SystemZ::LCDBR:
    case SystemZ::LCDFR:
    case SystemZ::LCDFR_32:
    case SystemZ::LCDR:
    case SystemZ::LCEBR:
    case SystemZ::LCER:
    case SystemZ::LCGFR:
    case SystemZ::LCGR:
    case SystemZ::LCR:
    case SystemZ::LCXBR:
    case SystemZ::LCXR:
    case SystemZ::LDEBR:
    case SystemZ::LDER:
    case SystemZ::LDGR:
    case SystemZ::LDR:
    case SystemZ::LDR32:
    case SystemZ::LDXBR:
    case SystemZ::LDXR:
    case SystemZ::LEDBR:
    case SystemZ::LEDR:
    case SystemZ::LER:
    case SystemZ::LEXBR:
    case SystemZ::LEXR:
    case SystemZ::LGBR:
    case SystemZ::LGDR:
    case SystemZ::LGFR:
    case SystemZ::LGHR:
    case SystemZ::LGR:
    case SystemZ::LHR:
    case SystemZ::LLCR:
    case SystemZ::LLGCR:
    case SystemZ::LLGFR:
    case SystemZ::LLGHR:
    case SystemZ::LLGTR:
    case SystemZ::LLHR:
    case SystemZ::LNDBR:
    case SystemZ::LNDFR:
    case SystemZ::LNDFR_32:
    case SystemZ::LNDR:
    case SystemZ::LNEBR:
    case SystemZ::LNER:
    case SystemZ::LNGFR:
    case SystemZ::LNGR:
    case SystemZ::LNR:
    case SystemZ::LNXBR:
    case SystemZ::LNXR:
    case SystemZ::LPDBR:
    case SystemZ::LPDFR:
    case SystemZ::LPDFR_32:
    case SystemZ::LPDR:
    case SystemZ::LPEBR:
    case SystemZ::LPER:
    case SystemZ::LPGFR:
    case SystemZ::LPGR:
    case SystemZ::LPR:
    case SystemZ::LPXBR:
    case SystemZ::LPXR:
    case SystemZ::LR:
    case SystemZ::LRDR:
    case SystemZ::LRER:
    case SystemZ::LRVGR:
    case SystemZ::LRVR:
    case SystemZ::LTDBR:
    case SystemZ::LTDBRCompare:
    case SystemZ::LTDR:
    case SystemZ::LTDTR:
    case SystemZ::LTEBR:
    case SystemZ::LTEBRCompare:
    case SystemZ::LTER:
    case SystemZ::LTGFR:
    case SystemZ::LTGR:
    case SystemZ::LTR:
    case SystemZ::LTXBR:
    case SystemZ::LTXBRCompare:
    case SystemZ::LTXR:
    case SystemZ::LTXTR:
    case SystemZ::LURA:
    case SystemZ::LURAG:
    case SystemZ::LXDBR:
    case SystemZ::LXDR:
    case SystemZ::LXEBR:
    case SystemZ::LXER:
    case SystemZ::LXR:
    case SystemZ::MVCL:
    case SystemZ::MVPG:
    case SystemZ::MVST:
    case SystemZ::PGIN:
    case SystemZ::PGOUT:
    case SystemZ::POPCNT:
    case SystemZ::PPNO:
    case SystemZ::PRNO:
    case SystemZ::PT:
    case SystemZ::PTI:
    case SystemZ::RRBE:
    case SystemZ::RRBM:
    case SystemZ::SAR:
    case SystemZ::SCCTR:
    case SystemZ::SORTL:
    case SystemZ::SPCTR:
    case SystemZ::SQDBR:
    case SystemZ::SQDR:
    case SystemZ::SQEBR:
    case SystemZ::SQER:
    case SystemZ::SQXBR:
    case SystemZ::SQXR:
    case SystemZ::SRST:
    case SystemZ::SRSTU:
    case SystemZ::SSKEOpt:
    case SystemZ::STURA:
    case SystemZ::STURG:
    case SystemZ::TAR:
    case SystemZ::TB:
    case SystemZ::THDER:
    case SystemZ::THDR:
    case SystemZ::TRE:
    case SystemZ::TROOOpt:
    case SystemZ::TROTOpt:
    case SystemZ::TRTOOpt:
    case SystemZ::TRTTOpt: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 4;
      Value |= op;
      // op: R2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      op &= UINT64_C(15);
      Value |= op;
      break;
    }
    case SystemZ::CGRT:
    case SystemZ::CGRTAsm:
    case SystemZ::CLGRT:
    case SystemZ::CLGRTAsm:
    case SystemZ::CLRT:
    case SystemZ::CLRTAsm:
    case SystemZ::CRT:
    case SystemZ::CRTAsm:
    case SystemZ::POPCNTOpt:
    case SystemZ::PPA:
    case SystemZ::SSKE: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 4;
      Value |= op;
      // op: R2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      op &= UINT64_C(15);
      Value |= op;
      // op: M3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 12;
      Value |= op;
      break;
    }
    case SystemZ::CU12:
    case SystemZ::CU14:
    case SystemZ::CU21:
    case SystemZ::CU24:
    case SystemZ::CUTFU:
    case SystemZ::CUUTF:
    case SystemZ::TROO:
    case SystemZ::TROT:
    case SystemZ::TRTO:
    case SystemZ::TRTT: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 4;
      Value |= op;
      // op: R2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      op &= UINT64_C(15);
      Value |= op;
      // op: M3
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 12;
      Value |= op;
      break;
    }
    case SystemZ::CSDTR:
    case SystemZ::CSXTR:
    case SystemZ::LDETR:
    case SystemZ::LXDTR: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 4;
      Value |= op;
      // op: R2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      op &= UINT64_C(15);
      Value |= op;
      // op: M4
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 8;
      Value |= op;
      break;
    }
    case SystemZ::ADTR:
    case SystemZ::AGRK:
    case SystemZ::AHHHR:
    case SystemZ::AHHLR:
    case SystemZ::ALGRK:
    case SystemZ::ALHHHR:
    case SystemZ::ALHHLR:
    case SystemZ::ALRK:
    case SystemZ::ARK:
    case SystemZ::AXTR:
    case SystemZ::CPSDRdd:
    case SystemZ::CPSDRds:
    case SystemZ::CPSDRsd:
    case SystemZ::CPSDRss:
    case SystemZ::CRDTEOpt:
    case SystemZ::DDTR:
    case SystemZ::DXTR:
    case SystemZ::IDTEOpt:
    case SystemZ::IEDTR:
    case SystemZ::IEXTR:
    case SystemZ::IPTEOpt:
    case SystemZ::KMA:
    case SystemZ::KMCTR:
    case SystemZ::MDTR:
    case SystemZ::MGRK:
    case SystemZ::MSGRKC:
    case SystemZ::MSRKC:
    case SystemZ::MXTR:
    case SystemZ::NCGRK:
    case SystemZ::NCRK:
    case SystemZ::NGRK:
    case SystemZ::NNGRK:
    case SystemZ::NNRK:
    case SystemZ::NOGRK:
    case SystemZ::NORK:
    case SystemZ::NRK:
    case SystemZ::NXGRK:
    case SystemZ::NXRK:
    case SystemZ::OCGRK:
    case SystemZ::OCRK:
    case SystemZ::OGRK:
    case SystemZ::ORK:
    case SystemZ::SDTR:
    case SystemZ::SGRK:
    case SystemZ::SHHHR:
    case SystemZ::SHHLR:
    case SystemZ::SLGRK:
    case SystemZ::SLHHHR:
    case SystemZ::SLHHLR:
    case SystemZ::SLRK:
    case SystemZ::SRK:
    case SystemZ::SXTR:
    case SystemZ::XGRK:
    case SystemZ::XRK: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 4;
      Value |= op;
      // op: R2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      op &= UINT64_C(15);
      Value |= op;
      // op: R3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 12;
      Value |= op;
      break;
    }
    case SystemZ::ADTRA:
    case SystemZ::AXTRA:
    case SystemZ::CRDTE:
    case SystemZ::DDTRA:
    case SystemZ::DXTRA:
    case SystemZ::IDTE:
    case SystemZ::IPTE:
    case SystemZ::MDTRA:
    case SystemZ::MXTRA:
    case SystemZ::SDTRA:
    case SystemZ::SXTRA: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 4;
      Value |= op;
      // op: R2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      op &= UINT64_C(15);
      Value |= op;
      // op: R3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 12;
      Value |= op;
      // op: M4
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 8;
      Value |= op;
      break;
    }
    case SystemZ::DFLTCC: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 4;
      Value |= op;
      // op: R2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      op &= UINT64_C(15);
      Value |= op;
      // op: R3
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 12;
      Value |= op;
      break;
    }
    case SystemZ::ADBR:
    case SystemZ::ADR:
    case SystemZ::AEBR:
    case SystemZ::AER:
    case SystemZ::AGFR:
    case SystemZ::AGR:
    case SystemZ::ALCGR:
    case SystemZ::ALCR:
    case SystemZ::ALGFR:
    case SystemZ::ALGR:
    case SystemZ::ALR:
    case SystemZ::AR:
    case SystemZ::AUR:
    case SystemZ::AWR:
    case SystemZ::AXBR:
    case SystemZ::AXR:
    case SystemZ::BCTGR:
    case SystemZ::BCTR:
    case SystemZ::CSP:
    case SystemZ::CSPG:
    case SystemZ::DDBR:
    case SystemZ::DDR:
    case SystemZ::DEBR:
    case SystemZ::DER:
    case SystemZ::DLGR:
    case SystemZ::DLR:
    case SystemZ::DR:
    case SystemZ::DSGFR:
    case SystemZ::DSGR:
    case SystemZ::DXBR:
    case SystemZ::DXR:
    case SystemZ::ISKE:
    case SystemZ::IVSK:
    case SystemZ::LOCFHRAsmE:
    case SystemZ::LOCFHRAsmH:
    case SystemZ::LOCFHRAsmHE:
    case SystemZ::LOCFHRAsmL:
    case SystemZ::LOCFHRAsmLE:
    case SystemZ::LOCFHRAsmLH:
    case SystemZ::LOCFHRAsmM:
    case SystemZ::LOCFHRAsmNE:
    case SystemZ::LOCFHRAsmNH:
    case SystemZ::LOCFHRAsmNHE:
    case SystemZ::LOCFHRAsmNL:
    case SystemZ::LOCFHRAsmNLE:
    case SystemZ::LOCFHRAsmNLH:
    case SystemZ::LOCFHRAsmNM:
    case SystemZ::LOCFHRAsmNO:
    case SystemZ::LOCFHRAsmNP:
    case SystemZ::LOCFHRAsmNZ:
    case SystemZ::LOCFHRAsmO:
    case SystemZ::LOCFHRAsmP:
    case SystemZ::LOCFHRAsmZ:
    case SystemZ::LOCGRAsmE:
    case SystemZ::LOCGRAsmH:
    case SystemZ::LOCGRAsmHE:
    case SystemZ::LOCGRAsmL:
    case SystemZ::LOCGRAsmLE:
    case SystemZ::LOCGRAsmLH:
    case SystemZ::LOCGRAsmM:
    case SystemZ::LOCGRAsmNE:
    case SystemZ::LOCGRAsmNH:
    case SystemZ::LOCGRAsmNHE:
    case SystemZ::LOCGRAsmNL:
    case SystemZ::LOCGRAsmNLE:
    case SystemZ::LOCGRAsmNLH:
    case SystemZ::LOCGRAsmNM:
    case SystemZ::LOCGRAsmNO:
    case SystemZ::LOCGRAsmNP:
    case SystemZ::LOCGRAsmNZ:
    case SystemZ::LOCGRAsmO:
    case SystemZ::LOCGRAsmP:
    case SystemZ::LOCGRAsmZ:
    case SystemZ::LOCRAsmE:
    case SystemZ::LOCRAsmH:
    case SystemZ::LOCRAsmHE:
    case SystemZ::LOCRAsmL:
    case SystemZ::LOCRAsmLE:
    case SystemZ::LOCRAsmLH:
    case SystemZ::LOCRAsmM:
    case SystemZ::LOCRAsmNE:
    case SystemZ::LOCRAsmNH:
    case SystemZ::LOCRAsmNHE:
    case SystemZ::LOCRAsmNL:
    case SystemZ::LOCRAsmNLE:
    case SystemZ::LOCRAsmNLH:
    case SystemZ::LOCRAsmNM:
    case SystemZ::LOCRAsmNO:
    case SystemZ::LOCRAsmNP:
    case SystemZ::LOCRAsmNZ:
    case SystemZ::LOCRAsmO:
    case SystemZ::LOCRAsmP:
    case SystemZ::LOCRAsmZ:
    case SystemZ::MDBR:
    case SystemZ::MDEBR:
    case SystemZ::MDER:
    case SystemZ::MDR:
    case SystemZ::MEEBR:
    case SystemZ::MEER:
    case SystemZ::MER:
    case SystemZ::MLGR:
    case SystemZ::MLR:
    case SystemZ::MR:
    case SystemZ::MSGFR:
    case SystemZ::MSGR:
    case SystemZ::MSR:
    case SystemZ::MXBR:
    case SystemZ::MXDBR:
    case SystemZ::MXDR:
    case SystemZ::MXR:
    case SystemZ::NGR:
    case SystemZ::NR:
    case SystemZ::OGR:
    case SystemZ::OR:
    case SystemZ::SDBR:
    case SystemZ::SDR:
    case SystemZ::SEBR:
    case SystemZ::SER:
    case SystemZ::SGFR:
    case SystemZ::SGR:
    case SystemZ::SLBGR:
    case SystemZ::SLBR:
    case SystemZ::SLGFR:
    case SystemZ::SLGR:
    case SystemZ::SLR:
    case SystemZ::SR:
    case SystemZ::SUR:
    case SystemZ::SWR:
    case SystemZ::SXBR:
    case SystemZ::SXR:
    case SystemZ::XGR:
    case SystemZ::XR: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 4;
      Value |= op;
      // op: R2
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      op &= UINT64_C(15);
      Value |= op;
      break;
    }
    case SystemZ::CFDBR:
    case SystemZ::CFDR:
    case SystemZ::CFEBR:
    case SystemZ::CFER:
    case SystemZ::CFXBR:
    case SystemZ::CFXR:
    case SystemZ::CGDBR:
    case SystemZ::CGDR:
    case SystemZ::CGDTR:
    case SystemZ::CGEBR:
    case SystemZ::CGER:
    case SystemZ::CGXBR:
    case SystemZ::CGXR:
    case SystemZ::CGXTR:
    case SystemZ::FIDBR:
    case SystemZ::FIEBR:
    case SystemZ::FIXBR:
    case SystemZ::TBDR:
    case SystemZ::TBEDR: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 4;
      Value |= op;
      // op: R2
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      op &= UINT64_C(15);
      Value |= op;
      // op: M3
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 12;
      Value |= op;
      break;
    }
    case SystemZ::CDFBRA:
    case SystemZ::CDFTR:
    case SystemZ::CDGBRA:
    case SystemZ::CDGTRA:
    case SystemZ::CDLFBR:
    case SystemZ::CDLFTR:
    case SystemZ::CDLGBR:
    case SystemZ::CDLGTR:
    case SystemZ::CEFBRA:
    case SystemZ::CEGBRA:
    case SystemZ::CELFBR:
    case SystemZ::CELGBR:
    case SystemZ::CFDBRA:
    case SystemZ::CFDTR:
    case SystemZ::CFEBRA:
    case SystemZ::CFXBRA:
    case SystemZ::CFXTR:
    case SystemZ::CGDBRA:
    case SystemZ::CGDTRA:
    case SystemZ::CGEBRA:
    case SystemZ::CGXBRA:
    case SystemZ::CGXTRA:
    case SystemZ::CLFDBR:
    case SystemZ::CLFDTR:
    case SystemZ::CLFEBR:
    case SystemZ::CLFXBR:
    case SystemZ::CLFXTR:
    case SystemZ::CLGDBR:
    case SystemZ::CLGDTR:
    case SystemZ::CLGEBR:
    case SystemZ::CLGXBR:
    case SystemZ::CLGXTR:
    case SystemZ::CXFBRA:
    case SystemZ::CXFTR:
    case SystemZ::CXGBRA:
    case SystemZ::CXGTRA:
    case SystemZ::CXLFBR:
    case SystemZ::CXLFTR:
    case SystemZ::CXLGBR:
    case SystemZ::CXLGTR:
    case SystemZ::FIDBRA:
    case SystemZ::FIDTR:
    case SystemZ::FIEBRA:
    case SystemZ::FIXBRA:
    case SystemZ::FIXTR:
    case SystemZ::LDXBRA:
    case SystemZ::LDXTR:
    case SystemZ::LEDBRA:
    case SystemZ::LEDTR:
    case SystemZ::LEXBRA: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 4;
      Value |= op;
      // op: R2
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      op &= UINT64_C(15);
      Value |= op;
      // op: M3
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 12;
      Value |= op;
      // op: M4
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 8;
      Value |= op;
      break;
    }
    case SystemZ::LOCFHRAsm:
    case SystemZ::LOCGRAsm:
    case SystemZ::LOCRAsm: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 4;
      Value |= op;
      // op: R2
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      op &= UINT64_C(15);
      Value |= op;
      // op: M3
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 12;
      Value |= op;
      break;
    }
    case SystemZ::LOCFHR:
    case SystemZ::LOCGR:
    case SystemZ::LOCR: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 4;
      Value |= op;
      // op: R2
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      op &= UINT64_C(15);
      Value |= op;
      // op: M3
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 12;
      Value |= op;
      break;
    }
    case SystemZ::SELFHRAsmE:
    case SystemZ::SELFHRAsmH:
    case SystemZ::SELFHRAsmHE:
    case SystemZ::SELFHRAsmL:
    case SystemZ::SELFHRAsmLE:
    case SystemZ::SELFHRAsmLH:
    case SystemZ::SELFHRAsmM:
    case SystemZ::SELFHRAsmNE:
    case SystemZ::SELFHRAsmNH:
    case SystemZ::SELFHRAsmNHE:
    case SystemZ::SELFHRAsmNL:
    case SystemZ::SELFHRAsmNLE:
    case SystemZ::SELFHRAsmNLH:
    case SystemZ::SELFHRAsmNM:
    case SystemZ::SELFHRAsmNO:
    case SystemZ::SELFHRAsmNP:
    case SystemZ::SELFHRAsmNZ:
    case SystemZ::SELFHRAsmO:
    case SystemZ::SELFHRAsmP:
    case SystemZ::SELFHRAsmZ:
    case SystemZ::SELGRAsmE:
    case SystemZ::SELGRAsmH:
    case SystemZ::SELGRAsmHE:
    case SystemZ::SELGRAsmL:
    case SystemZ::SELGRAsmLE:
    case SystemZ::SELGRAsmLH:
    case SystemZ::SELGRAsmM:
    case SystemZ::SELGRAsmNE:
    case SystemZ::SELGRAsmNH:
    case SystemZ::SELGRAsmNHE:
    case SystemZ::SELGRAsmNL:
    case SystemZ::SELGRAsmNLE:
    case SystemZ::SELGRAsmNLH:
    case SystemZ::SELGRAsmNM:
    case SystemZ::SELGRAsmNO:
    case SystemZ::SELGRAsmNP:
    case SystemZ::SELGRAsmNZ:
    case SystemZ::SELGRAsmO:
    case SystemZ::SELGRAsmP:
    case SystemZ::SELGRAsmZ:
    case SystemZ::SELRAsmE:
    case SystemZ::SELRAsmH:
    case SystemZ::SELRAsmHE:
    case SystemZ::SELRAsmL:
    case SystemZ::SELRAsmLE:
    case SystemZ::SELRAsmLH:
    case SystemZ::SELRAsmM:
    case SystemZ::SELRAsmNE:
    case SystemZ::SELRAsmNH:
    case SystemZ::SELRAsmNHE:
    case SystemZ::SELRAsmNL:
    case SystemZ::SELRAsmNLE:
    case SystemZ::SELRAsmNLH:
    case SystemZ::SELRAsmNM:
    case SystemZ::SELRAsmNO:
    case SystemZ::SELRAsmNP:
    case SystemZ::SELRAsmNZ:
    case SystemZ::SELRAsmO:
    case SystemZ::SELRAsmP:
    case SystemZ::SELRAsmZ: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 4;
      Value |= op;
      // op: R2
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      op &= UINT64_C(15);
      Value |= op;
      // op: R3
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 12;
      Value |= op;
      break;
    }
    case SystemZ::SELFHRAsm:
    case SystemZ::SELGRAsm:
    case SystemZ::SELRAsm: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 4;
      Value |= op;
      // op: R2
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      op &= UINT64_C(15);
      Value |= op;
      // op: R3
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 12;
      Value |= op;
      // op: M4
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 8;
      Value |= op;
      break;
    }
    case SystemZ::SELFHR:
    case SystemZ::SELGR:
    case SystemZ::SELR: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 4;
      Value |= op;
      // op: R2
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      op &= UINT64_C(15);
      Value |= op;
      // op: R3
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 12;
      Value |= op;
      // op: M4
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 8;
      Value |= op;
      break;
    }
    case SystemZ::DIDBR:
    case SystemZ::DIEBR:
    case SystemZ::LPTEA:
    case SystemZ::QADTR:
    case SystemZ::QAXTR:
    case SystemZ::RRDTR:
    case SystemZ::RRXTR: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 4;
      Value |= op;
      // op: R2
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      op &= UINT64_C(15);
      Value |= op;
      // op: R3
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 12;
      Value |= op;
      // op: M4
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 8;
      Value |= op;
      break;
    }
    case SystemZ::InsnRXF: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 12;
      Value |= op;
      // op: R3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 36;
      Value |= op;
      // op: XBD2
      op = getBDXAddr12Encoding(MI, 3, Fixups, STI);
      op &= UINT64_C(1048575);
      op <<= 16;
      Value |= op;
      // op: enc
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(280375465082880));
      Value |= (op & UINT64_C(255));
      break;
    }
    case SystemZ::InsnRI: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 20;
      Value |= op;
      // op: I2
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      op &= UINT64_C(65535);
      Value |= op;
      // op: enc
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(4278190080));
      Value |= (op & UINT64_C(983040));
      break;
    }
    case SystemZ::InsnRS: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 20;
      Value |= op;
      // op: R3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 16;
      Value |= op;
      // op: BD2
      op = getBDAddr12Encoding(MI, 3, Fixups, STI);
      op &= UINT64_C(65535);
      Value |= op;
      // op: enc
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(4278190080);
      Value |= op;
      break;
    }
    case SystemZ::InsnRSI: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 20;
      Value |= op;
      // op: R3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 16;
      Value |= op;
      // op: RI2
      op = getPC16DBLEncoding(MI, 3, Fixups, STI);
      op &= UINT64_C(65535);
      Value |= op;
      // op: enc
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(4278190080);
      Value |= op;
      break;
    }
    case SystemZ::InsnRX: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 20;
      Value |= op;
      // op: XBD2
      op = getBDXAddr12Encoding(MI, 2, Fixups, STI);
      op &= UINT64_C(1048575);
      Value |= op;
      // op: enc
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(4278190080);
      Value |= op;
      break;
    }
    case SystemZ::InsnRIS: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 36;
      Value |= op;
      // op: I2
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      op &= UINT64_C(255);
      op <<= 8;
      Value |= op;
      // op: M3
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 32;
      Value |= op;
      // op: BD4
      op = getBDAddr12Encoding(MI, 4, Fixups, STI);
      op &= UINT64_C(65535);
      op <<= 16;
      Value |= op;
      // op: enc
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(280375465082880));
      Value |= (op & UINT64_C(255));
      break;
    }
    case SystemZ::InsnRILU: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 36;
      Value |= op;
      // op: I2
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      op &= UINT64_C(4294967295);
      Value |= op;
      // op: enc
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(280375465082880));
      Value |= (op & UINT64_C(64424509440));
      break;
    }
    case SystemZ::InsnRIL: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 36;
      Value |= op;
      // op: I2
      op = getPC32DBLEncoding(MI, 2, Fixups, STI);
      op &= UINT64_C(4294967295);
      Value |= op;
      // op: enc
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(280375465082880));
      Value |= (op & UINT64_C(64424509440));
      break;
    }
    case SystemZ::InsnRRS: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 36;
      Value |= op;
      // op: R2
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 32;
      Value |= op;
      // op: M3
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 12;
      Value |= op;
      // op: BD4
      op = getBDAddr12Encoding(MI, 4, Fixups, STI);
      op &= UINT64_C(65535);
      op <<= 16;
      Value |= op;
      // op: enc
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(280375465082880));
      Value |= (op & UINT64_C(255));
      break;
    }
    case SystemZ::InsnRSE: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 36;
      Value |= op;
      // op: R3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 32;
      Value |= op;
      // op: BD2
      op = getBDAddr12Encoding(MI, 3, Fixups, STI);
      op &= UINT64_C(65535);
      op <<= 16;
      Value |= op;
      // op: enc
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(280375465082880));
      Value |= (op & UINT64_C(255));
      break;
    }
    case SystemZ::InsnRSY: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 36;
      Value |= op;
      // op: R3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 32;
      Value |= op;
      // op: BD2
      op = getBDAddr20Encoding(MI, 3, Fixups, STI);
      op &= UINT64_C(16777215);
      op <<= 8;
      Value |= op;
      // op: enc
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(280375465082880));
      Value |= (op & UINT64_C(255));
      break;
    }
    case SystemZ::InsnRIE: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 36;
      Value |= op;
      // op: R3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 32;
      Value |= op;
      // op: I2
      op = getPC16DBLEncoding(MI, 3, Fixups, STI);
      op &= UINT64_C(65535);
      op <<= 16;
      Value |= op;
      // op: enc
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(280375465082880));
      Value |= (op & UINT64_C(255));
      break;
    }
    case SystemZ::InsnRXE: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 36;
      Value |= op;
      // op: XBD2
      op = getBDXAddr12Encoding(MI, 2, Fixups, STI);
      op &= UINT64_C(1048575);
      op <<= 16;
      Value |= op;
      // op: enc
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(280375465082880));
      Value |= (op & UINT64_C(255));
      break;
    }
    case SystemZ::InsnRXY: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 36;
      Value |= op;
      // op: XBD2
      op = getBDXAddr20Encoding(MI, 2, Fixups, STI);
      op &= UINT64_C(268435455);
      op <<= 8;
      Value |= op;
      // op: enc
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(280375465082880));
      Value |= (op & UINT64_C(255));
      break;
    }
    case SystemZ::KDSA:
    case SystemZ::KIMD:
    case SystemZ::KLMD:
    case SystemZ::KMAC:
    case SystemZ::PFMF:
    case SystemZ::TRTEOpt:
    case SystemZ::TRTREOpt: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 4;
      Value |= op;
      // op: R2
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      Value |= op;
      break;
    }
    case SystemZ::TRTE:
    case SystemZ::TRTRE: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 4;
      Value |= op;
      // op: R2
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      Value |= op;
      // op: M3
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 12;
      Value |= op;
      break;
    }
    case SystemZ::BCR: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 4;
      Value |= op;
      // op: R2
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      op &= UINT64_C(15);
      Value |= op;
      break;
    }
    case SystemZ::InsnRRF: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 4;
      Value |= op;
      // op: R2
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      op &= UINT64_C(15);
      Value |= op;
      // op: R3
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 12;
      Value |= op;
      // op: M4
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 8;
      Value |= op;
      // op: enc
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(4294901760);
      Value |= op;
      break;
    }
    case SystemZ::InsnRRE: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 4;
      Value |= op;
      // op: R2
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      op &= UINT64_C(15);
      Value |= op;
      // op: enc
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(4294901760);
      Value |= op;
      break;
    }
    case SystemZ::InsnRR: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 4;
      Value |= op;
      // op: R2
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      op &= UINT64_C(15);
      Value |= op;
      // op: enc
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(65280);
      Value |= op;
      break;
    }
    case SystemZ::BR:
    case SystemZ::BRAsmE:
    case SystemZ::BRAsmH:
    case SystemZ::BRAsmHE:
    case SystemZ::BRAsmL:
    case SystemZ::BRAsmLE:
    case SystemZ::BRAsmLH:
    case SystemZ::BRAsmM:
    case SystemZ::BRAsmNE:
    case SystemZ::BRAsmNH:
    case SystemZ::BRAsmNHE:
    case SystemZ::BRAsmNL:
    case SystemZ::BRAsmNLE:
    case SystemZ::BRAsmNLH:
    case SystemZ::BRAsmNM:
    case SystemZ::BRAsmNO:
    case SystemZ::BRAsmNP:
    case SystemZ::BRAsmNZ:
    case SystemZ::BRAsmO:
    case SystemZ::BRAsmP:
    case SystemZ::BRAsmZ: {
      // op: R2
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(15);
      Value |= op;
      break;
    }
    case SystemZ::MVCK:
    case SystemZ::MVCP:
    case SystemZ::MVCS: {
      // op: RBD1
      op = getBDRAddr12Encoding(MI, 0, Fixups, STI);
      Value |= (op & UINT64_C(983040)) << 20;
      Value |= (op & UINT64_C(65535)) << 16;
      // op: BD2
      op = getBDAddr12Encoding(MI, 3, Fixups, STI);
      op &= UINT64_C(65535);
      Value |= op;
      // op: R3
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 32;
      Value |= op;
      break;
    }
    case SystemZ::InsnSS: {
      // op: RBD1
      op = getBDRAddr12Encoding(MI, 1, Fixups, STI);
      Value |= (op & UINT64_C(983040)) << 20;
      Value |= (op & UINT64_C(65535)) << 16;
      // op: BD2
      op = getBDAddr12Encoding(MI, 4, Fixups, STI);
      op &= UINT64_C(65535);
      Value |= op;
      // op: R3
      op = getMachineOpValue(MI, MI.getOperand(6), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 32;
      Value |= op;
      // op: enc
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(280375465082880);
      Value |= op;
      break;
    }
    case SystemZ::J:
    case SystemZ::JAsmE:
    case SystemZ::JAsmH:
    case SystemZ::JAsmHE:
    case SystemZ::JAsmL:
    case SystemZ::JAsmLE:
    case SystemZ::JAsmLH:
    case SystemZ::JAsmM:
    case SystemZ::JAsmNE:
    case SystemZ::JAsmNH:
    case SystemZ::JAsmNHE:
    case SystemZ::JAsmNL:
    case SystemZ::JAsmNLE:
    case SystemZ::JAsmNLH:
    case SystemZ::JAsmNM:
    case SystemZ::JAsmNO:
    case SystemZ::JAsmNP:
    case SystemZ::JAsmNZ:
    case SystemZ::JAsmO:
    case SystemZ::JAsmP:
    case SystemZ::JAsmZ: {
      // op: RI2
      op = getPC16DBLEncoding(MI, 0, Fixups, STI);
      op &= UINT64_C(65535);
      Value |= op;
      break;
    }
    case SystemZ::JG:
    case SystemZ::JGAsmE:
    case SystemZ::JGAsmH:
    case SystemZ::JGAsmHE:
    case SystemZ::JGAsmL:
    case SystemZ::JGAsmLE:
    case SystemZ::JGAsmLH:
    case SystemZ::JGAsmM:
    case SystemZ::JGAsmNE:
    case SystemZ::JGAsmNH:
    case SystemZ::JGAsmNHE:
    case SystemZ::JGAsmNL:
    case SystemZ::JGAsmNLE:
    case SystemZ::JGAsmNLH:
    case SystemZ::JGAsmNM:
    case SystemZ::JGAsmNO:
    case SystemZ::JGAsmNP:
    case SystemZ::JGAsmNZ:
    case SystemZ::JGAsmO:
    case SystemZ::JGAsmP:
    case SystemZ::JGAsmZ: {
      // op: RI2
      op = getPC32DBLEncoding(MI, 0, Fixups, STI);
      op &= UINT64_C(4294967295);
      Value |= op;
      break;
    }
    case SystemZ::VLRL:
    case SystemZ::VPKZ:
    case SystemZ::VSTRL:
    case SystemZ::VUPKZ: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 12;
      Value |= (op & UINT64_C(16)) << 4;
      // op: BD2
      op = getBDAddr12Encoding(MI, 1, Fixups, STI);
      op &= UINT64_C(65535);
      op <<= 16;
      Value |= op;
      // op: I3
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      op &= UINT64_C(255);
      op <<= 32;
      Value |= op;
      break;
    }
    case SystemZ::VLRLR:
    case SystemZ::VSTRLR: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 12;
      Value |= (op & UINT64_C(16)) << 4;
      // op: BD2
      op = getBDAddr12Encoding(MI, 2, Fixups, STI);
      op &= UINT64_C(65535);
      op <<= 16;
      Value |= op;
      // op: R3
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 32;
      Value |= op;
      break;
    }
    case SystemZ::VTP: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      Value |= (op & UINT64_C(16)) << 6;
      break;
    }
    case SystemZ::VCP: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      Value |= (op & UINT64_C(16)) << 6;
      // op: V2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 28;
      Value |= (op & UINT64_C(16)) << 5;
      // op: M3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 20;
      Value |= op;
      break;
    }
    case SystemZ::VONE:
    case SystemZ::VZERO: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      break;
    }
    case SystemZ::VLL:
    case SystemZ::VSTL: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: BD2
      op = getBDAddr12Encoding(MI, 2, Fixups, STI);
      op &= UINT64_C(65535);
      op <<= 16;
      Value |= op;
      // op: R3
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 32;
      Value |= op;
      break;
    }
    case SystemZ::VERLLB:
    case SystemZ::VERLLF:
    case SystemZ::VERLLG:
    case SystemZ::VERLLH:
    case SystemZ::VESLB:
    case SystemZ::VESLF:
    case SystemZ::VESLG:
    case SystemZ::VESLH:
    case SystemZ::VESRAB:
    case SystemZ::VESRAF:
    case SystemZ::VESRAG:
    case SystemZ::VESRAH:
    case SystemZ::VESRLB:
    case SystemZ::VESRLF:
    case SystemZ::VESRLG:
    case SystemZ::VESRLH:
    case SystemZ::VLM:
    case SystemZ::VSTM: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: BD2
      op = getBDAddr12Encoding(MI, 2, Fixups, STI);
      op &= UINT64_C(65535);
      op <<= 16;
      Value |= op;
      // op: V3
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      Value |= (op & UINT64_C(16)) << 6;
      break;
    }
    case SystemZ::VERLL:
    case SystemZ::VESL:
    case SystemZ::VESRA:
    case SystemZ::VESRL:
    case SystemZ::VLMAlign:
    case SystemZ::VSTMAlign: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: BD2
      op = getBDAddr12Encoding(MI, 2, Fixups, STI);
      op &= UINT64_C(65535);
      op <<= 16;
      Value |= op;
      // op: V3
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      Value |= (op & UINT64_C(16)) << 6;
      // op: M4
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 12;
      Value |= op;
      break;
    }
    case SystemZ::VLVGB:
    case SystemZ::VLVGF:
    case SystemZ::VLVGG:
    case SystemZ::VLVGH: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: BD2
      op = getBDAddr12Encoding(MI, 3, Fixups, STI);
      op &= UINT64_C(65535);
      op <<= 16;
      Value |= op;
      // op: R3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 32;
      Value |= op;
      break;
    }
    case SystemZ::VLVG: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: BD2
      op = getBDAddr12Encoding(MI, 3, Fixups, STI);
      op &= UINT64_C(65535);
      op <<= 16;
      Value |= op;
      // op: R3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 32;
      Value |= op;
      // op: M4
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 12;
      Value |= op;
      break;
    }
    case SystemZ::VGMB:
    case SystemZ::VGMF:
    case SystemZ::VGMG:
    case SystemZ::VGMH: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: I2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      op &= UINT64_C(255);
      op <<= 24;
      Value |= op;
      // op: I3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      op &= UINT64_C(255);
      op <<= 16;
      Value |= op;
      break;
    }
    case SystemZ::VGM: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: I2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      op &= UINT64_C(255);
      op <<= 24;
      Value |= op;
      // op: I3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      op &= UINT64_C(255);
      op <<= 16;
      Value |= op;
      // op: M4
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 12;
      Value |= op;
      break;
    }
    case SystemZ::VGBM:
    case SystemZ::VREPIB:
    case SystemZ::VREPIF:
    case SystemZ::VREPIG:
    case SystemZ::VREPIH: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: I2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      op &= UINT64_C(65535);
      op <<= 16;
      Value |= op;
      break;
    }
    case SystemZ::VLIP: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: I2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      op &= UINT64_C(65535);
      op <<= 16;
      Value |= op;
      // op: I3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 12;
      Value |= op;
      break;
    }
    case SystemZ::VREPI: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: I2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      op &= UINT64_C(65535);
      op <<= 16;
      Value |= op;
      // op: M3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 12;
      Value |= op;
      break;
    }
    case SystemZ::VLEIB:
    case SystemZ::VLEIF:
    case SystemZ::VLEIG:
    case SystemZ::VLEIH: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: I2
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      op &= UINT64_C(65535);
      op <<= 16;
      Value |= op;
      // op: M3
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 12;
      Value |= op;
      break;
    }
    case SystemZ::VCVD:
    case SystemZ::VCVDG: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: R2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 32;
      Value |= op;
      // op: I3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      op &= UINT64_C(255);
      op <<= 12;
      Value |= op;
      // op: M4
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 20;
      Value |= op;
      break;
    }
    case SystemZ::VLVGP: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: R2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 32;
      Value |= op;
      // op: R3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 28;
      Value |= op;
      break;
    }
    case SystemZ::VCLZB:
    case SystemZ::VCLZF:
    case SystemZ::VCLZG:
    case SystemZ::VCLZH:
    case SystemZ::VCTZB:
    case SystemZ::VCTZF:
    case SystemZ::VCTZG:
    case SystemZ::VCTZH:
    case SystemZ::VECB:
    case SystemZ::VECF:
    case SystemZ::VECG:
    case SystemZ::VECH:
    case SystemZ::VECLB:
    case SystemZ::VECLF:
    case SystemZ::VECLG:
    case SystemZ::VECLH:
    case SystemZ::VFLCDB:
    case SystemZ::VFLCSB:
    case SystemZ::VFLLS:
    case SystemZ::VFLNDB:
    case SystemZ::VFLNSB:
    case SystemZ::VFLPDB:
    case SystemZ::VFLPSB:
    case SystemZ::VFSQDB:
    case SystemZ::VFSQSB:
    case SystemZ::VISTRBS:
    case SystemZ::VISTRFS:
    case SystemZ::VISTRHS:
    case SystemZ::VLCB:
    case SystemZ::VLCF:
    case SystemZ::VLCG:
    case SystemZ::VLCH:
    case SystemZ::VLDEB:
    case SystemZ::VLPB:
    case SystemZ::VLPF:
    case SystemZ::VLPG:
    case SystemZ::VLPH:
    case SystemZ::VLR:
    case SystemZ::VPOPCTB:
    case SystemZ::VPOPCTF:
    case SystemZ::VPOPCTG:
    case SystemZ::VPOPCTH:
    case SystemZ::VSEGB:
    case SystemZ::VSEGF:
    case SystemZ::VSEGH:
    case SystemZ::VTM:
    case SystemZ::VUPHB:
    case SystemZ::VUPHF:
    case SystemZ::VUPHH:
    case SystemZ::VUPLB:
    case SystemZ::VUPLF:
    case SystemZ::VUPLHB:
    case SystemZ::VUPLHF:
    case SystemZ::VUPLHH:
    case SystemZ::VUPLHW:
    case SystemZ::VUPLLB:
    case SystemZ::VUPLLF:
    case SystemZ::VUPLLH:
    case SystemZ::WFCDB:
    case SystemZ::WFCSB:
    case SystemZ::WFCXB:
    case SystemZ::WFKDB:
    case SystemZ::WFKSB:
    case SystemZ::WFKXB:
    case SystemZ::WFLCDB:
    case SystemZ::WFLCSB:
    case SystemZ::WFLCXB:
    case SystemZ::WFLLD:
    case SystemZ::WFLLS:
    case SystemZ::WFLNDB:
    case SystemZ::WFLNSB:
    case SystemZ::WFLNXB:
    case SystemZ::WFLPDB:
    case SystemZ::WFLPSB:
    case SystemZ::WFLPXB:
    case SystemZ::WFSQDB:
    case SystemZ::WFSQSB:
    case SystemZ::WFSQXB:
    case SystemZ::WLDEB: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: V2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      Value |= (op & UINT64_C(16)) << 6;
      break;
    }
    case SystemZ::VPSOP:
    case SystemZ::VSRP: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: V2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      Value |= (op & UINT64_C(16)) << 6;
      // op: I3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      op &= UINT64_C(255);
      op <<= 12;
      Value |= op;
      // op: I4
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      op &= UINT64_C(255);
      op <<= 24;
      Value |= op;
      // op: M5
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 20;
      Value |= op;
      break;
    }
    case SystemZ::VFTCIDB:
    case SystemZ::VFTCISB:
    case SystemZ::WFTCIDB:
    case SystemZ::WFTCISB:
    case SystemZ::WFTCIXB: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: V2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      Value |= (op & UINT64_C(16)) << 6;
      // op: I3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      op &= UINT64_C(4095);
      op <<= 20;
      Value |= op;
      break;
    }
    case SystemZ::VFTCI: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: V2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      Value |= (op & UINT64_C(16)) << 6;
      // op: I3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      op &= UINT64_C(4095);
      op <<= 20;
      Value |= op;
      // op: M4
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 12;
      Value |= op;
      // op: M5
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 16;
      Value |= op;
      break;
    }
    case SystemZ::VCLZ:
    case SystemZ::VCTZ:
    case SystemZ::VEC:
    case SystemZ::VECL:
    case SystemZ::VLC:
    case SystemZ::VLP:
    case SystemZ::VPOPCT:
    case SystemZ::VSEG:
    case SystemZ::VUPH:
    case SystemZ::VUPL:
    case SystemZ::VUPLH:
    case SystemZ::VUPLL: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: V2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      Value |= (op & UINT64_C(16)) << 6;
      // op: M3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 12;
      Value |= op;
      break;
    }
    case SystemZ::VFLL:
    case SystemZ::VFSQ:
    case SystemZ::VLDE:
    case SystemZ::WFC:
    case SystemZ::WFK: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: V2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      Value |= (op & UINT64_C(16)) << 6;
      // op: M3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 12;
      Value |= op;
      // op: M4
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 16;
      Value |= op;
      break;
    }
    case SystemZ::VCDG:
    case SystemZ::VCDLG:
    case SystemZ::VCFPL:
    case SystemZ::VCFPS:
    case SystemZ::VCGD:
    case SystemZ::VCLFP:
    case SystemZ::VCLGD:
    case SystemZ::VCSFP:
    case SystemZ::VFI:
    case SystemZ::VFLR:
    case SystemZ::VFPSO:
    case SystemZ::VLED: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: V2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      Value |= (op & UINT64_C(16)) << 6;
      // op: M3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 12;
      Value |= op;
      // op: M4
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 16;
      Value |= op;
      // op: M5
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 20;
      Value |= op;
      break;
    }
    case SystemZ::VISTR: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: V2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      Value |= (op & UINT64_C(16)) << 6;
      // op: M3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 12;
      Value |= op;
      // op: M5
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 20;
      Value |= op;
      break;
    }
    case SystemZ::VCDGB:
    case SystemZ::VCDLGB:
    case SystemZ::VCEFB:
    case SystemZ::VCELFB:
    case SystemZ::VCFEB:
    case SystemZ::VCGDB:
    case SystemZ::VCLFEB:
    case SystemZ::VCLGDB:
    case SystemZ::VFIDB:
    case SystemZ::VFISB:
    case SystemZ::VFLRD:
    case SystemZ::VLEDB: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: V2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      Value |= (op & UINT64_C(16)) << 6;
      // op: M4
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 16;
      Value |= op;
      // op: M5
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 20;
      Value |= op;
      break;
    }
    case SystemZ::WCDGB:
    case SystemZ::WCDLGB:
    case SystemZ::WCEFB:
    case SystemZ::WCELFB:
    case SystemZ::WCFEB:
    case SystemZ::WCGDB:
    case SystemZ::WCLFEB:
    case SystemZ::WCLGDB:
    case SystemZ::WFIDB:
    case SystemZ::WFISB:
    case SystemZ::WFIXB:
    case SystemZ::WFLRD:
    case SystemZ::WFLRX:
    case SystemZ::WLEDB: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: V2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      Value |= (op & UINT64_C(16)) << 6;
      // op: M4
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      op &= UINT64_C(7);
      op <<= 16;
      Value |= op;
      // op: M5
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 20;
      Value |= op;
      break;
    }
    case SystemZ::VFPSODB:
    case SystemZ::VFPSOSB:
    case SystemZ::VISTRB:
    case SystemZ::VISTRF:
    case SystemZ::VISTRH:
    case SystemZ::WFPSODB:
    case SystemZ::WFPSOSB:
    case SystemZ::WFPSOXB: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: V2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      Value |= (op & UINT64_C(16)) << 6;
      // op: M5
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 20;
      Value |= op;
      break;
    }
    case SystemZ::VAB:
    case SystemZ::VACCB:
    case SystemZ::VACCF:
    case SystemZ::VACCG:
    case SystemZ::VACCH:
    case SystemZ::VACCQ:
    case SystemZ::VAF:
    case SystemZ::VAG:
    case SystemZ::VAH:
    case SystemZ::VAQ:
    case SystemZ::VAVGB:
    case SystemZ::VAVGF:
    case SystemZ::VAVGG:
    case SystemZ::VAVGH:
    case SystemZ::VAVGLB:
    case SystemZ::VAVGLF:
    case SystemZ::VAVGLG:
    case SystemZ::VAVGLH:
    case SystemZ::VBPERM:
    case SystemZ::VCEQB:
    case SystemZ::VCEQBS:
    case SystemZ::VCEQF:
    case SystemZ::VCEQFS:
    case SystemZ::VCEQG:
    case SystemZ::VCEQGS:
    case SystemZ::VCEQH:
    case SystemZ::VCEQHS:
    case SystemZ::VCHB:
    case SystemZ::VCHBS:
    case SystemZ::VCHF:
    case SystemZ::VCHFS:
    case SystemZ::VCHG:
    case SystemZ::VCHGS:
    case SystemZ::VCHH:
    case SystemZ::VCHHS:
    case SystemZ::VCHLB:
    case SystemZ::VCHLBS:
    case SystemZ::VCHLF:
    case SystemZ::VCHLFS:
    case SystemZ::VCHLG:
    case SystemZ::VCHLGS:
    case SystemZ::VCHLH:
    case SystemZ::VCHLHS:
    case SystemZ::VCKSM:
    case SystemZ::VERLLVB:
    case SystemZ::VERLLVF:
    case SystemZ::VERLLVG:
    case SystemZ::VERLLVH:
    case SystemZ::VESLVB:
    case SystemZ::VESLVF:
    case SystemZ::VESLVG:
    case SystemZ::VESLVH:
    case SystemZ::VESRAVB:
    case SystemZ::VESRAVF:
    case SystemZ::VESRAVG:
    case SystemZ::VESRAVH:
    case SystemZ::VESRLVB:
    case SystemZ::VESRLVF:
    case SystemZ::VESRLVG:
    case SystemZ::VESRLVH:
    case SystemZ::VFADB:
    case SystemZ::VFASB:
    case SystemZ::VFCEDB:
    case SystemZ::VFCEDBS:
    case SystemZ::VFCESB:
    case SystemZ::VFCESBS:
    case SystemZ::VFCHDB:
    case SystemZ::VFCHDBS:
    case SystemZ::VFCHEDB:
    case SystemZ::VFCHEDBS:
    case SystemZ::VFCHESB:
    case SystemZ::VFCHESBS:
    case SystemZ::VFCHSB:
    case SystemZ::VFCHSBS:
    case SystemZ::VFDDB:
    case SystemZ::VFDSB:
    case SystemZ::VFEEBS:
    case SystemZ::VFEEFS:
    case SystemZ::VFEEHS:
    case SystemZ::VFEEZB:
    case SystemZ::VFEEZBS:
    case SystemZ::VFEEZF:
    case SystemZ::VFEEZFS:
    case SystemZ::VFEEZH:
    case SystemZ::VFEEZHS:
    case SystemZ::VFENEBS:
    case SystemZ::VFENEFS:
    case SystemZ::VFENEHS:
    case SystemZ::VFENEZB:
    case SystemZ::VFENEZBS:
    case SystemZ::VFENEZF:
    case SystemZ::VFENEZFS:
    case SystemZ::VFENEZH:
    case SystemZ::VFENEZHS:
    case SystemZ::VFKEDB:
    case SystemZ::VFKEDBS:
    case SystemZ::VFKESB:
    case SystemZ::VFKESBS:
    case SystemZ::VFKHDB:
    case SystemZ::VFKHDBS:
    case SystemZ::VFKHEDB:
    case SystemZ::VFKHEDBS:
    case SystemZ::VFKHESB:
    case SystemZ::VFKHESBS:
    case SystemZ::VFKHSB:
    case SystemZ::VFKHSBS:
    case SystemZ::VFMDB:
    case SystemZ::VFMSB:
    case SystemZ::VFSDB:
    case SystemZ::VFSSB:
    case SystemZ::VGFMB:
    case SystemZ::VGFMF:
    case SystemZ::VGFMG:
    case SystemZ::VGFMH:
    case SystemZ::VMEB:
    case SystemZ::VMEF:
    case SystemZ::VMEH:
    case SystemZ::VMHB:
    case SystemZ::VMHF:
    case SystemZ::VMHH:
    case SystemZ::VMLB:
    case SystemZ::VMLEB:
    case SystemZ::VMLEF:
    case SystemZ::VMLEH:
    case SystemZ::VMLF:
    case SystemZ::VMLHB:
    case SystemZ::VMLHF:
    case SystemZ::VMLHH:
    case SystemZ::VMLHW:
    case SystemZ::VMLOB:
    case SystemZ::VMLOF:
    case SystemZ::VMLOH:
    case SystemZ::VMNB:
    case SystemZ::VMNF:
    case SystemZ::VMNG:
    case SystemZ::VMNH:
    case SystemZ::VMNLB:
    case SystemZ::VMNLF:
    case SystemZ::VMNLG:
    case SystemZ::VMNLH:
    case SystemZ::VMOB:
    case SystemZ::VMOF:
    case SystemZ::VMOH:
    case SystemZ::VMRHB:
    case SystemZ::VMRHF:
    case SystemZ::VMRHG:
    case SystemZ::VMRHH:
    case SystemZ::VMRLB:
    case SystemZ::VMRLF:
    case SystemZ::VMRLG:
    case SystemZ::VMRLH:
    case SystemZ::VMXB:
    case SystemZ::VMXF:
    case SystemZ::VMXG:
    case SystemZ::VMXH:
    case SystemZ::VMXLB:
    case SystemZ::VMXLF:
    case SystemZ::VMXLG:
    case SystemZ::VMXLH:
    case SystemZ::VN:
    case SystemZ::VNC:
    case SystemZ::VNN:
    case SystemZ::VNO:
    case SystemZ::VNX:
    case SystemZ::VO:
    case SystemZ::VOC:
    case SystemZ::VPKF:
    case SystemZ::VPKG:
    case SystemZ::VPKH:
    case SystemZ::VPKLSF:
    case SystemZ::VPKLSFS:
    case SystemZ::VPKLSG:
    case SystemZ::VPKLSGS:
    case SystemZ::VPKLSH:
    case SystemZ::VPKLSHS:
    case SystemZ::VPKSF:
    case SystemZ::VPKSFS:
    case SystemZ::VPKSG:
    case SystemZ::VPKSGS:
    case SystemZ::VPKSH:
    case SystemZ::VPKSHS:
    case SystemZ::VSB:
    case SystemZ::VSCBIB:
    case SystemZ::VSCBIF:
    case SystemZ::VSCBIG:
    case SystemZ::VSCBIH:
    case SystemZ::VSCBIQ:
    case SystemZ::VSF:
    case SystemZ::VSG:
    case SystemZ::VSH:
    case SystemZ::VSL:
    case SystemZ::VSLB:
    case SystemZ::VSQ:
    case SystemZ::VSRA:
    case SystemZ::VSRAB:
    case SystemZ::VSRL:
    case SystemZ::VSRLB:
    case SystemZ::VSUMB:
    case SystemZ::VSUMGF:
    case SystemZ::VSUMGH:
    case SystemZ::VSUMH:
    case SystemZ::VSUMQF:
    case SystemZ::VSUMQG:
    case SystemZ::VX:
    case SystemZ::WFADB:
    case SystemZ::WFASB:
    case SystemZ::WFAXB:
    case SystemZ::WFCEDB:
    case SystemZ::WFCEDBS:
    case SystemZ::WFCESB:
    case SystemZ::WFCESBS:
    case SystemZ::WFCEXB:
    case SystemZ::WFCEXBS:
    case SystemZ::WFCHDB:
    case SystemZ::WFCHDBS:
    case SystemZ::WFCHEDB:
    case SystemZ::WFCHEDBS:
    case SystemZ::WFCHESB:
    case SystemZ::WFCHESBS:
    case SystemZ::WFCHEXB:
    case SystemZ::WFCHEXBS:
    case SystemZ::WFCHSB:
    case SystemZ::WFCHSBS:
    case SystemZ::WFCHXB:
    case SystemZ::WFCHXBS:
    case SystemZ::WFDDB:
    case SystemZ::WFDSB:
    case SystemZ::WFDXB:
    case SystemZ::WFKEDB:
    case SystemZ::WFKEDBS:
    case SystemZ::WFKESB:
    case SystemZ::WFKESBS:
    case SystemZ::WFKEXB:
    case SystemZ::WFKEXBS:
    case SystemZ::WFKHDB:
    case SystemZ::WFKHDBS:
    case SystemZ::WFKHEDB:
    case SystemZ::WFKHEDBS:
    case SystemZ::WFKHESB:
    case SystemZ::WFKHESBS:
    case SystemZ::WFKHEXB:
    case SystemZ::WFKHEXBS:
    case SystemZ::WFKHSB:
    case SystemZ::WFKHSBS:
    case SystemZ::WFKHXB:
    case SystemZ::WFKHXBS:
    case SystemZ::WFMDB:
    case SystemZ::WFMSB:
    case SystemZ::WFMXB:
    case SystemZ::WFSDB:
    case SystemZ::WFSSB:
    case SystemZ::WFSXB: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: V2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      Value |= (op & UINT64_C(16)) << 6;
      // op: V3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 28;
      Value |= (op & UINT64_C(16)) << 5;
      break;
    }
    case SystemZ::VAP:
    case SystemZ::VDP:
    case SystemZ::VMP:
    case SystemZ::VMSP:
    case SystemZ::VRP:
    case SystemZ::VSDP:
    case SystemZ::VSP: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: V2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      Value |= (op & UINT64_C(16)) << 6;
      // op: V3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 28;
      Value |= (op & UINT64_C(16)) << 5;
      // op: I4
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      op &= UINT64_C(255);
      op <<= 12;
      Value |= op;
      // op: M5
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 20;
      Value |= op;
      break;
    }
    case SystemZ::VSLD:
    case SystemZ::VSLDB:
    case SystemZ::VSRD: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: V2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      Value |= (op & UINT64_C(16)) << 6;
      // op: V3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 28;
      Value |= (op & UINT64_C(16)) << 5;
      // op: I4
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      op &= UINT64_C(255);
      op <<= 16;
      Value |= op;
      break;
    }
    case SystemZ::VA:
    case SystemZ::VACC:
    case SystemZ::VAVG:
    case SystemZ::VAVGL:
    case SystemZ::VERLLV:
    case SystemZ::VESLV:
    case SystemZ::VESRAV:
    case SystemZ::VESRLV:
    case SystemZ::VGFM:
    case SystemZ::VME:
    case SystemZ::VMH:
    case SystemZ::VML:
    case SystemZ::VMLE:
    case SystemZ::VMLH:
    case SystemZ::VMLO:
    case SystemZ::VMN:
    case SystemZ::VMNL:
    case SystemZ::VMO:
    case SystemZ::VMRH:
    case SystemZ::VMRL:
    case SystemZ::VMX:
    case SystemZ::VMXL:
    case SystemZ::VPDI:
    case SystemZ::VPK:
    case SystemZ::VS:
    case SystemZ::VSCBI:
    case SystemZ::VSUM:
    case SystemZ::VSUMG:
    case SystemZ::VSUMQ: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: V2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      Value |= (op & UINT64_C(16)) << 6;
      // op: V3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 28;
      Value |= (op & UINT64_C(16)) << 5;
      // op: M4
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 12;
      Value |= op;
      break;
    }
    case SystemZ::VFA:
    case SystemZ::VFD:
    case SystemZ::VFM:
    case SystemZ::VFS: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: V2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      Value |= (op & UINT64_C(16)) << 6;
      // op: V3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 28;
      Value |= (op & UINT64_C(16)) << 5;
      // op: M4
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 12;
      Value |= op;
      // op: M5
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 16;
      Value |= op;
      break;
    }
    case SystemZ::VFCE:
    case SystemZ::VFCH:
    case SystemZ::VFCHE:
    case SystemZ::VFMAX:
    case SystemZ::VFMIN: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: V2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      Value |= (op & UINT64_C(16)) << 6;
      // op: V3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 28;
      Value |= (op & UINT64_C(16)) << 5;
      // op: M4
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 12;
      Value |= op;
      // op: M5
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 16;
      Value |= op;
      // op: M6
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 20;
      Value |= op;
      break;
    }
    case SystemZ::VCEQ:
    case SystemZ::VCH:
    case SystemZ::VCHL:
    case SystemZ::VFAE:
    case SystemZ::VFEE:
    case SystemZ::VFENE:
    case SystemZ::VPKLS:
    case SystemZ::VPKS: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: V2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      Value |= (op & UINT64_C(16)) << 6;
      // op: V3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 28;
      Value |= (op & UINT64_C(16)) << 5;
      // op: M4
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 12;
      Value |= op;
      // op: M5
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 20;
      Value |= op;
      break;
    }
    case SystemZ::VFAEZB:
    case SystemZ::VFAEZF:
    case SystemZ::VFAEZH: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: V2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      Value |= (op & UINT64_C(16)) << 6;
      // op: V3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 28;
      Value |= (op & UINT64_C(16)) << 5;
      // op: M5
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(12)) << 20;
      Value |= (op & UINT64_C(1)) << 20;
      break;
    }
    case SystemZ::VFAEZBS:
    case SystemZ::VFAEZFS:
    case SystemZ::VFAEZHS: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: V2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      Value |= (op & UINT64_C(16)) << 6;
      // op: V3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 28;
      Value |= (op & UINT64_C(16)) << 5;
      // op: M5
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      op &= UINT64_C(12);
      op <<= 20;
      Value |= op;
      break;
    }
    case SystemZ::VFAEBS:
    case SystemZ::VFAEFS:
    case SystemZ::VFAEHS: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: V2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      Value |= (op & UINT64_C(16)) << 6;
      // op: V3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 28;
      Value |= (op & UINT64_C(16)) << 5;
      // op: M5
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      op &= UINT64_C(14);
      op <<= 20;
      Value |= op;
      break;
    }
    case SystemZ::VFAEB:
    case SystemZ::VFAEF:
    case SystemZ::VFAEH:
    case SystemZ::VFEEB:
    case SystemZ::VFEEF:
    case SystemZ::VFEEH:
    case SystemZ::VFENEB:
    case SystemZ::VFENEF:
    case SystemZ::VFENEH: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: V2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      Value |= (op & UINT64_C(16)) << 6;
      // op: V3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 28;
      Value |= (op & UINT64_C(16)) << 5;
      // op: M5
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 20;
      Value |= op;
      break;
    }
    case SystemZ::VFMAXDB:
    case SystemZ::VFMAXSB:
    case SystemZ::VFMINDB:
    case SystemZ::VFMINSB:
    case SystemZ::WFMAXDB:
    case SystemZ::WFMAXSB:
    case SystemZ::WFMAXXB:
    case SystemZ::WFMINDB:
    case SystemZ::WFMINSB:
    case SystemZ::WFMINXB: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: V2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      Value |= (op & UINT64_C(16)) << 6;
      // op: V3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 28;
      Value |= (op & UINT64_C(16)) << 5;
      // op: M6
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 20;
      Value |= op;
      break;
    }
    case SystemZ::VACCCQ:
    case SystemZ::VACQ:
    case SystemZ::VFMADB:
    case SystemZ::VFMASB:
    case SystemZ::VFMSDB:
    case SystemZ::VFMSSB:
    case SystemZ::VFNMADB:
    case SystemZ::VFNMASB:
    case SystemZ::VFNMSDB:
    case SystemZ::VFNMSSB:
    case SystemZ::VGFMAB:
    case SystemZ::VGFMAF:
    case SystemZ::VGFMAG:
    case SystemZ::VGFMAH:
    case SystemZ::VMAEB:
    case SystemZ::VMAEF:
    case SystemZ::VMAEH:
    case SystemZ::VMAHB:
    case SystemZ::VMAHF:
    case SystemZ::VMAHH:
    case SystemZ::VMALB:
    case SystemZ::VMALEB:
    case SystemZ::VMALEF:
    case SystemZ::VMALEH:
    case SystemZ::VMALF:
    case SystemZ::VMALHB:
    case SystemZ::VMALHF:
    case SystemZ::VMALHH:
    case SystemZ::VMALHW:
    case SystemZ::VMALOB:
    case SystemZ::VMALOF:
    case SystemZ::VMALOH:
    case SystemZ::VMAOB:
    case SystemZ::VMAOF:
    case SystemZ::VMAOH:
    case SystemZ::VPERM:
    case SystemZ::VSBCBIQ:
    case SystemZ::VSBIQ:
    case SystemZ::VSEL:
    case SystemZ::VSTRSZB:
    case SystemZ::VSTRSZF:
    case SystemZ::VSTRSZH:
    case SystemZ::WFMADB:
    case SystemZ::WFMASB:
    case SystemZ::WFMAXB:
    case SystemZ::WFMSDB:
    case SystemZ::WFMSSB:
    case SystemZ::WFMSXB:
    case SystemZ::WFNMADB:
    case SystemZ::WFNMASB:
    case SystemZ::WFNMAXB:
    case SystemZ::WFNMSDB:
    case SystemZ::WFNMSSB:
    case SystemZ::WFNMSXB: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: V2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      Value |= (op & UINT64_C(16)) << 6;
      // op: V3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 28;
      Value |= (op & UINT64_C(16)) << 5;
      // op: V4
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 12;
      Value |= (op & UINT64_C(16)) << 4;
      break;
    }
    case SystemZ::VFMA:
    case SystemZ::VFMS:
    case SystemZ::VFNMA:
    case SystemZ::VFNMS: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: V2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      Value |= (op & UINT64_C(16)) << 6;
      // op: V3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 28;
      Value |= (op & UINT64_C(16)) << 5;
      // op: V4
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 12;
      Value |= (op & UINT64_C(16)) << 4;
      // op: M5
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 16;
      Value |= op;
      // op: M6
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 24;
      Value |= op;
      break;
    }
    case SystemZ::VAC:
    case SystemZ::VACCC:
    case SystemZ::VGFMA:
    case SystemZ::VMAE:
    case SystemZ::VMAH:
    case SystemZ::VMAL:
    case SystemZ::VMALE:
    case SystemZ::VMALH:
    case SystemZ::VMALO:
    case SystemZ::VMAO:
    case SystemZ::VSBCBI:
    case SystemZ::VSBI: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: V2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      Value |= (op & UINT64_C(16)) << 6;
      // op: V3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 28;
      Value |= (op & UINT64_C(16)) << 5;
      // op: V4
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 12;
      Value |= (op & UINT64_C(16)) << 4;
      // op: M5
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 24;
      Value |= op;
      break;
    }
    case SystemZ::VMSL:
    case SystemZ::VSTRC:
    case SystemZ::VSTRS: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: V2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      Value |= (op & UINT64_C(16)) << 6;
      // op: V3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 28;
      Value |= (op & UINT64_C(16)) << 5;
      // op: V4
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 12;
      Value |= (op & UINT64_C(16)) << 4;
      // op: M5
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 24;
      Value |= op;
      // op: M6
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 20;
      Value |= op;
      break;
    }
    case SystemZ::VSTRCZB:
    case SystemZ::VSTRCZF:
    case SystemZ::VSTRCZH: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: V2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      Value |= (op & UINT64_C(16)) << 6;
      // op: V3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 28;
      Value |= (op & UINT64_C(16)) << 5;
      // op: V4
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 12;
      Value |= (op & UINT64_C(16)) << 4;
      // op: M6
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(12)) << 20;
      Value |= (op & UINT64_C(1)) << 20;
      break;
    }
    case SystemZ::VSTRCZBS:
    case SystemZ::VSTRCZFS:
    case SystemZ::VSTRCZHS: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: V2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      Value |= (op & UINT64_C(16)) << 6;
      // op: V3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 28;
      Value |= (op & UINT64_C(16)) << 5;
      // op: V4
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 12;
      Value |= (op & UINT64_C(16)) << 4;
      // op: M6
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      op &= UINT64_C(12);
      op <<= 20;
      Value |= op;
      break;
    }
    case SystemZ::VSTRCBS:
    case SystemZ::VSTRCFS:
    case SystemZ::VSTRCHS: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: V2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      Value |= (op & UINT64_C(16)) << 6;
      // op: V3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 28;
      Value |= (op & UINT64_C(16)) << 5;
      // op: V4
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 12;
      Value |= (op & UINT64_C(16)) << 4;
      // op: M6
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      op &= UINT64_C(14);
      op <<= 20;
      Value |= op;
      break;
    }
    case SystemZ::VMSLG:
    case SystemZ::VSTRCB:
    case SystemZ::VSTRCF:
    case SystemZ::VSTRCH:
    case SystemZ::VSTRSB:
    case SystemZ::VSTRSF:
    case SystemZ::VSTRSH: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: V2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      Value |= (op & UINT64_C(16)) << 6;
      // op: V3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 28;
      Value |= (op & UINT64_C(16)) << 5;
      // op: V4
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 12;
      Value |= (op & UINT64_C(16)) << 4;
      // op: M6
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 20;
      Value |= op;
      break;
    }
    case SystemZ::VERIMB:
    case SystemZ::VERIMF:
    case SystemZ::VERIMG:
    case SystemZ::VERIMH: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: V2
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      Value |= (op & UINT64_C(16)) << 6;
      // op: V3
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 28;
      Value |= (op & UINT64_C(16)) << 5;
      // op: I4
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      op &= UINT64_C(255);
      op <<= 16;
      Value |= op;
      break;
    }
    case SystemZ::VERIM: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: V2
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      Value |= (op & UINT64_C(16)) << 6;
      // op: V3
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 28;
      Value |= (op & UINT64_C(16)) << 5;
      // op: I4
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      op &= UINT64_C(255);
      op <<= 16;
      Value |= op;
      // op: M5
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 12;
      Value |= op;
      break;
    }
    case SystemZ::VREPB:
    case SystemZ::VREPF:
    case SystemZ::VREPG:
    case SystemZ::VREPH: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: V3
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      Value |= (op & UINT64_C(16)) << 6;
      // op: I2
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      op &= UINT64_C(65535);
      op <<= 16;
      Value |= op;
      break;
    }
    case SystemZ::VREP: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: V3
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      Value |= (op & UINT64_C(16)) << 6;
      // op: I2
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      op &= UINT64_C(65535);
      op <<= 16;
      Value |= op;
      // op: M4
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 12;
      Value |= op;
      break;
    }
    case SystemZ::VSCEF:
    case SystemZ::VSCEG: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: VBD2
      op = getBDVAddr12Encoding(MI, 1, Fixups, STI);
      Value |= (op & UINT64_C(1048575)) << 16;
      Value |= (op & UINT64_C(1048576)) >> 10;
      // op: M3
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 12;
      Value |= op;
      break;
    }
    case SystemZ::VGEF:
    case SystemZ::VGEG: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: VBD2
      op = getBDVAddr12Encoding(MI, 2, Fixups, STI);
      Value |= (op & UINT64_C(1048575)) << 16;
      Value |= (op & UINT64_C(1048576)) >> 10;
      // op: M3
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 12;
      Value |= op;
      break;
    }
    case SystemZ::VL:
    case SystemZ::VLBRF:
    case SystemZ::VLBRG:
    case SystemZ::VLBRH:
    case SystemZ::VLBRQ:
    case SystemZ::VLBRREPF:
    case SystemZ::VLBRREPG:
    case SystemZ::VLBRREPH:
    case SystemZ::VLERF:
    case SystemZ::VLERG:
    case SystemZ::VLERH:
    case SystemZ::VLLEBRZE:
    case SystemZ::VLLEBRZF:
    case SystemZ::VLLEBRZG:
    case SystemZ::VLLEBRZH:
    case SystemZ::VLLEZB:
    case SystemZ::VLLEZF:
    case SystemZ::VLLEZG:
    case SystemZ::VLLEZH:
    case SystemZ::VLLEZLF:
    case SystemZ::VLREPB:
    case SystemZ::VLREPF:
    case SystemZ::VLREPG:
    case SystemZ::VLREPH:
    case SystemZ::VST:
    case SystemZ::VSTBRF:
    case SystemZ::VSTBRG:
    case SystemZ::VSTBRH:
    case SystemZ::VSTBRQ:
    case SystemZ::VSTERF:
    case SystemZ::VSTERG:
    case SystemZ::VSTERH: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: XBD2
      op = getBDXAddr12Encoding(MI, 1, Fixups, STI);
      op &= UINT64_C(1048575);
      op <<= 16;
      Value |= op;
      break;
    }
    case SystemZ::VLAlign:
    case SystemZ::VLBB:
    case SystemZ::VLBR:
    case SystemZ::VLBRREP:
    case SystemZ::VLER:
    case SystemZ::VLLEBRZ:
    case SystemZ::VLLEZ:
    case SystemZ::VLREP:
    case SystemZ::VSTAlign:
    case SystemZ::VSTBR:
    case SystemZ::VSTEB:
    case SystemZ::VSTEBRF:
    case SystemZ::VSTEBRG:
    case SystemZ::VSTEBRH:
    case SystemZ::VSTEF:
    case SystemZ::VSTEG:
    case SystemZ::VSTEH:
    case SystemZ::VSTER: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: XBD2
      op = getBDXAddr12Encoding(MI, 1, Fixups, STI);
      op &= UINT64_C(1048575);
      op <<= 16;
      Value |= op;
      // op: M3
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 12;
      Value |= op;
      break;
    }
    case SystemZ::VLEB:
    case SystemZ::VLEBRF:
    case SystemZ::VLEBRG:
    case SystemZ::VLEBRH:
    case SystemZ::VLEF:
    case SystemZ::VLEG:
    case SystemZ::VLEH: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: XBD2
      op = getBDXAddr12Encoding(MI, 2, Fixups, STI);
      op &= UINT64_C(1048575);
      op <<= 16;
      Value |= op;
      // op: M3
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups, STI);
      op &= UINT64_C(15);
      op <<= 12;
      Value |= op;
      break;
    }
    case SystemZ::B:
    case SystemZ::BAsmE:
    case SystemZ::BAsmH:
    case SystemZ::BAsmHE:
    case SystemZ::BAsmL:
    case SystemZ::BAsmLE:
    case SystemZ::BAsmLH:
    case SystemZ::BAsmM:
    case SystemZ::BAsmNE:
    case SystemZ::BAsmNH:
    case SystemZ::BAsmNHE:
    case SystemZ::BAsmNL:
    case SystemZ::BAsmNLE:
    case SystemZ::BAsmNLH:
    case SystemZ::BAsmNM:
    case SystemZ::BAsmNO:
    case SystemZ::BAsmNP:
    case SystemZ::BAsmNZ:
    case SystemZ::BAsmO:
    case SystemZ::BAsmP:
    case SystemZ::BAsmZ: {
      // op: XBD2
      op = getBDXAddr12Encoding(MI, 0, Fixups, STI);
      op &= UINT64_C(1048575);
      Value |= op;
      break;
    }
    case SystemZ::BI:
    case SystemZ::BIAsmE:
    case SystemZ::BIAsmH:
    case SystemZ::BIAsmHE:
    case SystemZ::BIAsmL:
    case SystemZ::BIAsmLE:
    case SystemZ::BIAsmLH:
    case SystemZ::BIAsmM:
    case SystemZ::BIAsmNE:
    case SystemZ::BIAsmNH:
    case SystemZ::BIAsmNHE:
    case SystemZ::BIAsmNL:
    case SystemZ::BIAsmNLE:
    case SystemZ::BIAsmNLH:
    case SystemZ::BIAsmNM:
    case SystemZ::BIAsmNO:
    case SystemZ::BIAsmNP:
    case SystemZ::BIAsmNZ:
    case SystemZ::BIAsmO:
    case SystemZ::BIAsmP:
    case SystemZ::BIAsmZ: {
      // op: XBD2
      op = getBDXAddr20Encoding(MI, 0, Fixups, STI);
      op &= UINT64_C(268435455);
      op <<= 8;
      Value |= op;
      break;
    }
    case SystemZ::InsnE: {
      // op: enc
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      op &= UINT64_C(65535);
      Value |= op;
      break;
    }
  default:
    std::string msg;
    raw_string_ostream Msg(msg);
    Msg << "Not supported instr: " << MI;
    report_fatal_error(Msg.str());
  }
  return Value;
}

#ifdef ENABLE_INSTR_PREDICATE_VERIFIER
#undef ENABLE_INSTR_PREDICATE_VERIFIER
#include <sstream>

// Bits for subtarget features that participate in instruction matching.
enum SubtargetFeatureBits : uint8_t {
  Feature_FeatureDistinctOpsBit = 3,
  Feature_FeatureFastSerializationBit = 8,
  Feature_FeatureFPExtensionBit = 7,
  Feature_FeatureHighWordBit = 10,
  Feature_FeatureInterlockedAccess1Bit = 12,
  Feature_FeatureLoadStoreOnCondBit = 15,
  Feature_FeaturePopulationCountBit = 26,
  Feature_FeatureMessageSecurityAssist3Bit = 17,
  Feature_FeatureMessageSecurityAssist4Bit = 18,
  Feature_FeatureResetReferenceBitsMultipleBit = 28,
  Feature_FeatureExecutionHintBit = 6,
  Feature_FeatureLoadAndTrapBit = 13,
  Feature_FeatureMiscellaneousExtensionsBit = 23,
  Feature_FeatureProcessorAssistBit = 27,
  Feature_FeatureTransactionalExecutionBit = 29,
  Feature_FeatureDFPZonedConversionBit = 1,
  Feature_FeatureEnhancedDAT2Bit = 4,
  Feature_FeatureLoadAndZeroRightmostByteBit = 14,
  Feature_FeatureLoadStoreOnCond2Bit = 16,
  Feature_FeatureMessageSecurityAssist5Bit = 19,
  Feature_FeatureDFPPackedConversionBit = 0,
  Feature_FeatureVectorBit = 30,
  Feature_FeatureMiscellaneousExtensions2Bit = 24,
  Feature_FeatureGuardedStorageBit = 9,
  Feature_FeatureMessageSecurityAssist7Bit = 20,
  Feature_FeatureMessageSecurityAssist8Bit = 21,
  Feature_FeatureVectorEnhancements1Bit = 31,
  Feature_FeatureVectorPackedDecimalBit = 33,
  Feature_FeatureInsertReferenceBitsMultipleBit = 11,
  Feature_FeatureMiscellaneousExtensions3Bit = 25,
  Feature_FeatureMessageSecurityAssist9Bit = 22,
  Feature_FeatureVectorEnhancements2Bit = 32,
  Feature_FeatureVectorPackedDecimalEnhancementBit = 34,
  Feature_FeatureEnhancedSortBit = 5,
  Feature_FeatureDeflateConversionBit = 2,
};

#ifndef NDEBUG
static const char *SubtargetFeatureNames[] = {
  "Feature_FeatureDFPPackedConversion",
  "Feature_FeatureDFPZonedConversion",
  "Feature_FeatureDeflateConversion",
  "Feature_FeatureDistinctOps",
  "Feature_FeatureEnhancedDAT2",
  "Feature_FeatureEnhancedSort",
  "Feature_FeatureExecutionHint",
  "Feature_FeatureFPExtension",
  "Feature_FeatureFastSerialization",
  "Feature_FeatureGuardedStorage",
  "Feature_FeatureHighWord",
  "Feature_FeatureInsertReferenceBitsMultiple",
  "Feature_FeatureInterlockedAccess1",
  "Feature_FeatureLoadAndTrap",
  "Feature_FeatureLoadAndZeroRightmostByte",
  "Feature_FeatureLoadStoreOnCond",
  "Feature_FeatureLoadStoreOnCond2",
  "Feature_FeatureMessageSecurityAssist3",
  "Feature_FeatureMessageSecurityAssist4",
  "Feature_FeatureMessageSecurityAssist5",
  "Feature_FeatureMessageSecurityAssist7",
  "Feature_FeatureMessageSecurityAssist8",
  "Feature_FeatureMessageSecurityAssist9",
  "Feature_FeatureMiscellaneousExtensions",
  "Feature_FeatureMiscellaneousExtensions2",
  "Feature_FeatureMiscellaneousExtensions3",
  "Feature_FeaturePopulationCount",
  "Feature_FeatureProcessorAssist",
  "Feature_FeatureResetReferenceBitsMultiple",
  "Feature_FeatureTransactionalExecution",
  "Feature_FeatureVector",
  "Feature_FeatureVectorEnhancements1",
  "Feature_FeatureVectorEnhancements2",
  "Feature_FeatureVectorPackedDecimal",
  "Feature_FeatureVectorPackedDecimalEnhancement",
  nullptr
};

#endif // NDEBUG
FeatureBitset SystemZMCCodeEmitter::
computeAvailableFeatures(const FeatureBitset& FB) const {
  FeatureBitset Features;
  if ((FB[SystemZ::FeatureDistinctOps]))
    Features.set(Feature_FeatureDistinctOpsBit);
  if ((FB[SystemZ::FeatureFastSerialization]))
    Features.set(Feature_FeatureFastSerializationBit);
  if ((FB[SystemZ::FeatureFPExtension]))
    Features.set(Feature_FeatureFPExtensionBit);
  if ((FB[SystemZ::FeatureHighWord]))
    Features.set(Feature_FeatureHighWordBit);
  if ((FB[SystemZ::FeatureInterlockedAccess1]))
    Features.set(Feature_FeatureInterlockedAccess1Bit);
  if ((FB[SystemZ::FeatureLoadStoreOnCond]))
    Features.set(Feature_FeatureLoadStoreOnCondBit);
  if ((FB[SystemZ::FeaturePopulationCount]))
    Features.set(Feature_FeaturePopulationCountBit);
  if ((FB[SystemZ::FeatureMessageSecurityAssist3]))
    Features.set(Feature_FeatureMessageSecurityAssist3Bit);
  if ((FB[SystemZ::FeatureMessageSecurityAssist4]))
    Features.set(Feature_FeatureMessageSecurityAssist4Bit);
  if ((FB[SystemZ::FeatureResetReferenceBitsMultiple]))
    Features.set(Feature_FeatureResetReferenceBitsMultipleBit);
  if ((FB[SystemZ::FeatureExecutionHint]))
    Features.set(Feature_FeatureExecutionHintBit);
  if ((FB[SystemZ::FeatureLoadAndTrap]))
    Features.set(Feature_FeatureLoadAndTrapBit);
  if ((FB[SystemZ::FeatureMiscellaneousExtensions]))
    Features.set(Feature_FeatureMiscellaneousExtensionsBit);
  if ((FB[SystemZ::FeatureProcessorAssist]))
    Features.set(Feature_FeatureProcessorAssistBit);
  if ((FB[SystemZ::FeatureTransactionalExecution]))
    Features.set(Feature_FeatureTransactionalExecutionBit);
  if ((FB[SystemZ::FeatureDFPZonedConversion]))
    Features.set(Feature_FeatureDFPZonedConversionBit);
  if ((FB[SystemZ::FeatureEnhancedDAT2]))
    Features.set(Feature_FeatureEnhancedDAT2Bit);
  if ((FB[SystemZ::FeatureLoadAndZeroRightmostByte]))
    Features.set(Feature_FeatureLoadAndZeroRightmostByteBit);
  if ((FB[SystemZ::FeatureLoadStoreOnCond2]))
    Features.set(Feature_FeatureLoadStoreOnCond2Bit);
  if ((FB[SystemZ::FeatureMessageSecurityAssist5]))
    Features.set(Feature_FeatureMessageSecurityAssist5Bit);
  if ((FB[SystemZ::FeatureDFPPackedConversion]))
    Features.set(Feature_FeatureDFPPackedConversionBit);
  if ((FB[SystemZ::FeatureVector]))
    Features.set(Feature_FeatureVectorBit);
  if ((FB[SystemZ::FeatureMiscellaneousExtensions2]))
    Features.set(Feature_FeatureMiscellaneousExtensions2Bit);
  if ((FB[SystemZ::FeatureGuardedStorage]))
    Features.set(Feature_FeatureGuardedStorageBit);
  if ((FB[SystemZ::FeatureMessageSecurityAssist7]))
    Features.set(Feature_FeatureMessageSecurityAssist7Bit);
  if ((FB[SystemZ::FeatureMessageSecurityAssist8]))
    Features.set(Feature_FeatureMessageSecurityAssist8Bit);
  if ((FB[SystemZ::FeatureVectorEnhancements1]))
    Features.set(Feature_FeatureVectorEnhancements1Bit);
  if ((FB[SystemZ::FeatureVectorPackedDecimal]))
    Features.set(Feature_FeatureVectorPackedDecimalBit);
  if ((FB[SystemZ::FeatureInsertReferenceBitsMultiple]))
    Features.set(Feature_FeatureInsertReferenceBitsMultipleBit);
  if ((FB[SystemZ::FeatureMiscellaneousExtensions3]))
    Features.set(Feature_FeatureMiscellaneousExtensions3Bit);
  if ((FB[SystemZ::FeatureMessageSecurityAssist9]))
    Features.set(Feature_FeatureMessageSecurityAssist9Bit);
  if ((FB[SystemZ::FeatureVectorEnhancements2]))
    Features.set(Feature_FeatureVectorEnhancements2Bit);
  if ((FB[SystemZ::FeatureVectorPackedDecimalEnhancement]))
    Features.set(Feature_FeatureVectorPackedDecimalEnhancementBit);
  if ((FB[SystemZ::FeatureEnhancedSort]))
    Features.set(Feature_FeatureEnhancedSortBit);
  if ((FB[SystemZ::FeatureDeflateConversion]))
    Features.set(Feature_FeatureDeflateConversionBit);
  return Features;
}

#ifndef NDEBUG
// Feature bitsets.
enum : uint8_t {
  CEFBS_None,
  CEFBS_FeatureDFPPackedConversion,
  CEFBS_FeatureDFPZonedConversion,
  CEFBS_FeatureDeflateConversion,
  CEFBS_FeatureDistinctOps,
  CEFBS_FeatureEnhancedDAT2,
  CEFBS_FeatureEnhancedSort,
  CEFBS_FeatureExecutionHint,
  CEFBS_FeatureFPExtension,
  CEFBS_FeatureGuardedStorage,
  CEFBS_FeatureHighWord,
  CEFBS_FeatureInsertReferenceBitsMultiple,
  CEFBS_FeatureInterlockedAccess1,
  CEFBS_FeatureLoadAndTrap,
  CEFBS_FeatureLoadAndZeroRightmostByte,
  CEFBS_FeatureLoadStoreOnCond,
  CEFBS_FeatureLoadStoreOnCond2,
  CEFBS_FeatureMessageSecurityAssist3,
  CEFBS_FeatureMessageSecurityAssist4,
  CEFBS_FeatureMessageSecurityAssist5,
  CEFBS_FeatureMessageSecurityAssist7,
  CEFBS_FeatureMessageSecurityAssist8,
  CEFBS_FeatureMessageSecurityAssist9,
  CEFBS_FeatureMiscellaneousExtensions,
  CEFBS_FeatureMiscellaneousExtensions2,
  CEFBS_FeatureMiscellaneousExtensions3,
  CEFBS_FeaturePopulationCount,
  CEFBS_FeatureProcessorAssist,
  CEFBS_FeatureResetReferenceBitsMultiple,
  CEFBS_FeatureTransactionalExecution,
  CEFBS_FeatureVector,
  CEFBS_FeatureVectorEnhancements1,
  CEFBS_FeatureVectorEnhancements2,
  CEFBS_FeatureVectorPackedDecimal,
  CEFBS_FeatureVectorPackedDecimalEnhancement,
  CEFBS_FeatureHighWord_FeatureDistinctOps,
};

static constexpr FeatureBitset FeatureBitsets[] = {
  {}, // CEFBS_None
  {Feature_FeatureDFPPackedConversionBit, },
  {Feature_FeatureDFPZonedConversionBit, },
  {Feature_FeatureDeflateConversionBit, },
  {Feature_FeatureDistinctOpsBit, },
  {Feature_FeatureEnhancedDAT2Bit, },
  {Feature_FeatureEnhancedSortBit, },
  {Feature_FeatureExecutionHintBit, },
  {Feature_FeatureFPExtensionBit, },
  {Feature_FeatureGuardedStorageBit, },
  {Feature_FeatureHighWordBit, },
  {Feature_FeatureInsertReferenceBitsMultipleBit, },
  {Feature_FeatureInterlockedAccess1Bit, },
  {Feature_FeatureLoadAndTrapBit, },
  {Feature_FeatureLoadAndZeroRightmostByteBit, },
  {Feature_FeatureLoadStoreOnCondBit, },
  {Feature_FeatureLoadStoreOnCond2Bit, },
  {Feature_FeatureMessageSecurityAssist3Bit, },
  {Feature_FeatureMessageSecurityAssist4Bit, },
  {Feature_FeatureMessageSecurityAssist5Bit, },
  {Feature_FeatureMessageSecurityAssist7Bit, },
  {Feature_FeatureMessageSecurityAssist8Bit, },
  {Feature_FeatureMessageSecurityAssist9Bit, },
  {Feature_FeatureMiscellaneousExtensionsBit, },
  {Feature_FeatureMiscellaneousExtensions2Bit, },
  {Feature_FeatureMiscellaneousExtensions3Bit, },
  {Feature_FeaturePopulationCountBit, },
  {Feature_FeatureProcessorAssistBit, },
  {Feature_FeatureResetReferenceBitsMultipleBit, },
  {Feature_FeatureTransactionalExecutionBit, },
  {Feature_FeatureVectorBit, },
  {Feature_FeatureVectorEnhancements1Bit, },
  {Feature_FeatureVectorEnhancements2Bit, },
  {Feature_FeatureVectorPackedDecimalBit, },
  {Feature_FeatureVectorPackedDecimalEnhancementBit, },
  {Feature_FeatureHighWordBit, Feature_FeatureDistinctOpsBit, },
};
#endif // NDEBUG

void SystemZMCCodeEmitter::verifyInstructionPredicates(
    const MCInst &Inst, const FeatureBitset &AvailableFeatures) const {
#ifndef NDEBUG
  static uint8_t RequiredFeaturesRefs[] = {
    CEFBS_None, // PHI = 0
    CEFBS_None, // INLINEASM = 1
    CEFBS_None, // INLINEASM_BR = 2
    CEFBS_None, // CFI_INSTRUCTION = 3
    CEFBS_None, // EH_LABEL = 4
    CEFBS_None, // GC_LABEL = 5
    CEFBS_None, // ANNOTATION_LABEL = 6
    CEFBS_None, // KILL = 7
    CEFBS_None, // EXTRACT_SUBREG = 8
    CEFBS_None, // INSERT_SUBREG = 9
    CEFBS_None, // IMPLICIT_DEF = 10
    CEFBS_None, // SUBREG_TO_REG = 11
    CEFBS_None, // COPY_TO_REGCLASS = 12
    CEFBS_None, // DBG_VALUE = 13
    CEFBS_None, // DBG_LABEL = 14
    CEFBS_None, // REG_SEQUENCE = 15
    CEFBS_None, // COPY = 16
    CEFBS_None, // BUNDLE = 17
    CEFBS_None, // LIFETIME_START = 18
    CEFBS_None, // LIFETIME_END = 19
    CEFBS_None, // STACKMAP = 20
    CEFBS_None, // FENTRY_CALL = 21
    CEFBS_None, // PATCHPOINT = 22
    CEFBS_None, // LOAD_STACK_GUARD = 23
    CEFBS_None, // STATEPOINT = 24
    CEFBS_None, // LOCAL_ESCAPE = 25
    CEFBS_None, // FAULTING_OP = 26
    CEFBS_None, // PATCHABLE_OP = 27
    CEFBS_None, // PATCHABLE_FUNCTION_ENTER = 28
    CEFBS_None, // PATCHABLE_RET = 29
    CEFBS_None, // PATCHABLE_FUNCTION_EXIT = 30
    CEFBS_None, // PATCHABLE_TAIL_CALL = 31
    CEFBS_None, // PATCHABLE_EVENT_CALL = 32
    CEFBS_None, // PATCHABLE_TYPED_EVENT_CALL = 33
    CEFBS_None, // ICALL_BRANCH_FUNNEL = 34
    CEFBS_None, // G_ADD = 35
    CEFBS_None, // G_SUB = 36
    CEFBS_None, // G_MUL = 37
    CEFBS_None, // G_SDIV = 38
    CEFBS_None, // G_UDIV = 39
    CEFBS_None, // G_SREM = 40
    CEFBS_None, // G_UREM = 41
    CEFBS_None, // G_AND = 42
    CEFBS_None, // G_OR = 43
    CEFBS_None, // G_XOR = 44
    CEFBS_None, // G_IMPLICIT_DEF = 45
    CEFBS_None, // G_PHI = 46
    CEFBS_None, // G_FRAME_INDEX = 47
    CEFBS_None, // G_GLOBAL_VALUE = 48
    CEFBS_None, // G_EXTRACT = 49
    CEFBS_None, // G_UNMERGE_VALUES = 50
    CEFBS_None, // G_INSERT = 51
    CEFBS_None, // G_MERGE_VALUES = 52
    CEFBS_None, // G_BUILD_VECTOR = 53
    CEFBS_None, // G_BUILD_VECTOR_TRUNC = 54
    CEFBS_None, // G_CONCAT_VECTORS = 55
    CEFBS_None, // G_PTRTOINT = 56
    CEFBS_None, // G_INTTOPTR = 57
    CEFBS_None, // G_BITCAST = 58
    CEFBS_None, // G_INTRINSIC_TRUNC = 59
    CEFBS_None, // G_INTRINSIC_ROUND = 60
    CEFBS_None, // G_READCYCLECOUNTER = 61
    CEFBS_None, // G_LOAD = 62
    CEFBS_None, // G_SEXTLOAD = 63
    CEFBS_None, // G_ZEXTLOAD = 64
    CEFBS_None, // G_INDEXED_LOAD = 65
    CEFBS_None, // G_INDEXED_SEXTLOAD = 66
    CEFBS_None, // G_INDEXED_ZEXTLOAD = 67
    CEFBS_None, // G_STORE = 68
    CEFBS_None, // G_INDEXED_STORE = 69
    CEFBS_None, // G_ATOMIC_CMPXCHG_WITH_SUCCESS = 70
    CEFBS_None, // G_ATOMIC_CMPXCHG = 71
    CEFBS_None, // G_ATOMICRMW_XCHG = 72
    CEFBS_None, // G_ATOMICRMW_ADD = 73
    CEFBS_None, // G_ATOMICRMW_SUB = 74
    CEFBS_None, // G_ATOMICRMW_AND = 75
    CEFBS_None, // G_ATOMICRMW_NAND = 76
    CEFBS_None, // G_ATOMICRMW_OR = 77
    CEFBS_None, // G_ATOMICRMW_XOR = 78
    CEFBS_None, // G_ATOMICRMW_MAX = 79
    CEFBS_None, // G_ATOMICRMW_MIN = 80
    CEFBS_None, // G_ATOMICRMW_UMAX = 81
    CEFBS_None, // G_ATOMICRMW_UMIN = 82
    CEFBS_None, // G_ATOMICRMW_FADD = 83
    CEFBS_None, // G_ATOMICRMW_FSUB = 84
    CEFBS_None, // G_FENCE = 85
    CEFBS_None, // G_BRCOND = 86
    CEFBS_None, // G_BRINDIRECT = 87
    CEFBS_None, // G_INTRINSIC = 88
    CEFBS_None, // G_INTRINSIC_W_SIDE_EFFECTS = 89
    CEFBS_None, // G_ANYEXT = 90
    CEFBS_None, // G_TRUNC = 91
    CEFBS_None, // G_CONSTANT = 92
    CEFBS_None, // G_FCONSTANT = 93
    CEFBS_None, // G_VASTART = 94
    CEFBS_None, // G_VAARG = 95
    CEFBS_None, // G_SEXT = 96
    CEFBS_None, // G_SEXT_INREG = 97
    CEFBS_None, // G_ZEXT = 98
    CEFBS_None, // G_SHL = 99
    CEFBS_None, // G_LSHR = 100
    CEFBS_None, // G_ASHR = 101
    CEFBS_None, // G_ICMP = 102
    CEFBS_None, // G_FCMP = 103
    CEFBS_None, // G_SELECT = 104
    CEFBS_None, // G_UADDO = 105
    CEFBS_None, // G_UADDE = 106
    CEFBS_None, // G_USUBO = 107
    CEFBS_None, // G_USUBE = 108
    CEFBS_None, // G_SADDO = 109
    CEFBS_None, // G_SADDE = 110
    CEFBS_None, // G_SSUBO = 111
    CEFBS_None, // G_SSUBE = 112
    CEFBS_None, // G_UMULO = 113
    CEFBS_None, // G_SMULO = 114
    CEFBS_None, // G_UMULH = 115
    CEFBS_None, // G_SMULH = 116
    CEFBS_None, // G_FADD = 117
    CEFBS_None, // G_FSUB = 118
    CEFBS_None, // G_FMUL = 119
    CEFBS_None, // G_FMA = 120
    CEFBS_None, // G_FMAD = 121
    CEFBS_None, // G_FDIV = 122
    CEFBS_None, // G_FREM = 123
    CEFBS_None, // G_FPOW = 124
    CEFBS_None, // G_FEXP = 125
    CEFBS_None, // G_FEXP2 = 126
    CEFBS_None, // G_FLOG = 127
    CEFBS_None, // G_FLOG2 = 128
    CEFBS_None, // G_FLOG10 = 129
    CEFBS_None, // G_FNEG = 130
    CEFBS_None, // G_FPEXT = 131
    CEFBS_None, // G_FPTRUNC = 132
    CEFBS_None, // G_FPTOSI = 133
    CEFBS_None, // G_FPTOUI = 134
    CEFBS_None, // G_SITOFP = 135
    CEFBS_None, // G_UITOFP = 136
    CEFBS_None, // G_FABS = 137
    CEFBS_None, // G_FCOPYSIGN = 138
    CEFBS_None, // G_FCANONICALIZE = 139
    CEFBS_None, // G_FMINNUM = 140
    CEFBS_None, // G_FMAXNUM = 141
    CEFBS_None, // G_FMINNUM_IEEE = 142
    CEFBS_None, // G_FMAXNUM_IEEE = 143
    CEFBS_None, // G_FMINIMUM = 144
    CEFBS_None, // G_FMAXIMUM = 145
    CEFBS_None, // G_PTR_ADD = 146
    CEFBS_None, // G_PTR_MASK = 147
    CEFBS_None, // G_SMIN = 148
    CEFBS_None, // G_SMAX = 149
    CEFBS_None, // G_UMIN = 150
    CEFBS_None, // G_UMAX = 151
    CEFBS_None, // G_BR = 152
    CEFBS_None, // G_BRJT = 153
    CEFBS_None, // G_INSERT_VECTOR_ELT = 154
    CEFBS_None, // G_EXTRACT_VECTOR_ELT = 155
    CEFBS_None, // G_SHUFFLE_VECTOR = 156
    CEFBS_None, // G_CTTZ = 157
    CEFBS_None, // G_CTTZ_ZERO_UNDEF = 158
    CEFBS_None, // G_CTLZ = 159
    CEFBS_None, // G_CTLZ_ZERO_UNDEF = 160
    CEFBS_None, // G_CTPOP = 161
    CEFBS_None, // G_BSWAP = 162
    CEFBS_None, // G_BITREVERSE = 163
    CEFBS_None, // G_FCEIL = 164
    CEFBS_None, // G_FCOS = 165
    CEFBS_None, // G_FSIN = 166
    CEFBS_None, // G_FSQRT = 167
    CEFBS_None, // G_FFLOOR = 168
    CEFBS_None, // G_FRINT = 169
    CEFBS_None, // G_FNEARBYINT = 170
    CEFBS_None, // G_ADDRSPACE_CAST = 171
    CEFBS_None, // G_BLOCK_ADDR = 172
    CEFBS_None, // G_JUMP_TABLE = 173
    CEFBS_None, // G_DYN_STACKALLOC = 174
    CEFBS_None, // ADJCALLSTACKDOWN = 175
    CEFBS_None, // ADJCALLSTACKUP = 176
    CEFBS_None, // ADJDYNALLOC = 177
    CEFBS_None, // AEXT128 = 178
    CEFBS_FeatureHighWord, // AFIMux = 179
    CEFBS_None, // AG_MemFoldPseudo = 180
    CEFBS_FeatureHighWord, // AHIMux = 181
    CEFBS_FeatureHighWord_FeatureDistinctOps, // AHIMuxK = 182
    CEFBS_None, // ALG_MemFoldPseudo = 183
    CEFBS_None, // AL_MemFoldPseudo = 184
    CEFBS_None, // ATOMIC_CMP_SWAPW = 185
    CEFBS_None, // ATOMIC_LOADW_AFI = 186
    CEFBS_None, // ATOMIC_LOADW_AR = 187
    CEFBS_None, // ATOMIC_LOADW_MAX = 188
    CEFBS_None, // ATOMIC_LOADW_MIN = 189
    CEFBS_None, // ATOMIC_LOADW_NILH = 190
    CEFBS_None, // ATOMIC_LOADW_NILHi = 191
    CEFBS_None, // ATOMIC_LOADW_NR = 192
    CEFBS_None, // ATOMIC_LOADW_NRi = 193
    CEFBS_None, // ATOMIC_LOADW_OILH = 194
    CEFBS_None, // ATOMIC_LOADW_OR = 195
    CEFBS_None, // ATOMIC_LOADW_SR = 196
    CEFBS_None, // ATOMIC_LOADW_UMAX = 197
    CEFBS_None, // ATOMIC_LOADW_UMIN = 198
    CEFBS_None, // ATOMIC_LOADW_XILF = 199
    CEFBS_None, // ATOMIC_LOADW_XR = 200
    CEFBS_None, // ATOMIC_LOAD_AFI = 201
    CEFBS_None, // ATOMIC_LOAD_AGFI = 202
    CEFBS_None, // ATOMIC_LOAD_AGHI = 203
    CEFBS_None, // ATOMIC_LOAD_AGR = 204
    CEFBS_None, // ATOMIC_LOAD_AHI = 205
    CEFBS_None, // ATOMIC_LOAD_AR = 206
    CEFBS_None, // ATOMIC_LOAD_MAX_32 = 207
    CEFBS_None, // ATOMIC_LOAD_MAX_64 = 208
    CEFBS_None, // ATOMIC_LOAD_MIN_32 = 209
    CEFBS_None, // ATOMIC_LOAD_MIN_64 = 210
    CEFBS_None, // ATOMIC_LOAD_NGR = 211
    CEFBS_None, // ATOMIC_LOAD_NGRi = 212
    CEFBS_None, // ATOMIC_LOAD_NIHF64 = 213
    CEFBS_None, // ATOMIC_LOAD_NIHF64i = 214
    CEFBS_None, // ATOMIC_LOAD_NIHH64 = 215
    CEFBS_None, // ATOMIC_LOAD_NIHH64i = 216
    CEFBS_None, // ATOMIC_LOAD_NIHL64 = 217
    CEFBS_None, // ATOMIC_LOAD_NIHL64i = 218
    CEFBS_None, // ATOMIC_LOAD_NILF = 219
    CEFBS_None, // ATOMIC_LOAD_NILF64 = 220
    CEFBS_None, // ATOMIC_LOAD_NILF64i = 221
    CEFBS_None, // ATOMIC_LOAD_NILFi = 222
    CEFBS_None, // ATOMIC_LOAD_NILH = 223
    CEFBS_None, // ATOMIC_LOAD_NILH64 = 224
    CEFBS_None, // ATOMIC_LOAD_NILH64i = 225
    CEFBS_None, // ATOMIC_LOAD_NILHi = 226
    CEFBS_None, // ATOMIC_LOAD_NILL = 227
    CEFBS_None, // ATOMIC_LOAD_NILL64 = 228
    CEFBS_None, // ATOMIC_LOAD_NILL64i = 229
    CEFBS_None, // ATOMIC_LOAD_NILLi = 230
    CEFBS_None, // ATOMIC_LOAD_NR = 231
    CEFBS_None, // ATOMIC_LOAD_NRi = 232
    CEFBS_None, // ATOMIC_LOAD_OGR = 233
    CEFBS_None, // ATOMIC_LOAD_OIHF64 = 234
    CEFBS_None, // ATOMIC_LOAD_OIHH64 = 235
    CEFBS_None, // ATOMIC_LOAD_OIHL64 = 236
    CEFBS_None, // ATOMIC_LOAD_OILF = 237
    CEFBS_None, // ATOMIC_LOAD_OILF64 = 238
    CEFBS_None, // ATOMIC_LOAD_OILH = 239
    CEFBS_None, // ATOMIC_LOAD_OILH64 = 240
    CEFBS_None, // ATOMIC_LOAD_OILL = 241
    CEFBS_None, // ATOMIC_LOAD_OILL64 = 242
    CEFBS_None, // ATOMIC_LOAD_OR = 243
    CEFBS_None, // ATOMIC_LOAD_SGR = 244
    CEFBS_None, // ATOMIC_LOAD_SR = 245
    CEFBS_None, // ATOMIC_LOAD_UMAX_32 = 246
    CEFBS_None, // ATOMIC_LOAD_UMAX_64 = 247
    CEFBS_None, // ATOMIC_LOAD_UMIN_32 = 248
    CEFBS_None, // ATOMIC_LOAD_UMIN_64 = 249
    CEFBS_None, // ATOMIC_LOAD_XGR = 250
    CEFBS_None, // ATOMIC_LOAD_XIHF64 = 251
    CEFBS_None, // ATOMIC_LOAD_XILF = 252
    CEFBS_None, // ATOMIC_LOAD_XILF64 = 253
    CEFBS_None, // ATOMIC_LOAD_XR = 254
    CEFBS_None, // ATOMIC_SWAPW = 255
    CEFBS_None, // ATOMIC_SWAP_32 = 256
    CEFBS_None, // ATOMIC_SWAP_64 = 257
    CEFBS_None, // A_MemFoldPseudo = 258
    CEFBS_FeatureHighWord, // CFIMux = 259
    CEFBS_None, // CGIBCall = 260
    CEFBS_None, // CGIBReturn = 261
    CEFBS_None, // CGRBCall = 262
    CEFBS_None, // CGRBReturn = 263
    CEFBS_FeatureHighWord, // CHIMux = 264
    CEFBS_None, // CIBCall = 265
    CEFBS_None, // CIBReturn = 266
    CEFBS_None, // CLCLoop = 267
    CEFBS_None, // CLCSequence = 268
    CEFBS_FeatureHighWord, // CLFIMux = 269
    CEFBS_None, // CLGIBCall = 270
    CEFBS_None, // CLGIBReturn = 271
    CEFBS_None, // CLGRBCall = 272
    CEFBS_None, // CLGRBReturn = 273
    CEFBS_None, // CLIBCall = 274
    CEFBS_None, // CLIBReturn = 275
    CEFBS_FeatureHighWord, // CLMux = 276
    CEFBS_None, // CLRBCall = 277
    CEFBS_None, // CLRBReturn = 278
    CEFBS_None, // CLSTLoop = 279
    CEFBS_FeatureHighWord, // CMux = 280
    CEFBS_None, // CRBCall = 281
    CEFBS_None, // CRBReturn = 282
    CEFBS_None, // CallBASR = 283
    CEFBS_None, // CallBCR = 284
    CEFBS_None, // CallBR = 285
    CEFBS_None, // CallBRASL = 286
    CEFBS_None, // CallBRCL = 287
    CEFBS_None, // CallJG = 288
    CEFBS_None, // CondReturn = 289
    CEFBS_None, // CondStore16 = 290
    CEFBS_None, // CondStore16Inv = 291
    CEFBS_FeatureHighWord, // CondStore16Mux = 292
    CEFBS_FeatureHighWord, // CondStore16MuxInv = 293
    CEFBS_None, // CondStore32 = 294
    CEFBS_None, // CondStore32Inv = 295
    CEFBS_FeatureLoadStoreOnCond2, // CondStore32Mux = 296
    CEFBS_FeatureLoadStoreOnCond2, // CondStore32MuxInv = 297
    CEFBS_None, // CondStore64 = 298
    CEFBS_None, // CondStore64Inv = 299
    CEFBS_None, // CondStore8 = 300
    CEFBS_None, // CondStore8Inv = 301
    CEFBS_FeatureHighWord, // CondStore8Mux = 302
    CEFBS_FeatureHighWord, // CondStore8MuxInv = 303
    CEFBS_None, // CondStoreF32 = 304
    CEFBS_None, // CondStoreF32Inv = 305
    CEFBS_None, // CondStoreF64 = 306
    CEFBS_None, // CondStoreF64Inv = 307
    CEFBS_None, // CondTrap = 308
    CEFBS_None, // GOT = 309
    CEFBS_FeatureHighWord, // IIFMux = 310
    CEFBS_None, // IIHF64 = 311
    CEFBS_None, // IIHH64 = 312
    CEFBS_None, // IIHL64 = 313
    CEFBS_FeatureHighWord, // IIHMux = 314
    CEFBS_None, // IILF64 = 315
    CEFBS_None, // IILH64 = 316
    CEFBS_None, // IILL64 = 317
    CEFBS_FeatureHighWord, // IILMux = 318
    CEFBS_None, // L128 = 319
    CEFBS_FeatureHighWord, // LBMux = 320
    CEFBS_FeatureVector, // LEFR = 321
    CEFBS_FeatureVector, // LFER = 322
    CEFBS_FeatureHighWord, // LHIMux = 323
    CEFBS_FeatureHighWord, // LHMux = 324
    CEFBS_FeatureHighWord, // LLCMux = 325
    CEFBS_FeatureHighWord, // LLCRMux = 326
    CEFBS_FeatureHighWord, // LLHMux = 327
    CEFBS_FeatureHighWord, // LLHRMux = 328
    CEFBS_FeatureHighWord, // LMux = 329
    CEFBS_FeatureLoadStoreOnCond2, // LOCHIMux = 330
    CEFBS_FeatureLoadStoreOnCond2, // LOCMux = 331
    CEFBS_FeatureLoadStoreOnCond2, // LOCRMux = 332
    CEFBS_None, // LTDBRCompare_VecPseudo = 333
    CEFBS_None, // LTEBRCompare_VecPseudo = 334
    CEFBS_None, // LTXBRCompare_VecPseudo = 335
    CEFBS_None, // LX = 336
    CEFBS_None, // MVCLoop = 337
    CEFBS_None, // MVCSequence = 338
    CEFBS_None, // MVSTLoop = 339
    CEFBS_None, // MemBarrier = 340
    CEFBS_None, // NCLoop = 341
    CEFBS_None, // NCSequence = 342
    CEFBS_None, // NG_MemFoldPseudo = 343
    CEFBS_FeatureHighWord, // NIFMux = 344
    CEFBS_None, // NIHF64 = 345
    CEFBS_None, // NIHH64 = 346
    CEFBS_None, // NIHL64 = 347
    CEFBS_FeatureHighWord, // NIHMux = 348
    CEFBS_None, // NILF64 = 349
    CEFBS_None, // NILH64 = 350
    CEFBS_None, // NILL64 = 351
    CEFBS_FeatureHighWord, // NILMux = 352
    CEFBS_None, // N_MemFoldPseudo = 353
    CEFBS_None, // OCLoop = 354
    CEFBS_None, // OCSequence = 355
    CEFBS_None, // OG_MemFoldPseudo = 356
    CEFBS_FeatureHighWord, // OIFMux = 357
    CEFBS_None, // OIHF64 = 358
    CEFBS_None, // OIHH64 = 359
    CEFBS_None, // OIHL64 = 360
    CEFBS_FeatureHighWord, // OIHMux = 361
    CEFBS_None, // OILF64 = 362
    CEFBS_None, // OILH64 = 363
    CEFBS_None, // OILL64 = 364
    CEFBS_FeatureHighWord, // OILMux = 365
    CEFBS_None, // O_MemFoldPseudo = 366
    CEFBS_None, // PAIR128 = 367
    CEFBS_FeatureHighWord, // RISBHH = 368
    CEFBS_FeatureHighWord, // RISBHL = 369
    CEFBS_FeatureHighWord, // RISBLH = 370
    CEFBS_FeatureHighWord, // RISBLL = 371
    CEFBS_FeatureHighWord, // RISBMux = 372
    CEFBS_None, // Return = 373
    CEFBS_FeatureMiscellaneousExtensions3, // SELRMux = 374
    CEFBS_None, // SG_MemFoldPseudo = 375
    CEFBS_None, // SLG_MemFoldPseudo = 376
    CEFBS_None, // SL_MemFoldPseudo = 377
    CEFBS_None, // SRSTLoop = 378
    CEFBS_None, // ST128 = 379
    CEFBS_FeatureHighWord, // STCMux = 380
    CEFBS_FeatureHighWord, // STHMux = 381
    CEFBS_FeatureHighWord, // STMux = 382
    CEFBS_FeatureLoadStoreOnCond2, // STOCMux = 383
    CEFBS_None, // STX = 384
    CEFBS_None, // S_MemFoldPseudo = 385
    CEFBS_None, // Select32 = 386
    CEFBS_None, // Select64 = 387
    CEFBS_None, // SelectF128 = 388
    CEFBS_None, // SelectF32 = 389
    CEFBS_None, // SelectF64 = 390
    CEFBS_FeatureVectorEnhancements1, // SelectVR128 = 391
    CEFBS_FeatureVector, // SelectVR32 = 392
    CEFBS_FeatureVector, // SelectVR64 = 393
    CEFBS_None, // Serialize = 394
    CEFBS_FeatureTransactionalExecution, // TBEGIN_nofloat = 395
    CEFBS_None, // TLS_GDCALL = 396
    CEFBS_None, // TLS_LDCALL = 397
    CEFBS_None, // TMHH64 = 398
    CEFBS_None, // TMHL64 = 399
    CEFBS_FeatureHighWord, // TMHMux = 400
    CEFBS_None, // TMLH64 = 401
    CEFBS_None, // TMLL64 = 402
    CEFBS_FeatureHighWord, // TMLMux = 403
    CEFBS_None, // Trap = 404
    CEFBS_FeatureVector, // VL32 = 405
    CEFBS_FeatureVector, // VL64 = 406
    CEFBS_FeatureVector, // VLR32 = 407
    CEFBS_FeatureVector, // VLR64 = 408
    CEFBS_FeatureVector, // VLVGP32 = 409
    CEFBS_FeatureVector, // VST32 = 410
    CEFBS_FeatureVector, // VST64 = 411
    CEFBS_None, // XCLoop = 412
    CEFBS_None, // XCSequence = 413
    CEFBS_None, // XG_MemFoldPseudo = 414
    CEFBS_FeatureHighWord, // XIFMux = 415
    CEFBS_None, // XIHF64 = 416
    CEFBS_None, // XILF64 = 417
    CEFBS_None, // X_MemFoldPseudo = 418
    CEFBS_None, // ZEXT128 = 419
    CEFBS_None, // A = 420
    CEFBS_None, // AD = 421
    CEFBS_None, // ADB = 422
    CEFBS_None, // ADBR = 423
    CEFBS_None, // ADR = 424
    CEFBS_None, // ADTR = 425
    CEFBS_FeatureFPExtension, // ADTRA = 426
    CEFBS_None, // AE = 427
    CEFBS_None, // AEB = 428
    CEFBS_None, // AEBR = 429
    CEFBS_None, // AER = 430
    CEFBS_None, // AFI = 431
    CEFBS_None, // AG = 432
    CEFBS_None, // AGF = 433
    CEFBS_None, // AGFI = 434
    CEFBS_None, // AGFR = 435
    CEFBS_FeatureMiscellaneousExtensions2, // AGH = 436
    CEFBS_None, // AGHI = 437
    CEFBS_FeatureDistinctOps, // AGHIK = 438
    CEFBS_None, // AGR = 439
    CEFBS_FeatureDistinctOps, // AGRK = 440
    CEFBS_None, // AGSI = 441
    CEFBS_None, // AH = 442
    CEFBS_FeatureHighWord, // AHHHR = 443
    CEFBS_FeatureHighWord, // AHHLR = 444
    CEFBS_None, // AHI = 445
    CEFBS_FeatureDistinctOps, // AHIK = 446
    CEFBS_None, // AHY = 447
    CEFBS_FeatureHighWord, // AIH = 448
    CEFBS_None, // AL = 449
    CEFBS_None, // ALC = 450
    CEFBS_None, // ALCG = 451
    CEFBS_None, // ALCGR = 452
    CEFBS_None, // ALCR = 453
    CEFBS_None, // ALFI = 454
    CEFBS_None, // ALG = 455
    CEFBS_None, // ALGF = 456
    CEFBS_None, // ALGFI = 457
    CEFBS_None, // ALGFR = 458
    CEFBS_FeatureDistinctOps, // ALGHSIK = 459
    CEFBS_None, // ALGR = 460
    CEFBS_FeatureDistinctOps, // ALGRK = 461
    CEFBS_None, // ALGSI = 462
    CEFBS_FeatureHighWord, // ALHHHR = 463
    CEFBS_FeatureHighWord, // ALHHLR = 464
    CEFBS_FeatureDistinctOps, // ALHSIK = 465
    CEFBS_None, // ALR = 466
    CEFBS_FeatureDistinctOps, // ALRK = 467
    CEFBS_None, // ALSI = 468
    CEFBS_FeatureHighWord, // ALSIH = 469
    CEFBS_FeatureHighWord, // ALSIHN = 470
    CEFBS_None, // ALY = 471
    CEFBS_None, // AP = 472
    CEFBS_None, // AR = 473
    CEFBS_FeatureDistinctOps, // ARK = 474
    CEFBS_None, // ASI = 475
    CEFBS_None, // AU = 476
    CEFBS_None, // AUR = 477
    CEFBS_None, // AW = 478
    CEFBS_None, // AWR = 479
    CEFBS_None, // AXBR = 480
    CEFBS_None, // AXR = 481
    CEFBS_None, // AXTR = 482
    CEFBS_FeatureFPExtension, // AXTRA = 483
    CEFBS_None, // AY = 484
    CEFBS_None, // B = 485
    CEFBS_None, // BAKR = 486
    CEFBS_None, // BAL = 487
    CEFBS_None, // BALR = 488
    CEFBS_None, // BAS = 489
    CEFBS_None, // BASR = 490
    CEFBS_None, // BASSM = 491
    CEFBS_None, // BAsmE = 492
    CEFBS_None, // BAsmH = 493
    CEFBS_None, // BAsmHE = 494
    CEFBS_None, // BAsmL = 495
    CEFBS_None, // BAsmLE = 496
    CEFBS_None, // BAsmLH = 497
    CEFBS_None, // BAsmM = 498
    CEFBS_None, // BAsmNE = 499
    CEFBS_None, // BAsmNH = 500
    CEFBS_None, // BAsmNHE = 501
    CEFBS_None, // BAsmNL = 502
    CEFBS_None, // BAsmNLE = 503
    CEFBS_None, // BAsmNLH = 504
    CEFBS_None, // BAsmNM = 505
    CEFBS_None, // BAsmNO = 506
    CEFBS_None, // BAsmNP = 507
    CEFBS_None, // BAsmNZ = 508
    CEFBS_None, // BAsmO = 509
    CEFBS_None, // BAsmP = 510
    CEFBS_None, // BAsmZ = 511
    CEFBS_None, // BC = 512
    CEFBS_None, // BCAsm = 513
    CEFBS_None, // BCR = 514
    CEFBS_None, // BCRAsm = 515
    CEFBS_None, // BCT = 516
    CEFBS_None, // BCTG = 517
    CEFBS_None, // BCTGR = 518
    CEFBS_None, // BCTR = 519
    CEFBS_FeatureMiscellaneousExtensions2, // BI = 520
    CEFBS_FeatureMiscellaneousExtensions2, // BIAsmE = 521
    CEFBS_FeatureMiscellaneousExtensions2, // BIAsmH = 522
    CEFBS_FeatureMiscellaneousExtensions2, // BIAsmHE = 523
    CEFBS_FeatureMiscellaneousExtensions2, // BIAsmL = 524
    CEFBS_FeatureMiscellaneousExtensions2, // BIAsmLE = 525
    CEFBS_FeatureMiscellaneousExtensions2, // BIAsmLH = 526
    CEFBS_FeatureMiscellaneousExtensions2, // BIAsmM = 527
    CEFBS_FeatureMiscellaneousExtensions2, // BIAsmNE = 528
    CEFBS_FeatureMiscellaneousExtensions2, // BIAsmNH = 529
    CEFBS_FeatureMiscellaneousExtensions2, // BIAsmNHE = 530
    CEFBS_FeatureMiscellaneousExtensions2, // BIAsmNL = 531
    CEFBS_FeatureMiscellaneousExtensions2, // BIAsmNLE = 532
    CEFBS_FeatureMiscellaneousExtensions2, // BIAsmNLH = 533
    CEFBS_FeatureMiscellaneousExtensions2, // BIAsmNM = 534
    CEFBS_FeatureMiscellaneousExtensions2, // BIAsmNO = 535
    CEFBS_FeatureMiscellaneousExtensions2, // BIAsmNP = 536
    CEFBS_FeatureMiscellaneousExtensions2, // BIAsmNZ = 537
    CEFBS_FeatureMiscellaneousExtensions2, // BIAsmO = 538
    CEFBS_FeatureMiscellaneousExtensions2, // BIAsmP = 539
    CEFBS_FeatureMiscellaneousExtensions2, // BIAsmZ = 540
    CEFBS_FeatureMiscellaneousExtensions2, // BIC = 541
    CEFBS_FeatureMiscellaneousExtensions2, // BICAsm = 542
    CEFBS_FeatureExecutionHint, // BPP = 543
    CEFBS_FeatureExecutionHint, // BPRP = 544
    CEFBS_None, // BR = 545
    CEFBS_None, // BRAS = 546
    CEFBS_None, // BRASL = 547
    CEFBS_None, // BRAsmE = 548
    CEFBS_None, // BRAsmH = 549
    CEFBS_None, // BRAsmHE = 550
    CEFBS_None, // BRAsmL = 551
    CEFBS_None, // BRAsmLE = 552
    CEFBS_None, // BRAsmLH = 553
    CEFBS_None, // BRAsmM = 554
    CEFBS_None, // BRAsmNE = 555
    CEFBS_None, // BRAsmNH = 556
    CEFBS_None, // BRAsmNHE = 557
    CEFBS_None, // BRAsmNL = 558
    CEFBS_None, // BRAsmNLE = 559
    CEFBS_None, // BRAsmNLH = 560
    CEFBS_None, // BRAsmNM = 561
    CEFBS_None, // BRAsmNO = 562
    CEFBS_None, // BRAsmNP = 563
    CEFBS_None, // BRAsmNZ = 564
    CEFBS_None, // BRAsmO = 565
    CEFBS_None, // BRAsmP = 566
    CEFBS_None, // BRAsmZ = 567
    CEFBS_None, // BRC = 568
    CEFBS_None, // BRCAsm = 569
    CEFBS_None, // BRCL = 570
    CEFBS_None, // BRCLAsm = 571
    CEFBS_None, // BRCT = 572
    CEFBS_None, // BRCTG = 573
    CEFBS_FeatureHighWord, // BRCTH = 574
    CEFBS_None, // BRXH = 575
    CEFBS_None, // BRXHG = 576
    CEFBS_None, // BRXLE = 577
    CEFBS_None, // BRXLG = 578
    CEFBS_None, // BSA = 579
    CEFBS_None, // BSG = 580
    CEFBS_None, // BSM = 581
    CEFBS_None, // BXH = 582
    CEFBS_None, // BXHG = 583
    CEFBS_None, // BXLE = 584
    CEFBS_None, // BXLEG = 585
    CEFBS_None, // C = 586
    CEFBS_None, // CD = 587
    CEFBS_None, // CDB = 588
    CEFBS_None, // CDBR = 589
    CEFBS_None, // CDFBR = 590
    CEFBS_FeatureFPExtension, // CDFBRA = 591
    CEFBS_None, // CDFR = 592
    CEFBS_FeatureFPExtension, // CDFTR = 593
    CEFBS_None, // CDGBR = 594
    CEFBS_FeatureFPExtension, // CDGBRA = 595
    CEFBS_None, // CDGR = 596
    CEFBS_None, // CDGTR = 597
    CEFBS_FeatureFPExtension, // CDGTRA = 598
    CEFBS_FeatureFPExtension, // CDLFBR = 599
    CEFBS_FeatureFPExtension, // CDLFTR = 600
    CEFBS_FeatureFPExtension, // CDLGBR = 601
    CEFBS_FeatureFPExtension, // CDLGTR = 602
    CEFBS_FeatureDFPPackedConversion, // CDPT = 603
    CEFBS_None, // CDR = 604
    CEFBS_None, // CDS = 605
    CEFBS_None, // CDSG = 606
    CEFBS_None, // CDSTR = 607
    CEFBS_None, // CDSY = 608
    CEFBS_None, // CDTR = 609
    CEFBS_None, // CDUTR = 610
    CEFBS_FeatureDFPZonedConversion, // CDZT = 611
    CEFBS_None, // CE = 612
    CEFBS_None, // CEB = 613
    CEFBS_None, // CEBR = 614
    CEFBS_None, // CEDTR = 615
    CEFBS_None, // CEFBR = 616
    CEFBS_FeatureFPExtension, // CEFBRA = 617
    CEFBS_None, // CEFR = 618
    CEFBS_None, // CEGBR = 619
    CEFBS_FeatureFPExtension, // CEGBRA = 620
    CEFBS_None, // CEGR = 621
    CEFBS_FeatureFPExtension, // CELFBR = 622
    CEFBS_FeatureFPExtension, // CELGBR = 623
    CEFBS_None, // CER = 624
    CEFBS_None, // CEXTR = 625
    CEFBS_None, // CFC = 626
    CEFBS_None, // CFDBR = 627
    CEFBS_FeatureFPExtension, // CFDBRA = 628
    CEFBS_None, // CFDR = 629
    CEFBS_FeatureFPExtension, // CFDTR = 630
    CEFBS_None, // CFEBR = 631
    CEFBS_FeatureFPExtension, // CFEBRA = 632
    CEFBS_None, // CFER = 633
    CEFBS_None, // CFI = 634
    CEFBS_None, // CFXBR = 635
    CEFBS_FeatureFPExtension, // CFXBRA = 636
    CEFBS_None, // CFXR = 637
    CEFBS_FeatureFPExtension, // CFXTR = 638
    CEFBS_None, // CG = 639
    CEFBS_None, // CGDBR = 640
    CEFBS_FeatureFPExtension, // CGDBRA = 641
    CEFBS_None, // CGDR = 642
    CEFBS_None, // CGDTR = 643
    CEFBS_FeatureFPExtension, // CGDTRA = 644
    CEFBS_None, // CGEBR = 645
    CEFBS_FeatureFPExtension, // CGEBRA = 646
    CEFBS_None, // CGER = 647
    CEFBS_None, // CGF = 648
    CEFBS_None, // CGFI = 649
    CEFBS_None, // CGFR = 650
    CEFBS_None, // CGFRL = 651
    CEFBS_None, // CGH = 652
    CEFBS_None, // CGHI = 653
    CEFBS_None, // CGHRL = 654
    CEFBS_None, // CGHSI = 655
    CEFBS_None, // CGIB = 656
    CEFBS_None, // CGIBAsm = 657
    CEFBS_None, // CGIBAsmE = 658
    CEFBS_None, // CGIBAsmH = 659
    CEFBS_None, // CGIBAsmHE = 660
    CEFBS_None, // CGIBAsmL = 661
    CEFBS_None, // CGIBAsmLE = 662
    CEFBS_None, // CGIBAsmLH = 663
    CEFBS_None, // CGIBAsmNE = 664
    CEFBS_None, // CGIBAsmNH = 665
    CEFBS_None, // CGIBAsmNHE = 666
    CEFBS_None, // CGIBAsmNL = 667
    CEFBS_None, // CGIBAsmNLE = 668
    CEFBS_None, // CGIBAsmNLH = 669
    CEFBS_None, // CGIJ = 670
    CEFBS_None, // CGIJAsm = 671
    CEFBS_None, // CGIJAsmE = 672
    CEFBS_None, // CGIJAsmH = 673
    CEFBS_None, // CGIJAsmHE = 674
    CEFBS_None, // CGIJAsmL = 675
    CEFBS_None, // CGIJAsmLE = 676
    CEFBS_None, // CGIJAsmLH = 677
    CEFBS_None, // CGIJAsmNE = 678
    CEFBS_None, // CGIJAsmNH = 679
    CEFBS_None, // CGIJAsmNHE = 680
    CEFBS_None, // CGIJAsmNL = 681
    CEFBS_None, // CGIJAsmNLE = 682
    CEFBS_None, // CGIJAsmNLH = 683
    CEFBS_None, // CGIT = 684
    CEFBS_None, // CGITAsm = 685
    CEFBS_None, // CGITAsmE = 686
    CEFBS_None, // CGITAsmH = 687
    CEFBS_None, // CGITAsmHE = 688
    CEFBS_None, // CGITAsmL = 689
    CEFBS_None, // CGITAsmLE = 690
    CEFBS_None, // CGITAsmLH = 691
    CEFBS_None, // CGITAsmNE = 692
    CEFBS_None, // CGITAsmNH = 693
    CEFBS_None, // CGITAsmNHE = 694
    CEFBS_None, // CGITAsmNL = 695
    CEFBS_None, // CGITAsmNLE = 696
    CEFBS_None, // CGITAsmNLH = 697
    CEFBS_None, // CGR = 698
    CEFBS_None, // CGRB = 699
    CEFBS_None, // CGRBAsm = 700
    CEFBS_None, // CGRBAsmE = 701
    CEFBS_None, // CGRBAsmH = 702
    CEFBS_None, // CGRBAsmHE = 703
    CEFBS_None, // CGRBAsmL = 704
    CEFBS_None, // CGRBAsmLE = 705
    CEFBS_None, // CGRBAsmLH = 706
    CEFBS_None, // CGRBAsmNE = 707
    CEFBS_None, // CGRBAsmNH = 708
    CEFBS_None, // CGRBAsmNHE = 709
    CEFBS_None, // CGRBAsmNL = 710
    CEFBS_None, // CGRBAsmNLE = 711
    CEFBS_None, // CGRBAsmNLH = 712
    CEFBS_None, // CGRJ = 713
    CEFBS_None, // CGRJAsm = 714
    CEFBS_None, // CGRJAsmE = 715
    CEFBS_None, // CGRJAsmH = 716
    CEFBS_None, // CGRJAsmHE = 717
    CEFBS_None, // CGRJAsmL = 718
    CEFBS_None, // CGRJAsmLE = 719
    CEFBS_None, // CGRJAsmLH = 720
    CEFBS_None, // CGRJAsmNE = 721
    CEFBS_None, // CGRJAsmNH = 722
    CEFBS_None, // CGRJAsmNHE = 723
    CEFBS_None, // CGRJAsmNL = 724
    CEFBS_None, // CGRJAsmNLE = 725
    CEFBS_None, // CGRJAsmNLH = 726
    CEFBS_None, // CGRL = 727
    CEFBS_None, // CGRT = 728
    CEFBS_None, // CGRTAsm = 729
    CEFBS_None, // CGRTAsmE = 730
    CEFBS_None, // CGRTAsmH = 731
    CEFBS_None, // CGRTAsmHE = 732
    CEFBS_None, // CGRTAsmL = 733
    CEFBS_None, // CGRTAsmLE = 734
    CEFBS_None, // CGRTAsmLH = 735
    CEFBS_None, // CGRTAsmNE = 736
    CEFBS_None, // CGRTAsmNH = 737
    CEFBS_None, // CGRTAsmNHE = 738
    CEFBS_None, // CGRTAsmNL = 739
    CEFBS_None, // CGRTAsmNLE = 740
    CEFBS_None, // CGRTAsmNLH = 741
    CEFBS_None, // CGXBR = 742
    CEFBS_FeatureFPExtension, // CGXBRA = 743
    CEFBS_None, // CGXR = 744
    CEFBS_None, // CGXTR = 745
    CEFBS_FeatureFPExtension, // CGXTRA = 746
    CEFBS_None, // CH = 747
    CEFBS_FeatureHighWord, // CHF = 748
    CEFBS_FeatureHighWord, // CHHR = 749
    CEFBS_None, // CHHSI = 750
    CEFBS_None, // CHI = 751
    CEFBS_FeatureHighWord, // CHLR = 752
    CEFBS_None, // CHRL = 753
    CEFBS_None, // CHSI = 754
    CEFBS_None, // CHY = 755
    CEFBS_None, // CIB = 756
    CEFBS_None, // CIBAsm = 757
    CEFBS_None, // CIBAsmE = 758
    CEFBS_None, // CIBAsmH = 759
    CEFBS_None, // CIBAsmHE = 760
    CEFBS_None, // CIBAsmL = 761
    CEFBS_None, // CIBAsmLE = 762
    CEFBS_None, // CIBAsmLH = 763
    CEFBS_None, // CIBAsmNE = 764
    CEFBS_None, // CIBAsmNH = 765
    CEFBS_None, // CIBAsmNHE = 766
    CEFBS_None, // CIBAsmNL = 767
    CEFBS_None, // CIBAsmNLE = 768
    CEFBS_None, // CIBAsmNLH = 769
    CEFBS_FeatureHighWord, // CIH = 770
    CEFBS_None, // CIJ = 771
    CEFBS_None, // CIJAsm = 772
    CEFBS_None, // CIJAsmE = 773
    CEFBS_None, // CIJAsmH = 774
    CEFBS_None, // CIJAsmHE = 775
    CEFBS_None, // CIJAsmL = 776
    CEFBS_None, // CIJAsmLE = 777
    CEFBS_None, // CIJAsmLH = 778
    CEFBS_None, // CIJAsmNE = 779
    CEFBS_None, // CIJAsmNH = 780
    CEFBS_None, // CIJAsmNHE = 781
    CEFBS_None, // CIJAsmNL = 782
    CEFBS_None, // CIJAsmNLE = 783
    CEFBS_None, // CIJAsmNLH = 784
    CEFBS_None, // CIT = 785
    CEFBS_None, // CITAsm = 786
    CEFBS_None, // CITAsmE = 787
    CEFBS_None, // CITAsmH = 788
    CEFBS_None, // CITAsmHE = 789
    CEFBS_None, // CITAsmL = 790
    CEFBS_None, // CITAsmLE = 791
    CEFBS_None, // CITAsmLH = 792
    CEFBS_None, // CITAsmNE = 793
    CEFBS_None, // CITAsmNH = 794
    CEFBS_None, // CITAsmNHE = 795
    CEFBS_None, // CITAsmNL = 796
    CEFBS_None, // CITAsmNLE = 797
    CEFBS_None, // CITAsmNLH = 798
    CEFBS_None, // CKSM = 799
    CEFBS_None, // CL = 800
    CEFBS_None, // CLC = 801
    CEFBS_None, // CLCL = 802
    CEFBS_None, // CLCLE = 803
    CEFBS_None, // CLCLU = 804
    CEFBS_FeatureFPExtension, // CLFDBR = 805
    CEFBS_FeatureFPExtension, // CLFDTR = 806
    CEFBS_FeatureFPExtension, // CLFEBR = 807
    CEFBS_None, // CLFHSI = 808
    CEFBS_None, // CLFI = 809
    CEFBS_None, // CLFIT = 810
    CEFBS_None, // CLFITAsm = 811
    CEFBS_None, // CLFITAsmE = 812
    CEFBS_None, // CLFITAsmH = 813
    CEFBS_None, // CLFITAsmHE = 814
    CEFBS_None, // CLFITAsmL = 815
    CEFBS_None, // CLFITAsmLE = 816
    CEFBS_None, // CLFITAsmLH = 817
    CEFBS_None, // CLFITAsmNE = 818
    CEFBS_None, // CLFITAsmNH = 819
    CEFBS_None, // CLFITAsmNHE = 820
    CEFBS_None, // CLFITAsmNL = 821
    CEFBS_None, // CLFITAsmNLE = 822
    CEFBS_None, // CLFITAsmNLH = 823
    CEFBS_FeatureFPExtension, // CLFXBR = 824
    CEFBS_FeatureFPExtension, // CLFXTR = 825
    CEFBS_None, // CLG = 826
    CEFBS_FeatureFPExtension, // CLGDBR = 827
    CEFBS_FeatureFPExtension, // CLGDTR = 828
    CEFBS_FeatureFPExtension, // CLGEBR = 829
    CEFBS_None, // CLGF = 830
    CEFBS_None, // CLGFI = 831
    CEFBS_None, // CLGFR = 832
    CEFBS_None, // CLGFRL = 833
    CEFBS_None, // CLGHRL = 834
    CEFBS_None, // CLGHSI = 835
    CEFBS_None, // CLGIB = 836
    CEFBS_None, // CLGIBAsm = 837
    CEFBS_None, // CLGIBAsmE = 838
    CEFBS_None, // CLGIBAsmH = 839
    CEFBS_None, // CLGIBAsmHE = 840
    CEFBS_None, // CLGIBAsmL = 841
    CEFBS_None, // CLGIBAsmLE = 842
    CEFBS_None, // CLGIBAsmLH = 843
    CEFBS_None, // CLGIBAsmNE = 844
    CEFBS_None, // CLGIBAsmNH = 845
    CEFBS_None, // CLGIBAsmNHE = 846
    CEFBS_None, // CLGIBAsmNL = 847
    CEFBS_None, // CLGIBAsmNLE = 848
    CEFBS_None, // CLGIBAsmNLH = 849
    CEFBS_None, // CLGIJ = 850
    CEFBS_None, // CLGIJAsm = 851
    CEFBS_None, // CLGIJAsmE = 852
    CEFBS_None, // CLGIJAsmH = 853
    CEFBS_None, // CLGIJAsmHE = 854
    CEFBS_None, // CLGIJAsmL = 855
    CEFBS_None, // CLGIJAsmLE = 856
    CEFBS_None, // CLGIJAsmLH = 857
    CEFBS_None, // CLGIJAsmNE = 858
    CEFBS_None, // CLGIJAsmNH = 859
    CEFBS_None, // CLGIJAsmNHE = 860
    CEFBS_None, // CLGIJAsmNL = 861
    CEFBS_None, // CLGIJAsmNLE = 862
    CEFBS_None, // CLGIJAsmNLH = 863
    CEFBS_None, // CLGIT = 864
    CEFBS_None, // CLGITAsm = 865
    CEFBS_None, // CLGITAsmE = 866
    CEFBS_None, // CLGITAsmH = 867
    CEFBS_None, // CLGITAsmHE = 868
    CEFBS_None, // CLGITAsmL = 869
    CEFBS_None, // CLGITAsmLE = 870
    CEFBS_None, // CLGITAsmLH = 871
    CEFBS_None, // CLGITAsmNE = 872
    CEFBS_None, // CLGITAsmNH = 873
    CEFBS_None, // CLGITAsmNHE = 874
    CEFBS_None, // CLGITAsmNL = 875
    CEFBS_None, // CLGITAsmNLE = 876
    CEFBS_None, // CLGITAsmNLH = 877
    CEFBS_None, // CLGR = 878
    CEFBS_None, // CLGRB = 879
    CEFBS_None, // CLGRBAsm = 880
    CEFBS_None, // CLGRBAsmE = 881
    CEFBS_None, // CLGRBAsmH = 882
    CEFBS_None, // CLGRBAsmHE = 883
    CEFBS_None, // CLGRBAsmL = 884
    CEFBS_None, // CLGRBAsmLE = 885
    CEFBS_None, // CLGRBAsmLH = 886
    CEFBS_None, // CLGRBAsmNE = 887
    CEFBS_None, // CLGRBAsmNH = 888
    CEFBS_None, // CLGRBAsmNHE = 889
    CEFBS_None, // CLGRBAsmNL = 890
    CEFBS_None, // CLGRBAsmNLE = 891
    CEFBS_None, // CLGRBAsmNLH = 892
    CEFBS_None, // CLGRJ = 893
    CEFBS_None, // CLGRJAsm = 894
    CEFBS_None, // CLGRJAsmE = 895
    CEFBS_None, // CLGRJAsmH = 896
    CEFBS_None, // CLGRJAsmHE = 897
    CEFBS_None, // CLGRJAsmL = 898
    CEFBS_None, // CLGRJAsmLE = 899
    CEFBS_None, // CLGRJAsmLH = 900
    CEFBS_None, // CLGRJAsmNE = 901
    CEFBS_None, // CLGRJAsmNH = 902
    CEFBS_None, // CLGRJAsmNHE = 903
    CEFBS_None, // CLGRJAsmNL = 904
    CEFBS_None, // CLGRJAsmNLE = 905
    CEFBS_None, // CLGRJAsmNLH = 906
    CEFBS_None, // CLGRL = 907
    CEFBS_None, // CLGRT = 908
    CEFBS_None, // CLGRTAsm = 909
    CEFBS_None, // CLGRTAsmE = 910
    CEFBS_None, // CLGRTAsmH = 911
    CEFBS_None, // CLGRTAsmHE = 912
    CEFBS_None, // CLGRTAsmL = 913
    CEFBS_None, // CLGRTAsmLE = 914
    CEFBS_None, // CLGRTAsmLH = 915
    CEFBS_None, // CLGRTAsmNE = 916
    CEFBS_None, // CLGRTAsmNH = 917
    CEFBS_None, // CLGRTAsmNHE = 918
    CEFBS_None, // CLGRTAsmNL = 919
    CEFBS_None, // CLGRTAsmNLE = 920
    CEFBS_None, // CLGRTAsmNLH = 921
    CEFBS_FeatureMiscellaneousExtensions, // CLGT = 922
    CEFBS_FeatureMiscellaneousExtensions, // CLGTAsm = 923
    CEFBS_FeatureMiscellaneousExtensions, // CLGTAsmE = 924
    CEFBS_FeatureMiscellaneousExtensions, // CLGTAsmH = 925
    CEFBS_FeatureMiscellaneousExtensions, // CLGTAsmHE = 926
    CEFBS_FeatureMiscellaneousExtensions, // CLGTAsmL = 927
    CEFBS_FeatureMiscellaneousExtensions, // CLGTAsmLE = 928
    CEFBS_FeatureMiscellaneousExtensions, // CLGTAsmLH = 929
    CEFBS_FeatureMiscellaneousExtensions, // CLGTAsmNE = 930
    CEFBS_FeatureMiscellaneousExtensions, // CLGTAsmNH = 931
    CEFBS_FeatureMiscellaneousExtensions, // CLGTAsmNHE = 932
    CEFBS_FeatureMiscellaneousExtensions, // CLGTAsmNL = 933
    CEFBS_FeatureMiscellaneousExtensions, // CLGTAsmNLE = 934
    CEFBS_FeatureMiscellaneousExtensions, // CLGTAsmNLH = 935
    CEFBS_FeatureFPExtension, // CLGXBR = 936
    CEFBS_FeatureFPExtension, // CLGXTR = 937
    CEFBS_FeatureHighWord, // CLHF = 938
    CEFBS_FeatureHighWord, // CLHHR = 939
    CEFBS_None, // CLHHSI = 940
    CEFBS_FeatureHighWord, // CLHLR = 941
    CEFBS_None, // CLHRL = 942
    CEFBS_None, // CLI = 943
    CEFBS_None, // CLIB = 944
    CEFBS_None, // CLIBAsm = 945
    CEFBS_None, // CLIBAsmE = 946
    CEFBS_None, // CLIBAsmH = 947
    CEFBS_None, // CLIBAsmHE = 948
    CEFBS_None, // CLIBAsmL = 949
    CEFBS_None, // CLIBAsmLE = 950
    CEFBS_None, // CLIBAsmLH = 951
    CEFBS_None, // CLIBAsmNE = 952
    CEFBS_None, // CLIBAsmNH = 953
    CEFBS_None, // CLIBAsmNHE = 954
    CEFBS_None, // CLIBAsmNL = 955
    CEFBS_None, // CLIBAsmNLE = 956
    CEFBS_None, // CLIBAsmNLH = 957
    CEFBS_FeatureHighWord, // CLIH = 958
    CEFBS_None, // CLIJ = 959
    CEFBS_None, // CLIJAsm = 960
    CEFBS_None, // CLIJAsmE = 961
    CEFBS_None, // CLIJAsmH = 962
    CEFBS_None, // CLIJAsmHE = 963
    CEFBS_None, // CLIJAsmL = 964
    CEFBS_None, // CLIJAsmLE = 965
    CEFBS_None, // CLIJAsmLH = 966
    CEFBS_None, // CLIJAsmNE = 967
    CEFBS_None, // CLIJAsmNH = 968
    CEFBS_None, // CLIJAsmNHE = 969
    CEFBS_None, // CLIJAsmNL = 970
    CEFBS_None, // CLIJAsmNLE = 971
    CEFBS_None, // CLIJAsmNLH = 972
    CEFBS_None, // CLIY = 973
    CEFBS_None, // CLM = 974
    CEFBS_None, // CLMH = 975
    CEFBS_None, // CLMY = 976
    CEFBS_None, // CLR = 977
    CEFBS_None, // CLRB = 978
    CEFBS_None, // CLRBAsm = 979
    CEFBS_None, // CLRBAsmE = 980
    CEFBS_None, // CLRBAsmH = 981
    CEFBS_None, // CLRBAsmHE = 982
    CEFBS_None, // CLRBAsmL = 983
    CEFBS_None, // CLRBAsmLE = 984
    CEFBS_None, // CLRBAsmLH = 985
    CEFBS_None, // CLRBAsmNE = 986
    CEFBS_None, // CLRBAsmNH = 987
    CEFBS_None, // CLRBAsmNHE = 988
    CEFBS_None, // CLRBAsmNL = 989
    CEFBS_None, // CLRBAsmNLE = 990
    CEFBS_None, // CLRBAsmNLH = 991
    CEFBS_None, // CLRJ = 992
    CEFBS_None, // CLRJAsm = 993
    CEFBS_None, // CLRJAsmE = 994
    CEFBS_None, // CLRJAsmH = 995
    CEFBS_None, // CLRJAsmHE = 996
    CEFBS_None, // CLRJAsmL = 997
    CEFBS_None, // CLRJAsmLE = 998
    CEFBS_None, // CLRJAsmLH = 999
    CEFBS_None, // CLRJAsmNE = 1000
    CEFBS_None, // CLRJAsmNH = 1001
    CEFBS_None, // CLRJAsmNHE = 1002
    CEFBS_None, // CLRJAsmNL = 1003
    CEFBS_None, // CLRJAsmNLE = 1004
    CEFBS_None, // CLRJAsmNLH = 1005
    CEFBS_None, // CLRL = 1006
    CEFBS_None, // CLRT = 1007
    CEFBS_None, // CLRTAsm = 1008
    CEFBS_None, // CLRTAsmE = 1009
    CEFBS_None, // CLRTAsmH = 1010
    CEFBS_None, // CLRTAsmHE = 1011
    CEFBS_None, // CLRTAsmL = 1012
    CEFBS_None, // CLRTAsmLE = 1013
    CEFBS_None, // CLRTAsmLH = 1014
    CEFBS_None, // CLRTAsmNE = 1015
    CEFBS_None, // CLRTAsmNH = 1016
    CEFBS_None, // CLRTAsmNHE = 1017
    CEFBS_None, // CLRTAsmNL = 1018
    CEFBS_None, // CLRTAsmNLE = 1019
    CEFBS_None, // CLRTAsmNLH = 1020
    CEFBS_None, // CLST = 1021
    CEFBS_FeatureMiscellaneousExtensions, // CLT = 1022
    CEFBS_FeatureMiscellaneousExtensions, // CLTAsm = 1023
    CEFBS_FeatureMiscellaneousExtensions, // CLTAsmE = 1024
    CEFBS_FeatureMiscellaneousExtensions, // CLTAsmH = 1025
    CEFBS_FeatureMiscellaneousExtensions, // CLTAsmHE = 1026
    CEFBS_FeatureMiscellaneousExtensions, // CLTAsmL = 1027
    CEFBS_FeatureMiscellaneousExtensions, // CLTAsmLE = 1028
    CEFBS_FeatureMiscellaneousExtensions, // CLTAsmLH = 1029
    CEFBS_FeatureMiscellaneousExtensions, // CLTAsmNE = 1030
    CEFBS_FeatureMiscellaneousExtensions, // CLTAsmNH = 1031
    CEFBS_FeatureMiscellaneousExtensions, // CLTAsmNHE = 1032
    CEFBS_FeatureMiscellaneousExtensions, // CLTAsmNL = 1033
    CEFBS_FeatureMiscellaneousExtensions, // CLTAsmNLE = 1034
    CEFBS_FeatureMiscellaneousExtensions, // CLTAsmNLH = 1035
    CEFBS_None, // CLY = 1036
    CEFBS_None, // CMPSC = 1037
    CEFBS_None, // CP = 1038
    CEFBS_FeatureDFPPackedConversion, // CPDT = 1039
    CEFBS_None, // CPSDRdd = 1040
    CEFBS_None, // CPSDRds = 1041
    CEFBS_None, // CPSDRsd = 1042
    CEFBS_None, // CPSDRss = 1043
    CEFBS_FeatureDFPPackedConversion, // CPXT = 1044
    CEFBS_None, // CPYA = 1045
    CEFBS_None, // CR = 1046
    CEFBS_None, // CRB = 1047
    CEFBS_None, // CRBAsm = 1048
    CEFBS_None, // CRBAsmE = 1049
    CEFBS_None, // CRBAsmH = 1050
    CEFBS_None, // CRBAsmHE = 1051
    CEFBS_None, // CRBAsmL = 1052
    CEFBS_None, // CRBAsmLE = 1053
    CEFBS_None, // CRBAsmLH = 1054
    CEFBS_None, // CRBAsmNE = 1055
    CEFBS_None, // CRBAsmNH = 1056
    CEFBS_None, // CRBAsmNHE = 1057
    CEFBS_None, // CRBAsmNL = 1058
    CEFBS_None, // CRBAsmNLE = 1059
    CEFBS_None, // CRBAsmNLH = 1060
    CEFBS_FeatureEnhancedDAT2, // CRDTE = 1061
    CEFBS_FeatureEnhancedDAT2, // CRDTEOpt = 1062
    CEFBS_None, // CRJ = 1063
    CEFBS_None, // CRJAsm = 1064
    CEFBS_None, // CRJAsmE = 1065
    CEFBS_None, // CRJAsmH = 1066
    CEFBS_None, // CRJAsmHE = 1067
    CEFBS_None, // CRJAsmL = 1068
    CEFBS_None, // CRJAsmLE = 1069
    CEFBS_None, // CRJAsmLH = 1070
    CEFBS_None, // CRJAsmNE = 1071
    CEFBS_None, // CRJAsmNH = 1072
    CEFBS_None, // CRJAsmNHE = 1073
    CEFBS_None, // CRJAsmNL = 1074
    CEFBS_None, // CRJAsmNLE = 1075
    CEFBS_None, // CRJAsmNLH = 1076
    CEFBS_None, // CRL = 1077
    CEFBS_None, // CRT = 1078
    CEFBS_None, // CRTAsm = 1079
    CEFBS_None, // CRTAsmE = 1080
    CEFBS_None, // CRTAsmH = 1081
    CEFBS_None, // CRTAsmHE = 1082
    CEFBS_None, // CRTAsmL = 1083
    CEFBS_None, // CRTAsmLE = 1084
    CEFBS_None, // CRTAsmLH = 1085
    CEFBS_None, // CRTAsmNE = 1086
    CEFBS_None, // CRTAsmNH = 1087
    CEFBS_None, // CRTAsmNHE = 1088
    CEFBS_None, // CRTAsmNL = 1089
    CEFBS_None, // CRTAsmNLE = 1090
    CEFBS_None, // CRTAsmNLH = 1091
    CEFBS_None, // CS = 1092
    CEFBS_None, // CSCH = 1093
    CEFBS_None, // CSDTR = 1094
    CEFBS_None, // CSG = 1095
    CEFBS_None, // CSP = 1096
    CEFBS_None, // CSPG = 1097
    CEFBS_None, // CSST = 1098
    CEFBS_None, // CSXTR = 1099
    CEFBS_None, // CSY = 1100
    CEFBS_None, // CU12 = 1101
    CEFBS_None, // CU12Opt = 1102
    CEFBS_None, // CU14 = 1103
    CEFBS_None, // CU14Opt = 1104
    CEFBS_None, // CU21 = 1105
    CEFBS_None, // CU21Opt = 1106
    CEFBS_None, // CU24 = 1107
    CEFBS_None, // CU24Opt = 1108
    CEFBS_None, // CU41 = 1109
    CEFBS_None, // CU42 = 1110
    CEFBS_None, // CUDTR = 1111
    CEFBS_None, // CUSE = 1112
    CEFBS_None, // CUTFU = 1113
    CEFBS_None, // CUTFUOpt = 1114
    CEFBS_None, // CUUTF = 1115
    CEFBS_None, // CUUTFOpt = 1116
    CEFBS_None, // CUXTR = 1117
    CEFBS_None, // CVB = 1118
    CEFBS_None, // CVBG = 1119
    CEFBS_None, // CVBY = 1120
    CEFBS_None, // CVD = 1121
    CEFBS_None, // CVDG = 1122
    CEFBS_None, // CVDY = 1123
    CEFBS_None, // CXBR = 1124
    CEFBS_None, // CXFBR = 1125
    CEFBS_FeatureFPExtension, // CXFBRA = 1126
    CEFBS_None, // CXFR = 1127
    CEFBS_FeatureFPExtension, // CXFTR = 1128
    CEFBS_None, // CXGBR = 1129
    CEFBS_FeatureFPExtension, // CXGBRA = 1130
    CEFBS_None, // CXGR = 1131
    CEFBS_None, // CXGTR = 1132
    CEFBS_FeatureFPExtension, // CXGTRA = 1133
    CEFBS_FeatureFPExtension, // CXLFBR = 1134
    CEFBS_FeatureFPExtension, // CXLFTR = 1135
    CEFBS_FeatureFPExtension, // CXLGBR = 1136
    CEFBS_FeatureFPExtension, // CXLGTR = 1137
    CEFBS_FeatureDFPPackedConversion, // CXPT = 1138
    CEFBS_None, // CXR = 1139
    CEFBS_None, // CXSTR = 1140
    CEFBS_None, // CXTR = 1141
    CEFBS_None, // CXUTR = 1142
    CEFBS_FeatureDFPZonedConversion, // CXZT = 1143
    CEFBS_None, // CY = 1144
    CEFBS_FeatureDFPZonedConversion, // CZDT = 1145
    CEFBS_FeatureDFPZonedConversion, // CZXT = 1146
    CEFBS_None, // D = 1147
    CEFBS_None, // DD = 1148
    CEFBS_None, // DDB = 1149
    CEFBS_None, // DDBR = 1150
    CEFBS_None, // DDR = 1151
    CEFBS_None, // DDTR = 1152
    CEFBS_FeatureFPExtension, // DDTRA = 1153
    CEFBS_None, // DE = 1154
    CEFBS_None, // DEB = 1155
    CEFBS_None, // DEBR = 1156
    CEFBS_None, // DER = 1157
    CEFBS_FeatureDeflateConversion, // DFLTCC = 1158
    CEFBS_None, // DIAG = 1159
    CEFBS_None, // DIDBR = 1160
    CEFBS_None, // DIEBR = 1161
    CEFBS_None, // DL = 1162
    CEFBS_None, // DLG = 1163
    CEFBS_None, // DLGR = 1164
    CEFBS_None, // DLR = 1165
    CEFBS_None, // DP = 1166
    CEFBS_None, // DR = 1167
    CEFBS_None, // DSG = 1168
    CEFBS_None, // DSGF = 1169
    CEFBS_None, // DSGFR = 1170
    CEFBS_None, // DSGR = 1171
    CEFBS_None, // DXBR = 1172
    CEFBS_None, // DXR = 1173
    CEFBS_None, // DXTR = 1174
    CEFBS_FeatureFPExtension, // DXTRA = 1175
    CEFBS_None, // EAR = 1176
    CEFBS_None, // ECAG = 1177
    CEFBS_None, // ECCTR = 1178
    CEFBS_None, // ECPGA = 1179
    CEFBS_None, // ECTG = 1180
    CEFBS_None, // ED = 1181
    CEFBS_None, // EDMK = 1182
    CEFBS_None, // EEDTR = 1183
    CEFBS_None, // EEXTR = 1184
    CEFBS_None, // EFPC = 1185
    CEFBS_None, // EPAIR = 1186
    CEFBS_None, // EPAR = 1187
    CEFBS_None, // EPCTR = 1188
    CEFBS_None, // EPSW = 1189
    CEFBS_None, // EREG = 1190
    CEFBS_None, // EREGG = 1191
    CEFBS_None, // ESAIR = 1192
    CEFBS_None, // ESAR = 1193
    CEFBS_None, // ESDTR = 1194
    CEFBS_None, // ESEA = 1195
    CEFBS_None, // ESTA = 1196
    CEFBS_None, // ESXTR = 1197
    CEFBS_FeatureTransactionalExecution, // ETND = 1198
    CEFBS_None, // EX = 1199
    CEFBS_None, // EXRL = 1200
    CEFBS_None, // FIDBR = 1201
    CEFBS_FeatureFPExtension, // FIDBRA = 1202
    CEFBS_None, // FIDR = 1203
    CEFBS_None, // FIDTR = 1204
    CEFBS_None, // FIEBR = 1205
    CEFBS_FeatureFPExtension, // FIEBRA = 1206
    CEFBS_None, // FIER = 1207
    CEFBS_None, // FIXBR = 1208
    CEFBS_FeatureFPExtension, // FIXBRA = 1209
    CEFBS_None, // FIXR = 1210
    CEFBS_None, // FIXTR = 1211
    CEFBS_None, // FLOGR = 1212
    CEFBS_None, // HDR = 1213
    CEFBS_None, // HER = 1214
    CEFBS_None, // HSCH = 1215
    CEFBS_None, // IAC = 1216
    CEFBS_None, // IC = 1217
    CEFBS_None, // IC32 = 1218
    CEFBS_None, // IC32Y = 1219
    CEFBS_None, // ICM = 1220
    CEFBS_None, // ICMH = 1221
    CEFBS_None, // ICMY = 1222
    CEFBS_None, // ICY = 1223
    CEFBS_None, // IDTE = 1224
    CEFBS_None, // IDTEOpt = 1225
    CEFBS_None, // IEDTR = 1226
    CEFBS_None, // IEXTR = 1227
    CEFBS_None, // IIHF = 1228
    CEFBS_None, // IIHH = 1229
    CEFBS_None, // IIHL = 1230
    CEFBS_None, // IILF = 1231
    CEFBS_None, // IILH = 1232
    CEFBS_None, // IILL = 1233
    CEFBS_None, // IPK = 1234
    CEFBS_None, // IPM = 1235
    CEFBS_None, // IPTE = 1236
    CEFBS_None, // IPTEOpt = 1237
    CEFBS_None, // IPTEOptOpt = 1238
    CEFBS_FeatureInsertReferenceBitsMultiple, // IRBM = 1239
    CEFBS_None, // ISKE = 1240
    CEFBS_None, // IVSK = 1241
    CEFBS_None, // InsnE = 1242
    CEFBS_None, // InsnRI = 1243
    CEFBS_None, // InsnRIE = 1244
    CEFBS_None, // InsnRIL = 1245
    CEFBS_None, // InsnRILU = 1246
    CEFBS_None, // InsnRIS = 1247
    CEFBS_None, // InsnRR = 1248
    CEFBS_None, // InsnRRE = 1249
    CEFBS_None, // InsnRRF = 1250
    CEFBS_None, // InsnRRS = 1251
    CEFBS_None, // InsnRS = 1252
    CEFBS_None, // InsnRSE = 1253
    CEFBS_None, // InsnRSI = 1254
    CEFBS_None, // InsnRSY = 1255
    CEFBS_None, // InsnRX = 1256
    CEFBS_None, // InsnRXE = 1257
    CEFBS_None, // InsnRXF = 1258
    CEFBS_None, // InsnRXY = 1259
    CEFBS_None, // InsnS = 1260
    CEFBS_None, // InsnSI = 1261
    CEFBS_None, // InsnSIL = 1262
    CEFBS_None, // InsnSIY = 1263
    CEFBS_None, // InsnSS = 1264
    CEFBS_None, // InsnSSE = 1265
    CEFBS_None, // InsnSSF = 1266
    CEFBS_None, // J = 1267
    CEFBS_None, // JAsmE = 1268
    CEFBS_None, // JAsmH = 1269
    CEFBS_None, // JAsmHE = 1270
    CEFBS_None, // JAsmL = 1271
    CEFBS_None, // JAsmLE = 1272
    CEFBS_None, // JAsmLH = 1273
    CEFBS_None, // JAsmM = 1274
    CEFBS_None, // JAsmNE = 1275
    CEFBS_None, // JAsmNH = 1276
    CEFBS_None, // JAsmNHE = 1277
    CEFBS_None, // JAsmNL = 1278
    CEFBS_None, // JAsmNLE = 1279
    CEFBS_None, // JAsmNLH = 1280
    CEFBS_None, // JAsmNM = 1281
    CEFBS_None, // JAsmNO = 1282
    CEFBS_None, // JAsmNP = 1283
    CEFBS_None, // JAsmNZ = 1284
    CEFBS_None, // JAsmO = 1285
    CEFBS_None, // JAsmP = 1286
    CEFBS_None, // JAsmZ = 1287
    CEFBS_None, // JG = 1288
    CEFBS_None, // JGAsmE = 1289
    CEFBS_None, // JGAsmH = 1290
    CEFBS_None, // JGAsmHE = 1291
    CEFBS_None, // JGAsmL = 1292
    CEFBS_None, // JGAsmLE = 1293
    CEFBS_None, // JGAsmLH = 1294
    CEFBS_None, // JGAsmM = 1295
    CEFBS_None, // JGAsmNE = 1296
    CEFBS_None, // JGAsmNH = 1297
    CEFBS_None, // JGAsmNHE = 1298
    CEFBS_None, // JGAsmNL = 1299
    CEFBS_None, // JGAsmNLE = 1300
    CEFBS_None, // JGAsmNLH = 1301
    CEFBS_None, // JGAsmNM = 1302
    CEFBS_None, // JGAsmNO = 1303
    CEFBS_None, // JGAsmNP = 1304
    CEFBS_None, // JGAsmNZ = 1305
    CEFBS_None, // JGAsmO = 1306
    CEFBS_None, // JGAsmP = 1307
    CEFBS_None, // JGAsmZ = 1308
    CEFBS_None, // KDB = 1309
    CEFBS_None, // KDBR = 1310
    CEFBS_FeatureMessageSecurityAssist9, // KDSA = 1311
    CEFBS_None, // KDTR = 1312
    CEFBS_None, // KEB = 1313
    CEFBS_None, // KEBR = 1314
    CEFBS_None, // KIMD = 1315
    CEFBS_None, // KLMD = 1316
    CEFBS_None, // KM = 1317
    CEFBS_FeatureMessageSecurityAssist8, // KMA = 1318
    CEFBS_None, // KMAC = 1319
    CEFBS_None, // KMC = 1320
    CEFBS_FeatureMessageSecurityAssist4, // KMCTR = 1321
    CEFBS_FeatureMessageSecurityAssist4, // KMF = 1322
    CEFBS_FeatureMessageSecurityAssist4, // KMO = 1323
    CEFBS_None, // KXBR = 1324
    CEFBS_None, // KXTR = 1325
    CEFBS_None, // L = 1326
    CEFBS_None, // LA = 1327
    CEFBS_FeatureInterlockedAccess1, // LAA = 1328
    CEFBS_FeatureInterlockedAccess1, // LAAG = 1329
    CEFBS_FeatureInterlockedAccess1, // LAAL = 1330
    CEFBS_FeatureInterlockedAccess1, // LAALG = 1331
    CEFBS_None, // LAE = 1332
    CEFBS_None, // LAEY = 1333
    CEFBS_None, // LAM = 1334
    CEFBS_None, // LAMY = 1335
    CEFBS_FeatureInterlockedAccess1, // LAN = 1336
    CEFBS_FeatureInterlockedAccess1, // LANG = 1337
    CEFBS_FeatureInterlockedAccess1, // LAO = 1338
    CEFBS_FeatureInterlockedAccess1, // LAOG = 1339
    CEFBS_None, // LARL = 1340
    CEFBS_None, // LASP = 1341
    CEFBS_FeatureLoadAndTrap, // LAT = 1342
    CEFBS_FeatureInterlockedAccess1, // LAX = 1343
    CEFBS_FeatureInterlockedAccess1, // LAXG = 1344
    CEFBS_None, // LAY = 1345
    CEFBS_None, // LB = 1346
    CEFBS_FeatureHighWord, // LBH = 1347
    CEFBS_None, // LBR = 1348
    CEFBS_FeatureVector, // LCBB = 1349
    CEFBS_None, // LCCTL = 1350
    CEFBS_None, // LCDBR = 1351
    CEFBS_None, // LCDFR = 1352
    CEFBS_None, // LCDFR_32 = 1353
    CEFBS_None, // LCDR = 1354
    CEFBS_None, // LCEBR = 1355
    CEFBS_None, // LCER = 1356
    CEFBS_None, // LCGFR = 1357
    CEFBS_None, // LCGR = 1358
    CEFBS_None, // LCR = 1359
    CEFBS_None, // LCTL = 1360
    CEFBS_None, // LCTLG = 1361
    CEFBS_None, // LCXBR = 1362
    CEFBS_None, // LCXR = 1363
    CEFBS_None, // LD = 1364
    CEFBS_None, // LDE = 1365
    CEFBS_None, // LDE32 = 1366
    CEFBS_None, // LDEB = 1367
    CEFBS_None, // LDEBR = 1368
    CEFBS_None, // LDER = 1369
    CEFBS_None, // LDETR = 1370
    CEFBS_None, // LDGR = 1371
    CEFBS_None, // LDR = 1372
    CEFBS_None, // LDR32 = 1373
    CEFBS_None, // LDXBR = 1374
    CEFBS_FeatureFPExtension, // LDXBRA = 1375
    CEFBS_None, // LDXR = 1376
    CEFBS_None, // LDXTR = 1377
    CEFBS_None, // LDY = 1378
    CEFBS_None, // LE = 1379
    CEFBS_None, // LEDBR = 1380
    CEFBS_FeatureFPExtension, // LEDBRA = 1381
    CEFBS_None, // LEDR = 1382
    CEFBS_None, // LEDTR = 1383
    CEFBS_None, // LER = 1384
    CEFBS_None, // LEXBR = 1385
    CEFBS_FeatureFPExtension, // LEXBRA = 1386
    CEFBS_None, // LEXR = 1387
    CEFBS_None, // LEY = 1388
    CEFBS_None, // LFAS = 1389
    CEFBS_FeatureHighWord, // LFH = 1390
    CEFBS_FeatureLoadAndTrap, // LFHAT = 1391
    CEFBS_None, // LFPC = 1392
    CEFBS_None, // LG = 1393
    CEFBS_FeatureLoadAndTrap, // LGAT = 1394
    CEFBS_None, // LGB = 1395
    CEFBS_None, // LGBR = 1396
    CEFBS_None, // LGDR = 1397
    CEFBS_None, // LGF = 1398
    CEFBS_None, // LGFI = 1399
    CEFBS_None, // LGFR = 1400
    CEFBS_None, // LGFRL = 1401
    CEFBS_FeatureGuardedStorage, // LGG = 1402
    CEFBS_None, // LGH = 1403
    CEFBS_None, // LGHI = 1404
    CEFBS_None, // LGHR = 1405
    CEFBS_None, // LGHRL = 1406
    CEFBS_None, // LGR = 1407
    CEFBS_None, // LGRL = 1408
    CEFBS_FeatureGuardedStorage, // LGSC = 1409
    CEFBS_None, // LH = 1410
    CEFBS_FeatureHighWord, // LHH = 1411
    CEFBS_None, // LHI = 1412
    CEFBS_None, // LHR = 1413
    CEFBS_None, // LHRL = 1414
    CEFBS_None, // LHY = 1415
    CEFBS_None, // LLC = 1416
    CEFBS_FeatureHighWord, // LLCH = 1417
    CEFBS_None, // LLCR = 1418
    CEFBS_None, // LLGC = 1419
    CEFBS_None, // LLGCR = 1420
    CEFBS_None, // LLGF = 1421
    CEFBS_FeatureLoadAndTrap, // LLGFAT = 1422
    CEFBS_None, // LLGFR = 1423
    CEFBS_None, // LLGFRL = 1424
    CEFBS_FeatureGuardedStorage, // LLGFSG = 1425
    CEFBS_None, // LLGH = 1426
    CEFBS_None, // LLGHR = 1427
    CEFBS_None, // LLGHRL = 1428
    CEFBS_None, // LLGT = 1429
    CEFBS_FeatureLoadAndTrap, // LLGTAT = 1430
    CEFBS_None, // LLGTR = 1431
    CEFBS_None, // LLH = 1432
    CEFBS_FeatureHighWord, // LLHH = 1433
    CEFBS_None, // LLHR = 1434
    CEFBS_None, // LLHRL = 1435
    CEFBS_None, // LLIHF = 1436
    CEFBS_None, // LLIHH = 1437
    CEFBS_None, // LLIHL = 1438
    CEFBS_None, // LLILF = 1439
    CEFBS_None, // LLILH = 1440
    CEFBS_None, // LLILL = 1441
    CEFBS_FeatureLoadAndZeroRightmostByte, // LLZRGF = 1442
    CEFBS_None, // LM = 1443
    CEFBS_None, // LMD = 1444
    CEFBS_None, // LMG = 1445
    CEFBS_None, // LMH = 1446
    CEFBS_None, // LMY = 1447
    CEFBS_None, // LNDBR = 1448
    CEFBS_None, // LNDFR = 1449
    CEFBS_None, // LNDFR_32 = 1450
    CEFBS_None, // LNDR = 1451
    CEFBS_None, // LNEBR = 1452
    CEFBS_None, // LNER = 1453
    CEFBS_None, // LNGFR = 1454
    CEFBS_None, // LNGR = 1455
    CEFBS_None, // LNR = 1456
    CEFBS_None, // LNXBR = 1457
    CEFBS_None, // LNXR = 1458
    CEFBS_FeatureLoadStoreOnCond, // LOC = 1459
    CEFBS_FeatureLoadStoreOnCond, // LOCAsm = 1460
    CEFBS_FeatureLoadStoreOnCond, // LOCAsmE = 1461
    CEFBS_FeatureLoadStoreOnCond, // LOCAsmH = 1462
    CEFBS_FeatureLoadStoreOnCond, // LOCAsmHE = 1463
    CEFBS_FeatureLoadStoreOnCond, // LOCAsmL = 1464
    CEFBS_FeatureLoadStoreOnCond, // LOCAsmLE = 1465
    CEFBS_FeatureLoadStoreOnCond, // LOCAsmLH = 1466
    CEFBS_FeatureLoadStoreOnCond, // LOCAsmM = 1467
    CEFBS_FeatureLoadStoreOnCond, // LOCAsmNE = 1468
    CEFBS_FeatureLoadStoreOnCond, // LOCAsmNH = 1469
    CEFBS_FeatureLoadStoreOnCond, // LOCAsmNHE = 1470
    CEFBS_FeatureLoadStoreOnCond, // LOCAsmNL = 1471
    CEFBS_FeatureLoadStoreOnCond, // LOCAsmNLE = 1472
    CEFBS_FeatureLoadStoreOnCond, // LOCAsmNLH = 1473
    CEFBS_FeatureLoadStoreOnCond, // LOCAsmNM = 1474
    CEFBS_FeatureLoadStoreOnCond, // LOCAsmNO = 1475
    CEFBS_FeatureLoadStoreOnCond, // LOCAsmNP = 1476
    CEFBS_FeatureLoadStoreOnCond, // LOCAsmNZ = 1477
    CEFBS_FeatureLoadStoreOnCond, // LOCAsmO = 1478
    CEFBS_FeatureLoadStoreOnCond, // LOCAsmP = 1479
    CEFBS_FeatureLoadStoreOnCond, // LOCAsmZ = 1480
    CEFBS_FeatureLoadStoreOnCond2, // LOCFH = 1481
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHAsm = 1482
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHAsmE = 1483
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHAsmH = 1484
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHAsmHE = 1485
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHAsmL = 1486
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHAsmLE = 1487
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHAsmLH = 1488
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHAsmM = 1489
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHAsmNE = 1490
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHAsmNH = 1491
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHAsmNHE = 1492
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHAsmNL = 1493
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHAsmNLE = 1494
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHAsmNLH = 1495
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHAsmNM = 1496
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHAsmNO = 1497
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHAsmNP = 1498
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHAsmNZ = 1499
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHAsmO = 1500
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHAsmP = 1501
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHAsmZ = 1502
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHR = 1503
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHRAsm = 1504
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHRAsmE = 1505
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHRAsmH = 1506
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHRAsmHE = 1507
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHRAsmL = 1508
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHRAsmLE = 1509
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHRAsmLH = 1510
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHRAsmM = 1511
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHRAsmNE = 1512
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHRAsmNH = 1513
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHRAsmNHE = 1514
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHRAsmNL = 1515
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHRAsmNLE = 1516
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHRAsmNLH = 1517
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHRAsmNM = 1518
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHRAsmNO = 1519
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHRAsmNP = 1520
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHRAsmNZ = 1521
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHRAsmO = 1522
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHRAsmP = 1523
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHRAsmZ = 1524
    CEFBS_FeatureLoadStoreOnCond, // LOCG = 1525
    CEFBS_FeatureLoadStoreOnCond, // LOCGAsm = 1526
    CEFBS_FeatureLoadStoreOnCond, // LOCGAsmE = 1527
    CEFBS_FeatureLoadStoreOnCond, // LOCGAsmH = 1528
    CEFBS_FeatureLoadStoreOnCond, // LOCGAsmHE = 1529
    CEFBS_FeatureLoadStoreOnCond, // LOCGAsmL = 1530
    CEFBS_FeatureLoadStoreOnCond, // LOCGAsmLE = 1531
    CEFBS_FeatureLoadStoreOnCond, // LOCGAsmLH = 1532
    CEFBS_FeatureLoadStoreOnCond, // LOCGAsmM = 1533
    CEFBS_FeatureLoadStoreOnCond, // LOCGAsmNE = 1534
    CEFBS_FeatureLoadStoreOnCond, // LOCGAsmNH = 1535
    CEFBS_FeatureLoadStoreOnCond, // LOCGAsmNHE = 1536
    CEFBS_FeatureLoadStoreOnCond, // LOCGAsmNL = 1537
    CEFBS_FeatureLoadStoreOnCond, // LOCGAsmNLE = 1538
    CEFBS_FeatureLoadStoreOnCond, // LOCGAsmNLH = 1539
    CEFBS_FeatureLoadStoreOnCond, // LOCGAsmNM = 1540
    CEFBS_FeatureLoadStoreOnCond, // LOCGAsmNO = 1541
    CEFBS_FeatureLoadStoreOnCond, // LOCGAsmNP = 1542
    CEFBS_FeatureLoadStoreOnCond, // LOCGAsmNZ = 1543
    CEFBS_FeatureLoadStoreOnCond, // LOCGAsmO = 1544
    CEFBS_FeatureLoadStoreOnCond, // LOCGAsmP = 1545
    CEFBS_FeatureLoadStoreOnCond, // LOCGAsmZ = 1546
    CEFBS_FeatureLoadStoreOnCond2, // LOCGHI = 1547
    CEFBS_FeatureLoadStoreOnCond2, // LOCGHIAsm = 1548
    CEFBS_FeatureLoadStoreOnCond2, // LOCGHIAsmE = 1549
    CEFBS_FeatureLoadStoreOnCond2, // LOCGHIAsmH = 1550
    CEFBS_FeatureLoadStoreOnCond2, // LOCGHIAsmHE = 1551
    CEFBS_FeatureLoadStoreOnCond2, // LOCGHIAsmL = 1552
    CEFBS_FeatureLoadStoreOnCond2, // LOCGHIAsmLE = 1553
    CEFBS_FeatureLoadStoreOnCond2, // LOCGHIAsmLH = 1554
    CEFBS_FeatureLoadStoreOnCond2, // LOCGHIAsmM = 1555
    CEFBS_FeatureLoadStoreOnCond2, // LOCGHIAsmNE = 1556
    CEFBS_FeatureLoadStoreOnCond2, // LOCGHIAsmNH = 1557
    CEFBS_FeatureLoadStoreOnCond2, // LOCGHIAsmNHE = 1558
    CEFBS_FeatureLoadStoreOnCond2, // LOCGHIAsmNL = 1559
    CEFBS_FeatureLoadStoreOnCond2, // LOCGHIAsmNLE = 1560
    CEFBS_FeatureLoadStoreOnCond2, // LOCGHIAsmNLH = 1561
    CEFBS_FeatureLoadStoreOnCond2, // LOCGHIAsmNM = 1562
    CEFBS_FeatureLoadStoreOnCond2, // LOCGHIAsmNO = 1563
    CEFBS_FeatureLoadStoreOnCond2, // LOCGHIAsmNP = 1564
    CEFBS_FeatureLoadStoreOnCond2, // LOCGHIAsmNZ = 1565
    CEFBS_FeatureLoadStoreOnCond2, // LOCGHIAsmO = 1566
    CEFBS_FeatureLoadStoreOnCond2, // LOCGHIAsmP = 1567
    CEFBS_FeatureLoadStoreOnCond2, // LOCGHIAsmZ = 1568
    CEFBS_FeatureLoadStoreOnCond, // LOCGR = 1569
    CEFBS_FeatureLoadStoreOnCond, // LOCGRAsm = 1570
    CEFBS_FeatureLoadStoreOnCond, // LOCGRAsmE = 1571
    CEFBS_FeatureLoadStoreOnCond, // LOCGRAsmH = 1572
    CEFBS_FeatureLoadStoreOnCond, // LOCGRAsmHE = 1573
    CEFBS_FeatureLoadStoreOnCond, // LOCGRAsmL = 1574
    CEFBS_FeatureLoadStoreOnCond, // LOCGRAsmLE = 1575
    CEFBS_FeatureLoadStoreOnCond, // LOCGRAsmLH = 1576
    CEFBS_FeatureLoadStoreOnCond, // LOCGRAsmM = 1577
    CEFBS_FeatureLoadStoreOnCond, // LOCGRAsmNE = 1578
    CEFBS_FeatureLoadStoreOnCond, // LOCGRAsmNH = 1579
    CEFBS_FeatureLoadStoreOnCond, // LOCGRAsmNHE = 1580
    CEFBS_FeatureLoadStoreOnCond, // LOCGRAsmNL = 1581
    CEFBS_FeatureLoadStoreOnCond, // LOCGRAsmNLE = 1582
    CEFBS_FeatureLoadStoreOnCond, // LOCGRAsmNLH = 1583
    CEFBS_FeatureLoadStoreOnCond, // LOCGRAsmNM = 1584
    CEFBS_FeatureLoadStoreOnCond, // LOCGRAsmNO = 1585
    CEFBS_FeatureLoadStoreOnCond, // LOCGRAsmNP = 1586
    CEFBS_FeatureLoadStoreOnCond, // LOCGRAsmNZ = 1587
    CEFBS_FeatureLoadStoreOnCond, // LOCGRAsmO = 1588
    CEFBS_FeatureLoadStoreOnCond, // LOCGRAsmP = 1589
    CEFBS_FeatureLoadStoreOnCond, // LOCGRAsmZ = 1590
    CEFBS_FeatureLoadStoreOnCond2, // LOCHHI = 1591
    CEFBS_FeatureLoadStoreOnCond2, // LOCHHIAsm = 1592
    CEFBS_FeatureLoadStoreOnCond2, // LOCHHIAsmE = 1593
    CEFBS_FeatureLoadStoreOnCond2, // LOCHHIAsmH = 1594
    CEFBS_FeatureLoadStoreOnCond2, // LOCHHIAsmHE = 1595
    CEFBS_FeatureLoadStoreOnCond2, // LOCHHIAsmL = 1596
    CEFBS_FeatureLoadStoreOnCond2, // LOCHHIAsmLE = 1597
    CEFBS_FeatureLoadStoreOnCond2, // LOCHHIAsmLH = 1598
    CEFBS_FeatureLoadStoreOnCond2, // LOCHHIAsmM = 1599
    CEFBS_FeatureLoadStoreOnCond2, // LOCHHIAsmNE = 1600
    CEFBS_FeatureLoadStoreOnCond2, // LOCHHIAsmNH = 1601
    CEFBS_FeatureLoadStoreOnCond2, // LOCHHIAsmNHE = 1602
    CEFBS_FeatureLoadStoreOnCond2, // LOCHHIAsmNL = 1603
    CEFBS_FeatureLoadStoreOnCond2, // LOCHHIAsmNLE = 1604
    CEFBS_FeatureLoadStoreOnCond2, // LOCHHIAsmNLH = 1605
    CEFBS_FeatureLoadStoreOnCond2, // LOCHHIAsmNM = 1606
    CEFBS_FeatureLoadStoreOnCond2, // LOCHHIAsmNO = 1607
    CEFBS_FeatureLoadStoreOnCond2, // LOCHHIAsmNP = 1608
    CEFBS_FeatureLoadStoreOnCond2, // LOCHHIAsmNZ = 1609
    CEFBS_FeatureLoadStoreOnCond2, // LOCHHIAsmO = 1610
    CEFBS_FeatureLoadStoreOnCond2, // LOCHHIAsmP = 1611
    CEFBS_FeatureLoadStoreOnCond2, // LOCHHIAsmZ = 1612
    CEFBS_FeatureLoadStoreOnCond2, // LOCHI = 1613
    CEFBS_FeatureLoadStoreOnCond2, // LOCHIAsm = 1614
    CEFBS_FeatureLoadStoreOnCond2, // LOCHIAsmE = 1615
    CEFBS_FeatureLoadStoreOnCond2, // LOCHIAsmH = 1616
    CEFBS_FeatureLoadStoreOnCond2, // LOCHIAsmHE = 1617
    CEFBS_FeatureLoadStoreOnCond2, // LOCHIAsmL = 1618
    CEFBS_FeatureLoadStoreOnCond2, // LOCHIAsmLE = 1619
    CEFBS_FeatureLoadStoreOnCond2, // LOCHIAsmLH = 1620
    CEFBS_FeatureLoadStoreOnCond2, // LOCHIAsmM = 1621
    CEFBS_FeatureLoadStoreOnCond2, // LOCHIAsmNE = 1622
    CEFBS_FeatureLoadStoreOnCond2, // LOCHIAsmNH = 1623
    CEFBS_FeatureLoadStoreOnCond2, // LOCHIAsmNHE = 1624
    CEFBS_FeatureLoadStoreOnCond2, // LOCHIAsmNL = 1625
    CEFBS_FeatureLoadStoreOnCond2, // LOCHIAsmNLE = 1626
    CEFBS_FeatureLoadStoreOnCond2, // LOCHIAsmNLH = 1627
    CEFBS_FeatureLoadStoreOnCond2, // LOCHIAsmNM = 1628
    CEFBS_FeatureLoadStoreOnCond2, // LOCHIAsmNO = 1629
    CEFBS_FeatureLoadStoreOnCond2, // LOCHIAsmNP = 1630
    CEFBS_FeatureLoadStoreOnCond2, // LOCHIAsmNZ = 1631
    CEFBS_FeatureLoadStoreOnCond2, // LOCHIAsmO = 1632
    CEFBS_FeatureLoadStoreOnCond2, // LOCHIAsmP = 1633
    CEFBS_FeatureLoadStoreOnCond2, // LOCHIAsmZ = 1634
    CEFBS_FeatureLoadStoreOnCond, // LOCR = 1635
    CEFBS_FeatureLoadStoreOnCond, // LOCRAsm = 1636
    CEFBS_FeatureLoadStoreOnCond, // LOCRAsmE = 1637
    CEFBS_FeatureLoadStoreOnCond, // LOCRAsmH = 1638
    CEFBS_FeatureLoadStoreOnCond, // LOCRAsmHE = 1639
    CEFBS_FeatureLoadStoreOnCond, // LOCRAsmL = 1640
    CEFBS_FeatureLoadStoreOnCond, // LOCRAsmLE = 1641
    CEFBS_FeatureLoadStoreOnCond, // LOCRAsmLH = 1642
    CEFBS_FeatureLoadStoreOnCond, // LOCRAsmM = 1643
    CEFBS_FeatureLoadStoreOnCond, // LOCRAsmNE = 1644
    CEFBS_FeatureLoadStoreOnCond, // LOCRAsmNH = 1645
    CEFBS_FeatureLoadStoreOnCond, // LOCRAsmNHE = 1646
    CEFBS_FeatureLoadStoreOnCond, // LOCRAsmNL = 1647
    CEFBS_FeatureLoadStoreOnCond, // LOCRAsmNLE = 1648
    CEFBS_FeatureLoadStoreOnCond, // LOCRAsmNLH = 1649
    CEFBS_FeatureLoadStoreOnCond, // LOCRAsmNM = 1650
    CEFBS_FeatureLoadStoreOnCond, // LOCRAsmNO = 1651
    CEFBS_FeatureLoadStoreOnCond, // LOCRAsmNP = 1652
    CEFBS_FeatureLoadStoreOnCond, // LOCRAsmNZ = 1653
    CEFBS_FeatureLoadStoreOnCond, // LOCRAsmO = 1654
    CEFBS_FeatureLoadStoreOnCond, // LOCRAsmP = 1655
    CEFBS_FeatureLoadStoreOnCond, // LOCRAsmZ = 1656
    CEFBS_None, // LPCTL = 1657
    CEFBS_FeatureInterlockedAccess1, // LPD = 1658
    CEFBS_None, // LPDBR = 1659
    CEFBS_None, // LPDFR = 1660
    CEFBS_None, // LPDFR_32 = 1661
    CEFBS_FeatureInterlockedAccess1, // LPDG = 1662
    CEFBS_None, // LPDR = 1663
    CEFBS_None, // LPEBR = 1664
    CEFBS_None, // LPER = 1665
    CEFBS_None, // LPGFR = 1666
    CEFBS_None, // LPGR = 1667
    CEFBS_None, // LPP = 1668
    CEFBS_None, // LPQ = 1669
    CEFBS_None, // LPR = 1670
    CEFBS_None, // LPSW = 1671
    CEFBS_None, // LPSWE = 1672
    CEFBS_None, // LPTEA = 1673
    CEFBS_None, // LPXBR = 1674
    CEFBS_None, // LPXR = 1675
    CEFBS_None, // LR = 1676
    CEFBS_None, // LRA = 1677
    CEFBS_None, // LRAG = 1678
    CEFBS_None, // LRAY = 1679
    CEFBS_None, // LRDR = 1680
    CEFBS_None, // LRER = 1681
    CEFBS_None, // LRL = 1682
    CEFBS_None, // LRV = 1683
    CEFBS_None, // LRVG = 1684
    CEFBS_None, // LRVGR = 1685
    CEFBS_None, // LRVH = 1686
    CEFBS_None, // LRVR = 1687
    CEFBS_None, // LSCTL = 1688
    CEFBS_None, // LT = 1689
    CEFBS_None, // LTDBR = 1690
    CEFBS_None, // LTDBRCompare = 1691
    CEFBS_None, // LTDR = 1692
    CEFBS_None, // LTDTR = 1693
    CEFBS_None, // LTEBR = 1694
    CEFBS_None, // LTEBRCompare = 1695
    CEFBS_None, // LTER = 1696
    CEFBS_None, // LTG = 1697
    CEFBS_None, // LTGF = 1698
    CEFBS_None, // LTGFR = 1699
    CEFBS_None, // LTGR = 1700
    CEFBS_None, // LTR = 1701
    CEFBS_None, // LTXBR = 1702
    CEFBS_None, // LTXBRCompare = 1703
    CEFBS_None, // LTXR = 1704
    CEFBS_None, // LTXTR = 1705
    CEFBS_None, // LURA = 1706
    CEFBS_None, // LURAG = 1707
    CEFBS_None, // LXD = 1708
    CEFBS_None, // LXDB = 1709
    CEFBS_None, // LXDBR = 1710
    CEFBS_None, // LXDR = 1711
    CEFBS_None, // LXDTR = 1712
    CEFBS_None, // LXE = 1713
    CEFBS_None, // LXEB = 1714
    CEFBS_None, // LXEBR = 1715
    CEFBS_None, // LXER = 1716
    CEFBS_None, // LXR = 1717
    CEFBS_None, // LY = 1718
    CEFBS_None, // LZDR = 1719
    CEFBS_None, // LZER = 1720
    CEFBS_FeatureLoadAndZeroRightmostByte, // LZRF = 1721
    CEFBS_FeatureLoadAndZeroRightmostByte, // LZRG = 1722
    CEFBS_None, // LZXR = 1723
    CEFBS_None, // M = 1724
    CEFBS_None, // MAD = 1725
    CEFBS_None, // MADB = 1726
    CEFBS_None, // MADBR = 1727
    CEFBS_None, // MADR = 1728
    CEFBS_None, // MAE = 1729
    CEFBS_None, // MAEB = 1730
    CEFBS_None, // MAEBR = 1731
    CEFBS_None, // MAER = 1732
    CEFBS_None, // MAY = 1733
    CEFBS_None, // MAYH = 1734
    CEFBS_None, // MAYHR = 1735
    CEFBS_None, // MAYL = 1736
    CEFBS_None, // MAYLR = 1737
    CEFBS_None, // MAYR = 1738
    CEFBS_None, // MC = 1739
    CEFBS_None, // MD = 1740
    CEFBS_None, // MDB = 1741
    CEFBS_None, // MDBR = 1742
    CEFBS_None, // MDE = 1743
    CEFBS_None, // MDEB = 1744
    CEFBS_None, // MDEBR = 1745
    CEFBS_None, // MDER = 1746
    CEFBS_None, // MDR = 1747
    CEFBS_None, // MDTR = 1748
    CEFBS_FeatureFPExtension, // MDTRA = 1749
    CEFBS_None, // ME = 1750
    CEFBS_None, // MEE = 1751
    CEFBS_None, // MEEB = 1752
    CEFBS_None, // MEEBR = 1753
    CEFBS_None, // MEER = 1754
    CEFBS_None, // MER = 1755
    CEFBS_None, // MFY = 1756
    CEFBS_FeatureMiscellaneousExtensions2, // MG = 1757
    CEFBS_FeatureMiscellaneousExtensions2, // MGH = 1758
    CEFBS_None, // MGHI = 1759
    CEFBS_FeatureMiscellaneousExtensions2, // MGRK = 1760
    CEFBS_None, // MH = 1761
    CEFBS_None, // MHI = 1762
    CEFBS_None, // MHY = 1763
    CEFBS_None, // ML = 1764
    CEFBS_None, // MLG = 1765
    CEFBS_None, // MLGR = 1766
    CEFBS_None, // MLR = 1767
    CEFBS_None, // MP = 1768
    CEFBS_None, // MR = 1769
    CEFBS_None, // MS = 1770
    CEFBS_FeatureMiscellaneousExtensions2, // MSC = 1771
    CEFBS_None, // MSCH = 1772
    CEFBS_None, // MSD = 1773
    CEFBS_None, // MSDB = 1774
    CEFBS_None, // MSDBR = 1775
    CEFBS_None, // MSDR = 1776
    CEFBS_None, // MSE = 1777
    CEFBS_None, // MSEB = 1778
    CEFBS_None, // MSEBR = 1779
    CEFBS_None, // MSER = 1780
    CEFBS_None, // MSFI = 1781
    CEFBS_None, // MSG = 1782
    CEFBS_FeatureMiscellaneousExtensions2, // MSGC = 1783
    CEFBS_None, // MSGF = 1784
    CEFBS_None, // MSGFI = 1785
    CEFBS_None, // MSGFR = 1786
    CEFBS_None, // MSGR = 1787
    CEFBS_FeatureMiscellaneousExtensions2, // MSGRKC = 1788
    CEFBS_None, // MSR = 1789
    CEFBS_FeatureMiscellaneousExtensions2, // MSRKC = 1790
    CEFBS_None, // MSTA = 1791
    CEFBS_None, // MSY = 1792
    CEFBS_None, // MVC = 1793
    CEFBS_None, // MVCDK = 1794
    CEFBS_None, // MVCIN = 1795
    CEFBS_None, // MVCK = 1796
    CEFBS_None, // MVCL = 1797
    CEFBS_None, // MVCLE = 1798
    CEFBS_None, // MVCLU = 1799
    CEFBS_None, // MVCOS = 1800
    CEFBS_None, // MVCP = 1801
    CEFBS_FeatureMiscellaneousExtensions3, // MVCRL = 1802
    CEFBS_None, // MVCS = 1803
    CEFBS_None, // MVCSK = 1804
    CEFBS_None, // MVGHI = 1805
    CEFBS_None, // MVHHI = 1806
    CEFBS_None, // MVHI = 1807
    CEFBS_None, // MVI = 1808
    CEFBS_None, // MVIY = 1809
    CEFBS_None, // MVN = 1810
    CEFBS_None, // MVO = 1811
    CEFBS_None, // MVPG = 1812
    CEFBS_None, // MVST = 1813
    CEFBS_None, // MVZ = 1814
    CEFBS_None, // MXBR = 1815
    CEFBS_None, // MXD = 1816
    CEFBS_None, // MXDB = 1817
    CEFBS_None, // MXDBR = 1818
    CEFBS_None, // MXDR = 1819
    CEFBS_None, // MXR = 1820
    CEFBS_None, // MXTR = 1821
    CEFBS_FeatureFPExtension, // MXTRA = 1822
    CEFBS_None, // MY = 1823
    CEFBS_None, // MYH = 1824
    CEFBS_None, // MYHR = 1825
    CEFBS_None, // MYL = 1826
    CEFBS_None, // MYLR = 1827
    CEFBS_None, // MYR = 1828
    CEFBS_None, // N = 1829
    CEFBS_None, // NC = 1830
    CEFBS_FeatureMiscellaneousExtensions3, // NCGRK = 1831
    CEFBS_FeatureMiscellaneousExtensions3, // NCRK = 1832
    CEFBS_None, // NG = 1833
    CEFBS_None, // NGR = 1834
    CEFBS_FeatureDistinctOps, // NGRK = 1835
    CEFBS_None, // NI = 1836
    CEFBS_FeatureExecutionHint, // NIAI = 1837
    CEFBS_None, // NIHF = 1838
    CEFBS_None, // NIHH = 1839
    CEFBS_None, // NIHL = 1840
    CEFBS_None, // NILF = 1841
    CEFBS_None, // NILH = 1842
    CEFBS_None, // NILL = 1843
    CEFBS_None, // NIY = 1844
    CEFBS_FeatureMiscellaneousExtensions3, // NNGRK = 1845
    CEFBS_FeatureMiscellaneousExtensions3, // NNRK = 1846
    CEFBS_FeatureMiscellaneousExtensions3, // NOGRK = 1847
    CEFBS_FeatureMiscellaneousExtensions3, // NORK = 1848
    CEFBS_None, // NR = 1849
    CEFBS_FeatureDistinctOps, // NRK = 1850
    CEFBS_FeatureTransactionalExecution, // NTSTG = 1851
    CEFBS_FeatureMiscellaneousExtensions3, // NXGRK = 1852
    CEFBS_FeatureMiscellaneousExtensions3, // NXRK = 1853
    CEFBS_None, // NY = 1854
    CEFBS_None, // O = 1855
    CEFBS_None, // OC = 1856
    CEFBS_FeatureMiscellaneousExtensions3, // OCGRK = 1857
    CEFBS_FeatureMiscellaneousExtensions3, // OCRK = 1858
    CEFBS_None, // OG = 1859
    CEFBS_None, // OGR = 1860
    CEFBS_FeatureDistinctOps, // OGRK = 1861
    CEFBS_None, // OI = 1862
    CEFBS_None, // OIHF = 1863
    CEFBS_None, // OIHH = 1864
    CEFBS_None, // OIHL = 1865
    CEFBS_None, // OILF = 1866
    CEFBS_None, // OILH = 1867
    CEFBS_None, // OILL = 1868
    CEFBS_None, // OIY = 1869
    CEFBS_None, // OR = 1870
    CEFBS_FeatureDistinctOps, // ORK = 1871
    CEFBS_None, // OY = 1872
    CEFBS_None, // PACK = 1873
    CEFBS_None, // PALB = 1874
    CEFBS_None, // PC = 1875
    CEFBS_FeatureMessageSecurityAssist4, // PCC = 1876
    CEFBS_FeatureMessageSecurityAssist3, // PCKMO = 1877
    CEFBS_None, // PFD = 1878
    CEFBS_None, // PFDRL = 1879
    CEFBS_None, // PFMF = 1880
    CEFBS_None, // PFPO = 1881
    CEFBS_None, // PGIN = 1882
    CEFBS_None, // PGOUT = 1883
    CEFBS_None, // PKA = 1884
    CEFBS_None, // PKU = 1885
    CEFBS_None, // PLO = 1886
    CEFBS_FeaturePopulationCount, // POPCNT = 1887
    CEFBS_FeatureMiscellaneousExtensions3, // POPCNTOpt = 1888
    CEFBS_FeatureProcessorAssist, // PPA = 1889
    CEFBS_FeatureMessageSecurityAssist5, // PPNO = 1890
    CEFBS_None, // PR = 1891
    CEFBS_FeatureMessageSecurityAssist7, // PRNO = 1892
    CEFBS_None, // PT = 1893
    CEFBS_None, // PTF = 1894
    CEFBS_None, // PTFF = 1895
    CEFBS_None, // PTI = 1896
    CEFBS_None, // PTLB = 1897
    CEFBS_None, // QADTR = 1898
    CEFBS_None, // QAXTR = 1899
    CEFBS_None, // QCTRI = 1900
    CEFBS_None, // QSI = 1901
    CEFBS_None, // RCHP = 1902
    CEFBS_None, // RISBG = 1903
    CEFBS_None, // RISBG32 = 1904
    CEFBS_FeatureMiscellaneousExtensions, // RISBGN = 1905
    CEFBS_FeatureHighWord, // RISBHG = 1906
    CEFBS_FeatureHighWord, // RISBLG = 1907
    CEFBS_None, // RLL = 1908
    CEFBS_None, // RLLG = 1909
    CEFBS_None, // RNSBG = 1910
    CEFBS_None, // ROSBG = 1911
    CEFBS_None, // RP = 1912
    CEFBS_None, // RRBE = 1913
    CEFBS_FeatureResetReferenceBitsMultiple, // RRBM = 1914
    CEFBS_None, // RRDTR = 1915
    CEFBS_None, // RRXTR = 1916
    CEFBS_None, // RSCH = 1917
    CEFBS_None, // RXSBG = 1918
    CEFBS_None, // S = 1919
    CEFBS_None, // SAC = 1920
    CEFBS_None, // SACF = 1921
    CEFBS_None, // SAL = 1922
    CEFBS_None, // SAM24 = 1923
    CEFBS_None, // SAM31 = 1924
    CEFBS_None, // SAM64 = 1925
    CEFBS_None, // SAR = 1926
    CEFBS_None, // SCCTR = 1927
    CEFBS_None, // SCHM = 1928
    CEFBS_None, // SCK = 1929
    CEFBS_None, // SCKC = 1930
    CEFBS_None, // SCKPF = 1931
    CEFBS_None, // SD = 1932
    CEFBS_None, // SDB = 1933
    CEFBS_None, // SDBR = 1934
    CEFBS_None, // SDR = 1935
    CEFBS_None, // SDTR = 1936
    CEFBS_FeatureFPExtension, // SDTRA = 1937
    CEFBS_None, // SE = 1938
    CEFBS_None, // SEB = 1939
    CEFBS_None, // SEBR = 1940
    CEFBS_FeatureMiscellaneousExtensions3, // SELFHR = 1941
    CEFBS_FeatureMiscellaneousExtensions3, // SELFHRAsm = 1942
    CEFBS_FeatureMiscellaneousExtensions3, // SELFHRAsmE = 1943
    CEFBS_FeatureMiscellaneousExtensions3, // SELFHRAsmH = 1944
    CEFBS_FeatureMiscellaneousExtensions3, // SELFHRAsmHE = 1945
    CEFBS_FeatureMiscellaneousExtensions3, // SELFHRAsmL = 1946
    CEFBS_FeatureMiscellaneousExtensions3, // SELFHRAsmLE = 1947
    CEFBS_FeatureMiscellaneousExtensions3, // SELFHRAsmLH = 1948
    CEFBS_FeatureMiscellaneousExtensions3, // SELFHRAsmM = 1949
    CEFBS_FeatureMiscellaneousExtensions3, // SELFHRAsmNE = 1950
    CEFBS_FeatureMiscellaneousExtensions3, // SELFHRAsmNH = 1951
    CEFBS_FeatureMiscellaneousExtensions3, // SELFHRAsmNHE = 1952
    CEFBS_FeatureMiscellaneousExtensions3, // SELFHRAsmNL = 1953
    CEFBS_FeatureMiscellaneousExtensions3, // SELFHRAsmNLE = 1954
    CEFBS_FeatureMiscellaneousExtensions3, // SELFHRAsmNLH = 1955
    CEFBS_FeatureMiscellaneousExtensions3, // SELFHRAsmNM = 1956
    CEFBS_FeatureMiscellaneousExtensions3, // SELFHRAsmNO = 1957
    CEFBS_FeatureMiscellaneousExtensions3, // SELFHRAsmNP = 1958
    CEFBS_FeatureMiscellaneousExtensions3, // SELFHRAsmNZ = 1959
    CEFBS_FeatureMiscellaneousExtensions3, // SELFHRAsmO = 1960
    CEFBS_FeatureMiscellaneousExtensions3, // SELFHRAsmP = 1961
    CEFBS_FeatureMiscellaneousExtensions3, // SELFHRAsmZ = 1962
    CEFBS_FeatureMiscellaneousExtensions3, // SELGR = 1963
    CEFBS_FeatureMiscellaneousExtensions3, // SELGRAsm = 1964
    CEFBS_FeatureMiscellaneousExtensions3, // SELGRAsmE = 1965
    CEFBS_FeatureMiscellaneousExtensions3, // SELGRAsmH = 1966
    CEFBS_FeatureMiscellaneousExtensions3, // SELGRAsmHE = 1967
    CEFBS_FeatureMiscellaneousExtensions3, // SELGRAsmL = 1968
    CEFBS_FeatureMiscellaneousExtensions3, // SELGRAsmLE = 1969
    CEFBS_FeatureMiscellaneousExtensions3, // SELGRAsmLH = 1970
    CEFBS_FeatureMiscellaneousExtensions3, // SELGRAsmM = 1971
    CEFBS_FeatureMiscellaneousExtensions3, // SELGRAsmNE = 1972
    CEFBS_FeatureMiscellaneousExtensions3, // SELGRAsmNH = 1973
    CEFBS_FeatureMiscellaneousExtensions3, // SELGRAsmNHE = 1974
    CEFBS_FeatureMiscellaneousExtensions3, // SELGRAsmNL = 1975
    CEFBS_FeatureMiscellaneousExtensions3, // SELGRAsmNLE = 1976
    CEFBS_FeatureMiscellaneousExtensions3, // SELGRAsmNLH = 1977
    CEFBS_FeatureMiscellaneousExtensions3, // SELGRAsmNM = 1978
    CEFBS_FeatureMiscellaneousExtensions3, // SELGRAsmNO = 1979
    CEFBS_FeatureMiscellaneousExtensions3, // SELGRAsmNP = 1980
    CEFBS_FeatureMiscellaneousExtensions3, // SELGRAsmNZ = 1981
    CEFBS_FeatureMiscellaneousExtensions3, // SELGRAsmO = 1982
    CEFBS_FeatureMiscellaneousExtensions3, // SELGRAsmP = 1983
    CEFBS_FeatureMiscellaneousExtensions3, // SELGRAsmZ = 1984
    CEFBS_FeatureMiscellaneousExtensions3, // SELR = 1985
    CEFBS_FeatureMiscellaneousExtensions3, // SELRAsm = 1986
    CEFBS_FeatureMiscellaneousExtensions3, // SELRAsmE = 1987
    CEFBS_FeatureMiscellaneousExtensions3, // SELRAsmH = 1988
    CEFBS_FeatureMiscellaneousExtensions3, // SELRAsmHE = 1989
    CEFBS_FeatureMiscellaneousExtensions3, // SELRAsmL = 1990
    CEFBS_FeatureMiscellaneousExtensions3, // SELRAsmLE = 1991
    CEFBS_FeatureMiscellaneousExtensions3, // SELRAsmLH = 1992
    CEFBS_FeatureMiscellaneousExtensions3, // SELRAsmM = 1993
    CEFBS_FeatureMiscellaneousExtensions3, // SELRAsmNE = 1994
    CEFBS_FeatureMiscellaneousExtensions3, // SELRAsmNH = 1995
    CEFBS_FeatureMiscellaneousExtensions3, // SELRAsmNHE = 1996
    CEFBS_FeatureMiscellaneousExtensions3, // SELRAsmNL = 1997
    CEFBS_FeatureMiscellaneousExtensions3, // SELRAsmNLE = 1998
    CEFBS_FeatureMiscellaneousExtensions3, // SELRAsmNLH = 1999
    CEFBS_FeatureMiscellaneousExtensions3, // SELRAsmNM = 2000
    CEFBS_FeatureMiscellaneousExtensions3, // SELRAsmNO = 2001
    CEFBS_FeatureMiscellaneousExtensions3, // SELRAsmNP = 2002
    CEFBS_FeatureMiscellaneousExtensions3, // SELRAsmNZ = 2003
    CEFBS_FeatureMiscellaneousExtensions3, // SELRAsmO = 2004
    CEFBS_FeatureMiscellaneousExtensions3, // SELRAsmP = 2005
    CEFBS_FeatureMiscellaneousExtensions3, // SELRAsmZ = 2006
    CEFBS_None, // SER = 2007
    CEFBS_None, // SFASR = 2008
    CEFBS_None, // SFPC = 2009
    CEFBS_None, // SG = 2010
    CEFBS_None, // SGF = 2011
    CEFBS_None, // SGFR = 2012
    CEFBS_FeatureMiscellaneousExtensions2, // SGH = 2013
    CEFBS_None, // SGR = 2014
    CEFBS_FeatureDistinctOps, // SGRK = 2015
    CEFBS_None, // SH = 2016
    CEFBS_FeatureHighWord, // SHHHR = 2017
    CEFBS_FeatureHighWord, // SHHLR = 2018
    CEFBS_None, // SHY = 2019
    CEFBS_None, // SIE = 2020
    CEFBS_None, // SIGA = 2021
    CEFBS_None, // SIGP = 2022
    CEFBS_None, // SL = 2023
    CEFBS_None, // SLA = 2024
    CEFBS_None, // SLAG = 2025
    CEFBS_FeatureDistinctOps, // SLAK = 2026
    CEFBS_None, // SLB = 2027
    CEFBS_None, // SLBG = 2028
    CEFBS_None, // SLBGR = 2029
    CEFBS_None, // SLBR = 2030
    CEFBS_None, // SLDA = 2031
    CEFBS_None, // SLDL = 2032
    CEFBS_None, // SLDT = 2033
    CEFBS_None, // SLFI = 2034
    CEFBS_None, // SLG = 2035
    CEFBS_None, // SLGF = 2036
    CEFBS_None, // SLGFI = 2037
    CEFBS_None, // SLGFR = 2038
    CEFBS_None, // SLGR = 2039
    CEFBS_FeatureDistinctOps, // SLGRK = 2040
    CEFBS_FeatureHighWord, // SLHHHR = 2041
    CEFBS_FeatureHighWord, // SLHHLR = 2042
    CEFBS_None, // SLL = 2043
    CEFBS_None, // SLLG = 2044
    CEFBS_FeatureDistinctOps, // SLLK = 2045
    CEFBS_None, // SLR = 2046
    CEFBS_FeatureDistinctOps, // SLRK = 2047
    CEFBS_None, // SLXT = 2048
    CEFBS_None, // SLY = 2049
    CEFBS_FeatureEnhancedSort, // SORTL = 2050
    CEFBS_None, // SP = 2051
    CEFBS_None, // SPCTR = 2052
    CEFBS_None, // SPKA = 2053
    CEFBS_None, // SPM = 2054
    CEFBS_None, // SPT = 2055
    CEFBS_None, // SPX = 2056
    CEFBS_None, // SQD = 2057
    CEFBS_None, // SQDB = 2058
    CEFBS_None, // SQDBR = 2059
    CEFBS_None, // SQDR = 2060
    CEFBS_None, // SQE = 2061
    CEFBS_None, // SQEB = 2062
    CEFBS_None, // SQEBR = 2063
    CEFBS_None, // SQER = 2064
    CEFBS_None, // SQXBR = 2065
    CEFBS_None, // SQXR = 2066
    CEFBS_None, // SR = 2067
    CEFBS_None, // SRA = 2068
    CEFBS_None, // SRAG = 2069
    CEFBS_FeatureDistinctOps, // SRAK = 2070
    CEFBS_None, // SRDA = 2071
    CEFBS_None, // SRDL = 2072
    CEFBS_None, // SRDT = 2073
    CEFBS_FeatureDistinctOps, // SRK = 2074
    CEFBS_None, // SRL = 2075
    CEFBS_None, // SRLG = 2076
    CEFBS_FeatureDistinctOps, // SRLK = 2077
    CEFBS_None, // SRNM = 2078
    CEFBS_FeatureFPExtension, // SRNMB = 2079
    CEFBS_None, // SRNMT = 2080
    CEFBS_None, // SRP = 2081
    CEFBS_None, // SRST = 2082
    CEFBS_None, // SRSTU = 2083
    CEFBS_None, // SRXT = 2084
    CEFBS_None, // SSAIR = 2085
    CEFBS_None, // SSAR = 2086
    CEFBS_None, // SSCH = 2087
    CEFBS_None, // SSKE = 2088
    CEFBS_None, // SSKEOpt = 2089
    CEFBS_None, // SSM = 2090
    CEFBS_None, // ST = 2091
    CEFBS_None, // STAM = 2092
    CEFBS_None, // STAMY = 2093
    CEFBS_None, // STAP = 2094
    CEFBS_None, // STC = 2095
    CEFBS_FeatureHighWord, // STCH = 2096
    CEFBS_None, // STCK = 2097
    CEFBS_None, // STCKC = 2098
    CEFBS_None, // STCKE = 2099
    CEFBS_None, // STCKF = 2100
    CEFBS_None, // STCM = 2101
    CEFBS_None, // STCMH = 2102
    CEFBS_None, // STCMY = 2103
    CEFBS_None, // STCPS = 2104
    CEFBS_None, // STCRW = 2105
    CEFBS_None, // STCTG = 2106
    CEFBS_None, // STCTL = 2107
    CEFBS_None, // STCY = 2108
    CEFBS_None, // STD = 2109
    CEFBS_None, // STDY = 2110
    CEFBS_None, // STE = 2111
    CEFBS_None, // STEY = 2112
    CEFBS_FeatureHighWord, // STFH = 2113
    CEFBS_None, // STFL = 2114
    CEFBS_None, // STFLE = 2115
    CEFBS_None, // STFPC = 2116
    CEFBS_None, // STG = 2117
    CEFBS_None, // STGRL = 2118
    CEFBS_FeatureGuardedStorage, // STGSC = 2119
    CEFBS_None, // STH = 2120
    CEFBS_FeatureHighWord, // STHH = 2121
    CEFBS_None, // STHRL = 2122
    CEFBS_None, // STHY = 2123
    CEFBS_None, // STIDP = 2124
    CEFBS_None, // STM = 2125
    CEFBS_None, // STMG = 2126
    CEFBS_None, // STMH = 2127
    CEFBS_None, // STMY = 2128
    CEFBS_None, // STNSM = 2129
    CEFBS_FeatureLoadStoreOnCond, // STOC = 2130
    CEFBS_FeatureLoadStoreOnCond, // STOCAsm = 2131
    CEFBS_FeatureLoadStoreOnCond, // STOCAsmE = 2132
    CEFBS_FeatureLoadStoreOnCond, // STOCAsmH = 2133
    CEFBS_FeatureLoadStoreOnCond, // STOCAsmHE = 2134
    CEFBS_FeatureLoadStoreOnCond, // STOCAsmL = 2135
    CEFBS_FeatureLoadStoreOnCond, // STOCAsmLE = 2136
    CEFBS_FeatureLoadStoreOnCond, // STOCAsmLH = 2137
    CEFBS_FeatureLoadStoreOnCond, // STOCAsmM = 2138
    CEFBS_FeatureLoadStoreOnCond, // STOCAsmNE = 2139
    CEFBS_FeatureLoadStoreOnCond, // STOCAsmNH = 2140
    CEFBS_FeatureLoadStoreOnCond, // STOCAsmNHE = 2141
    CEFBS_FeatureLoadStoreOnCond, // STOCAsmNL = 2142
    CEFBS_FeatureLoadStoreOnCond, // STOCAsmNLE = 2143
    CEFBS_FeatureLoadStoreOnCond, // STOCAsmNLH = 2144
    CEFBS_FeatureLoadStoreOnCond, // STOCAsmNM = 2145
    CEFBS_FeatureLoadStoreOnCond, // STOCAsmNO = 2146
    CEFBS_FeatureLoadStoreOnCond, // STOCAsmNP = 2147
    CEFBS_FeatureLoadStoreOnCond, // STOCAsmNZ = 2148
    CEFBS_FeatureLoadStoreOnCond, // STOCAsmO = 2149
    CEFBS_FeatureLoadStoreOnCond, // STOCAsmP = 2150
    CEFBS_FeatureLoadStoreOnCond, // STOCAsmZ = 2151
    CEFBS_FeatureLoadStoreOnCond2, // STOCFH = 2152
    CEFBS_FeatureLoadStoreOnCond2, // STOCFHAsm = 2153
    CEFBS_FeatureLoadStoreOnCond2, // STOCFHAsmE = 2154
    CEFBS_FeatureLoadStoreOnCond2, // STOCFHAsmH = 2155
    CEFBS_FeatureLoadStoreOnCond2, // STOCFHAsmHE = 2156
    CEFBS_FeatureLoadStoreOnCond2, // STOCFHAsmL = 2157
    CEFBS_FeatureLoadStoreOnCond2, // STOCFHAsmLE = 2158
    CEFBS_FeatureLoadStoreOnCond2, // STOCFHAsmLH = 2159
    CEFBS_FeatureLoadStoreOnCond2, // STOCFHAsmM = 2160
    CEFBS_FeatureLoadStoreOnCond2, // STOCFHAsmNE = 2161
    CEFBS_FeatureLoadStoreOnCond2, // STOCFHAsmNH = 2162
    CEFBS_FeatureLoadStoreOnCond2, // STOCFHAsmNHE = 2163
    CEFBS_FeatureLoadStoreOnCond2, // STOCFHAsmNL = 2164
    CEFBS_FeatureLoadStoreOnCond2, // STOCFHAsmNLE = 2165
    CEFBS_FeatureLoadStoreOnCond2, // STOCFHAsmNLH = 2166
    CEFBS_FeatureLoadStoreOnCond2, // STOCFHAsmNM = 2167
    CEFBS_FeatureLoadStoreOnCond2, // STOCFHAsmNO = 2168
    CEFBS_FeatureLoadStoreOnCond2, // STOCFHAsmNP = 2169
    CEFBS_FeatureLoadStoreOnCond2, // STOCFHAsmNZ = 2170
    CEFBS_FeatureLoadStoreOnCond2, // STOCFHAsmO = 2171
    CEFBS_FeatureLoadStoreOnCond2, // STOCFHAsmP = 2172
    CEFBS_FeatureLoadStoreOnCond2, // STOCFHAsmZ = 2173
    CEFBS_FeatureLoadStoreOnCond, // STOCG = 2174
    CEFBS_FeatureLoadStoreOnCond, // STOCGAsm = 2175
    CEFBS_FeatureLoadStoreOnCond, // STOCGAsmE = 2176
    CEFBS_FeatureLoadStoreOnCond, // STOCGAsmH = 2177
    CEFBS_FeatureLoadStoreOnCond, // STOCGAsmHE = 2178
    CEFBS_FeatureLoadStoreOnCond, // STOCGAsmL = 2179
    CEFBS_FeatureLoadStoreOnCond, // STOCGAsmLE = 2180
    CEFBS_FeatureLoadStoreOnCond, // STOCGAsmLH = 2181
    CEFBS_FeatureLoadStoreOnCond, // STOCGAsmM = 2182
    CEFBS_FeatureLoadStoreOnCond, // STOCGAsmNE = 2183
    CEFBS_FeatureLoadStoreOnCond, // STOCGAsmNH = 2184
    CEFBS_FeatureLoadStoreOnCond, // STOCGAsmNHE = 2185
    CEFBS_FeatureLoadStoreOnCond, // STOCGAsmNL = 2186
    CEFBS_FeatureLoadStoreOnCond, // STOCGAsmNLE = 2187
    CEFBS_FeatureLoadStoreOnCond, // STOCGAsmNLH = 2188
    CEFBS_FeatureLoadStoreOnCond, // STOCGAsmNM = 2189
    CEFBS_FeatureLoadStoreOnCond, // STOCGAsmNO = 2190
    CEFBS_FeatureLoadStoreOnCond, // STOCGAsmNP = 2191
    CEFBS_FeatureLoadStoreOnCond, // STOCGAsmNZ = 2192
    CEFBS_FeatureLoadStoreOnCond, // STOCGAsmO = 2193
    CEFBS_FeatureLoadStoreOnCond, // STOCGAsmP = 2194
    CEFBS_FeatureLoadStoreOnCond, // STOCGAsmZ = 2195
    CEFBS_None, // STOSM = 2196
    CEFBS_None, // STPQ = 2197
    CEFBS_None, // STPT = 2198
    CEFBS_None, // STPX = 2199
    CEFBS_None, // STRAG = 2200
    CEFBS_None, // STRL = 2201
    CEFBS_None, // STRV = 2202
    CEFBS_None, // STRVG = 2203
    CEFBS_None, // STRVH = 2204
    CEFBS_None, // STSCH = 2205
    CEFBS_None, // STSI = 2206
    CEFBS_None, // STURA = 2207
    CEFBS_None, // STURG = 2208
    CEFBS_None, // STY = 2209
    CEFBS_None, // SU = 2210
    CEFBS_None, // SUR = 2211
    CEFBS_None, // SVC = 2212
    CEFBS_None, // SW = 2213
    CEFBS_None, // SWR = 2214
    CEFBS_None, // SXBR = 2215
    CEFBS_None, // SXR = 2216
    CEFBS_None, // SXTR = 2217
    CEFBS_FeatureFPExtension, // SXTRA = 2218
    CEFBS_None, // SY = 2219
    CEFBS_FeatureTransactionalExecution, // TABORT = 2220
    CEFBS_None, // TAM = 2221
    CEFBS_None, // TAR = 2222
    CEFBS_None, // TB = 2223
    CEFBS_None, // TBDR = 2224
    CEFBS_None, // TBEDR = 2225
    CEFBS_FeatureTransactionalExecution, // TBEGIN = 2226
    CEFBS_FeatureTransactionalExecution, // TBEGINC = 2227
    CEFBS_None, // TCDB = 2228
    CEFBS_None, // TCEB = 2229
    CEFBS_None, // TCXB = 2230
    CEFBS_None, // TDCDT = 2231
    CEFBS_None, // TDCET = 2232
    CEFBS_None, // TDCXT = 2233
    CEFBS_None, // TDGDT = 2234
    CEFBS_None, // TDGET = 2235
    CEFBS_None, // TDGXT = 2236
    CEFBS_FeatureTransactionalExecution, // TEND = 2237
    CEFBS_None, // THDER = 2238
    CEFBS_None, // THDR = 2239
    CEFBS_None, // TM = 2240
    CEFBS_None, // TMHH = 2241
    CEFBS_None, // TMHL = 2242
    CEFBS_None, // TMLH = 2243
    CEFBS_None, // TMLL = 2244
    CEFBS_None, // TMY = 2245
    CEFBS_None, // TP = 2246
    CEFBS_None, // TPI = 2247
    CEFBS_None, // TPROT = 2248
    CEFBS_None, // TR = 2249
    CEFBS_None, // TRACE = 2250
    CEFBS_None, // TRACG = 2251
    CEFBS_None, // TRAP2 = 2252
    CEFBS_None, // TRAP4 = 2253
    CEFBS_None, // TRE = 2254
    CEFBS_None, // TROO = 2255
    CEFBS_None, // TROOOpt = 2256
    CEFBS_None, // TROT = 2257
    CEFBS_None, // TROTOpt = 2258
    CEFBS_None, // TRT = 2259
    CEFBS_None, // TRTE = 2260
    CEFBS_None, // TRTEOpt = 2261
    CEFBS_None, // TRTO = 2262
    CEFBS_None, // TRTOOpt = 2263
    CEFBS_None, // TRTR = 2264
    CEFBS_None, // TRTRE = 2265
    CEFBS_None, // TRTREOpt = 2266
    CEFBS_None, // TRTT = 2267
    CEFBS_None, // TRTTOpt = 2268
    CEFBS_None, // TS = 2269
    CEFBS_None, // TSCH = 2270
    CEFBS_None, // UNPK = 2271
    CEFBS_None, // UNPKA = 2272
    CEFBS_None, // UNPKU = 2273
    CEFBS_None, // UPT = 2274
    CEFBS_FeatureVector, // VA = 2275
    CEFBS_FeatureVector, // VAB = 2276
    CEFBS_FeatureVector, // VAC = 2277
    CEFBS_FeatureVector, // VACC = 2278
    CEFBS_FeatureVector, // VACCB = 2279
    CEFBS_FeatureVector, // VACCC = 2280
    CEFBS_FeatureVector, // VACCCQ = 2281
    CEFBS_FeatureVector, // VACCF = 2282
    CEFBS_FeatureVector, // VACCG = 2283
    CEFBS_FeatureVector, // VACCH = 2284
    CEFBS_FeatureVector, // VACCQ = 2285
    CEFBS_FeatureVector, // VACQ = 2286
    CEFBS_FeatureVector, // VAF = 2287
    CEFBS_FeatureVector, // VAG = 2288
    CEFBS_FeatureVector, // VAH = 2289
    CEFBS_FeatureVectorPackedDecimal, // VAP = 2290
    CEFBS_FeatureVector, // VAQ = 2291
    CEFBS_FeatureVector, // VAVG = 2292
    CEFBS_FeatureVector, // VAVGB = 2293
    CEFBS_FeatureVector, // VAVGF = 2294
    CEFBS_FeatureVector, // VAVGG = 2295
    CEFBS_FeatureVector, // VAVGH = 2296
    CEFBS_FeatureVector, // VAVGL = 2297
    CEFBS_FeatureVector, // VAVGLB = 2298
    CEFBS_FeatureVector, // VAVGLF = 2299
    CEFBS_FeatureVector, // VAVGLG = 2300
    CEFBS_FeatureVector, // VAVGLH = 2301
    CEFBS_FeatureVectorEnhancements1, // VBPERM = 2302
    CEFBS_FeatureVector, // VCDG = 2303
    CEFBS_FeatureVector, // VCDGB = 2304
    CEFBS_FeatureVector, // VCDLG = 2305
    CEFBS_FeatureVector, // VCDLGB = 2306
    CEFBS_FeatureVectorEnhancements2, // VCEFB = 2307
    CEFBS_FeatureVectorEnhancements2, // VCELFB = 2308
    CEFBS_FeatureVector, // VCEQ = 2309
    CEFBS_FeatureVector, // VCEQB = 2310
    CEFBS_FeatureVector, // VCEQBS = 2311
    CEFBS_FeatureVector, // VCEQF = 2312
    CEFBS_FeatureVector, // VCEQFS = 2313
    CEFBS_FeatureVector, // VCEQG = 2314
    CEFBS_FeatureVector, // VCEQGS = 2315
    CEFBS_FeatureVector, // VCEQH = 2316
    CEFBS_FeatureVector, // VCEQHS = 2317
    CEFBS_FeatureVectorEnhancements2, // VCFEB = 2318
    CEFBS_FeatureVectorEnhancements2, // VCFPL = 2319
    CEFBS_FeatureVectorEnhancements2, // VCFPS = 2320
    CEFBS_FeatureVector, // VCGD = 2321
    CEFBS_FeatureVector, // VCGDB = 2322
    CEFBS_FeatureVector, // VCH = 2323
    CEFBS_FeatureVector, // VCHB = 2324
    CEFBS_FeatureVector, // VCHBS = 2325
    CEFBS_FeatureVector, // VCHF = 2326
    CEFBS_FeatureVector, // VCHFS = 2327
    CEFBS_FeatureVector, // VCHG = 2328
    CEFBS_FeatureVector, // VCHGS = 2329
    CEFBS_FeatureVector, // VCHH = 2330
    CEFBS_FeatureVector, // VCHHS = 2331
    CEFBS_FeatureVector, // VCHL = 2332
    CEFBS_FeatureVector, // VCHLB = 2333
    CEFBS_FeatureVector, // VCHLBS = 2334
    CEFBS_FeatureVector, // VCHLF = 2335
    CEFBS_FeatureVector, // VCHLFS = 2336
    CEFBS_FeatureVector, // VCHLG = 2337
    CEFBS_FeatureVector, // VCHLGS = 2338
    CEFBS_FeatureVector, // VCHLH = 2339
    CEFBS_FeatureVector, // VCHLHS = 2340
    CEFBS_FeatureVector, // VCKSM = 2341
    CEFBS_FeatureVectorEnhancements2, // VCLFEB = 2342
    CEFBS_FeatureVectorEnhancements2, // VCLFP = 2343
    CEFBS_FeatureVector, // VCLGD = 2344
    CEFBS_FeatureVector, // VCLGDB = 2345
    CEFBS_FeatureVector, // VCLZ = 2346
    CEFBS_FeatureVector, // VCLZB = 2347
    CEFBS_FeatureVector, // VCLZF = 2348
    CEFBS_FeatureVector, // VCLZG = 2349
    CEFBS_FeatureVector, // VCLZH = 2350
    CEFBS_FeatureVectorPackedDecimal, // VCP = 2351
    CEFBS_FeatureVectorEnhancements2, // VCSFP = 2352
    CEFBS_FeatureVector, // VCTZ = 2353
    CEFBS_FeatureVector, // VCTZB = 2354
    CEFBS_FeatureVector, // VCTZF = 2355
    CEFBS_FeatureVector, // VCTZG = 2356
    CEFBS_FeatureVector, // VCTZH = 2357
    CEFBS_FeatureVectorPackedDecimal, // VCVB = 2358
    CEFBS_FeatureVectorPackedDecimal, // VCVBG = 2359
    CEFBS_FeatureVectorPackedDecimalEnhancement, // VCVBGOpt = 2360
    CEFBS_FeatureVectorPackedDecimalEnhancement, // VCVBOpt = 2361
    CEFBS_FeatureVectorPackedDecimal, // VCVD = 2362
    CEFBS_FeatureVectorPackedDecimal, // VCVDG = 2363
    CEFBS_FeatureVectorPackedDecimal, // VDP = 2364
    CEFBS_FeatureVector, // VEC = 2365
    CEFBS_FeatureVector, // VECB = 2366
    CEFBS_FeatureVector, // VECF = 2367
    CEFBS_FeatureVector, // VECG = 2368
    CEFBS_FeatureVector, // VECH = 2369
    CEFBS_FeatureVector, // VECL = 2370
    CEFBS_FeatureVector, // VECLB = 2371
    CEFBS_FeatureVector, // VECLF = 2372
    CEFBS_FeatureVector, // VECLG = 2373
    CEFBS_FeatureVector, // VECLH = 2374
    CEFBS_FeatureVector, // VERIM = 2375
    CEFBS_FeatureVector, // VERIMB = 2376
    CEFBS_FeatureVector, // VERIMF = 2377
    CEFBS_FeatureVector, // VERIMG = 2378
    CEFBS_FeatureVector, // VERIMH = 2379
    CEFBS_FeatureVector, // VERLL = 2380
    CEFBS_FeatureVector, // VERLLB = 2381
    CEFBS_FeatureVector, // VERLLF = 2382
    CEFBS_FeatureVector, // VERLLG = 2383
    CEFBS_FeatureVector, // VERLLH = 2384
    CEFBS_FeatureVector, // VERLLV = 2385
    CEFBS_FeatureVector, // VERLLVB = 2386
    CEFBS_FeatureVector, // VERLLVF = 2387
    CEFBS_FeatureVector, // VERLLVG = 2388
    CEFBS_FeatureVector, // VERLLVH = 2389
    CEFBS_FeatureVector, // VESL = 2390
    CEFBS_FeatureVector, // VESLB = 2391
    CEFBS_FeatureVector, // VESLF = 2392
    CEFBS_FeatureVector, // VESLG = 2393
    CEFBS_FeatureVector, // VESLH = 2394
    CEFBS_FeatureVector, // VESLV = 2395
    CEFBS_FeatureVector, // VESLVB = 2396
    CEFBS_FeatureVector, // VESLVF = 2397
    CEFBS_FeatureVector, // VESLVG = 2398
    CEFBS_FeatureVector, // VESLVH = 2399
    CEFBS_FeatureVector, // VESRA = 2400
    CEFBS_FeatureVector, // VESRAB = 2401
    CEFBS_FeatureVector, // VESRAF = 2402
    CEFBS_FeatureVector, // VESRAG = 2403
    CEFBS_FeatureVector, // VESRAH = 2404
    CEFBS_FeatureVector, // VESRAV = 2405
    CEFBS_FeatureVector, // VESRAVB = 2406
    CEFBS_FeatureVector, // VESRAVF = 2407
    CEFBS_FeatureVector, // VESRAVG = 2408
    CEFBS_FeatureVector, // VESRAVH = 2409
    CEFBS_FeatureVector, // VESRL = 2410
    CEFBS_FeatureVector, // VESRLB = 2411
    CEFBS_FeatureVector, // VESRLF = 2412
    CEFBS_FeatureVector, // VESRLG = 2413
    CEFBS_FeatureVector, // VESRLH = 2414
    CEFBS_FeatureVector, // VESRLV = 2415
    CEFBS_FeatureVector, // VESRLVB = 2416
    CEFBS_FeatureVector, // VESRLVF = 2417
    CEFBS_FeatureVector, // VESRLVG = 2418
    CEFBS_FeatureVector, // VESRLVH = 2419
    CEFBS_FeatureVector, // VFA = 2420
    CEFBS_FeatureVector, // VFADB = 2421
    CEFBS_FeatureVector, // VFAE = 2422
    CEFBS_FeatureVector, // VFAEB = 2423
    CEFBS_FeatureVector, // VFAEBS = 2424
    CEFBS_FeatureVector, // VFAEF = 2425
    CEFBS_FeatureVector, // VFAEFS = 2426
    CEFBS_FeatureVector, // VFAEH = 2427
    CEFBS_FeatureVector, // VFAEHS = 2428
    CEFBS_FeatureVector, // VFAEZB = 2429
    CEFBS_FeatureVector, // VFAEZBS = 2430
    CEFBS_FeatureVector, // VFAEZF = 2431
    CEFBS_FeatureVector, // VFAEZFS = 2432
    CEFBS_FeatureVector, // VFAEZH = 2433
    CEFBS_FeatureVector, // VFAEZHS = 2434
    CEFBS_FeatureVectorEnhancements1, // VFASB = 2435
    CEFBS_FeatureVector, // VFCE = 2436
    CEFBS_FeatureVector, // VFCEDB = 2437
    CEFBS_FeatureVector, // VFCEDBS = 2438
    CEFBS_FeatureVectorEnhancements1, // VFCESB = 2439
    CEFBS_FeatureVectorEnhancements1, // VFCESBS = 2440
    CEFBS_FeatureVector, // VFCH = 2441
    CEFBS_FeatureVector, // VFCHDB = 2442
    CEFBS_FeatureVector, // VFCHDBS = 2443
    CEFBS_FeatureVector, // VFCHE = 2444
    CEFBS_FeatureVector, // VFCHEDB = 2445
    CEFBS_FeatureVector, // VFCHEDBS = 2446
    CEFBS_FeatureVectorEnhancements1, // VFCHESB = 2447
    CEFBS_FeatureVectorEnhancements1, // VFCHESBS = 2448
    CEFBS_FeatureVectorEnhancements1, // VFCHSB = 2449
    CEFBS_FeatureVectorEnhancements1, // VFCHSBS = 2450
    CEFBS_FeatureVector, // VFD = 2451
    CEFBS_FeatureVector, // VFDDB = 2452
    CEFBS_FeatureVectorEnhancements1, // VFDSB = 2453
    CEFBS_FeatureVector, // VFEE = 2454
    CEFBS_FeatureVector, // VFEEB = 2455
    CEFBS_FeatureVector, // VFEEBS = 2456
    CEFBS_FeatureVector, // VFEEF = 2457
    CEFBS_FeatureVector, // VFEEFS = 2458
    CEFBS_FeatureVector, // VFEEH = 2459
    CEFBS_FeatureVector, // VFEEHS = 2460
    CEFBS_FeatureVector, // VFEEZB = 2461
    CEFBS_FeatureVector, // VFEEZBS = 2462
    CEFBS_FeatureVector, // VFEEZF = 2463
    CEFBS_FeatureVector, // VFEEZFS = 2464
    CEFBS_FeatureVector, // VFEEZH = 2465
    CEFBS_FeatureVector, // VFEEZHS = 2466
    CEFBS_FeatureVector, // VFENE = 2467
    CEFBS_FeatureVector, // VFENEB = 2468
    CEFBS_FeatureVector, // VFENEBS = 2469
    CEFBS_FeatureVector, // VFENEF = 2470
    CEFBS_FeatureVector, // VFENEFS = 2471
    CEFBS_FeatureVector, // VFENEH = 2472
    CEFBS_FeatureVector, // VFENEHS = 2473
    CEFBS_FeatureVector, // VFENEZB = 2474
    CEFBS_FeatureVector, // VFENEZBS = 2475
    CEFBS_FeatureVector, // VFENEZF = 2476
    CEFBS_FeatureVector, // VFENEZFS = 2477
    CEFBS_FeatureVector, // VFENEZH = 2478
    CEFBS_FeatureVector, // VFENEZHS = 2479
    CEFBS_FeatureVector, // VFI = 2480
    CEFBS_FeatureVector, // VFIDB = 2481
    CEFBS_FeatureVectorEnhancements1, // VFISB = 2482
    CEFBS_FeatureVectorEnhancements1, // VFKEDB = 2483
    CEFBS_FeatureVectorEnhancements1, // VFKEDBS = 2484
    CEFBS_FeatureVectorEnhancements1, // VFKESB = 2485
    CEFBS_FeatureVectorEnhancements1, // VFKESBS = 2486
    CEFBS_FeatureVectorEnhancements1, // VFKHDB = 2487
    CEFBS_FeatureVectorEnhancements1, // VFKHDBS = 2488
    CEFBS_FeatureVectorEnhancements1, // VFKHEDB = 2489
    CEFBS_FeatureVectorEnhancements1, // VFKHEDBS = 2490
    CEFBS_FeatureVectorEnhancements1, // VFKHESB = 2491
    CEFBS_FeatureVectorEnhancements1, // VFKHESBS = 2492
    CEFBS_FeatureVectorEnhancements1, // VFKHSB = 2493
    CEFBS_FeatureVectorEnhancements1, // VFKHSBS = 2494
    CEFBS_FeatureVector, // VFLCDB = 2495
    CEFBS_FeatureVectorEnhancements1, // VFLCSB = 2496
    CEFBS_FeatureVectorEnhancements1, // VFLL = 2497
    CEFBS_FeatureVectorEnhancements1, // VFLLS = 2498
    CEFBS_FeatureVector, // VFLNDB = 2499
    CEFBS_FeatureVectorEnhancements1, // VFLNSB = 2500
    CEFBS_FeatureVector, // VFLPDB = 2501
    CEFBS_FeatureVectorEnhancements1, // VFLPSB = 2502
    CEFBS_FeatureVectorEnhancements1, // VFLR = 2503
    CEFBS_FeatureVectorEnhancements1, // VFLRD = 2504
    CEFBS_FeatureVector, // VFM = 2505
    CEFBS_FeatureVector, // VFMA = 2506
    CEFBS_FeatureVector, // VFMADB = 2507
    CEFBS_FeatureVectorEnhancements1, // VFMASB = 2508
    CEFBS_FeatureVectorEnhancements1, // VFMAX = 2509
    CEFBS_FeatureVectorEnhancements1, // VFMAXDB = 2510
    CEFBS_FeatureVectorEnhancements1, // VFMAXSB = 2511
    CEFBS_FeatureVector, // VFMDB = 2512
    CEFBS_FeatureVectorEnhancements1, // VFMIN = 2513
    CEFBS_FeatureVectorEnhancements1, // VFMINDB = 2514
    CEFBS_FeatureVectorEnhancements1, // VFMINSB = 2515
    CEFBS_FeatureVector, // VFMS = 2516
    CEFBS_FeatureVectorEnhancements1, // VFMSB = 2517
    CEFBS_FeatureVector, // VFMSDB = 2518
    CEFBS_FeatureVectorEnhancements1, // VFMSSB = 2519
    CEFBS_FeatureVectorEnhancements1, // VFNMA = 2520
    CEFBS_FeatureVectorEnhancements1, // VFNMADB = 2521
    CEFBS_FeatureVectorEnhancements1, // VFNMASB = 2522
    CEFBS_FeatureVectorEnhancements1, // VFNMS = 2523
    CEFBS_FeatureVectorEnhancements1, // VFNMSDB = 2524
    CEFBS_FeatureVectorEnhancements1, // VFNMSSB = 2525
    CEFBS_FeatureVector, // VFPSO = 2526
    CEFBS_FeatureVector, // VFPSODB = 2527
    CEFBS_FeatureVectorEnhancements1, // VFPSOSB = 2528
    CEFBS_FeatureVector, // VFS = 2529
    CEFBS_FeatureVector, // VFSDB = 2530
    CEFBS_FeatureVector, // VFSQ = 2531
    CEFBS_FeatureVector, // VFSQDB = 2532
    CEFBS_FeatureVectorEnhancements1, // VFSQSB = 2533
    CEFBS_FeatureVectorEnhancements1, // VFSSB = 2534
    CEFBS_FeatureVector, // VFTCI = 2535
    CEFBS_FeatureVector, // VFTCIDB = 2536
    CEFBS_FeatureVectorEnhancements1, // VFTCISB = 2537
    CEFBS_FeatureVector, // VGBM = 2538
    CEFBS_FeatureVector, // VGEF = 2539
    CEFBS_FeatureVector, // VGEG = 2540
    CEFBS_FeatureVector, // VGFM = 2541
    CEFBS_FeatureVector, // VGFMA = 2542
    CEFBS_FeatureVector, // VGFMAB = 2543
    CEFBS_FeatureVector, // VGFMAF = 2544
    CEFBS_FeatureVector, // VGFMAG = 2545
    CEFBS_FeatureVector, // VGFMAH = 2546
    CEFBS_FeatureVector, // VGFMB = 2547
    CEFBS_FeatureVector, // VGFMF = 2548
    CEFBS_FeatureVector, // VGFMG = 2549
    CEFBS_FeatureVector, // VGFMH = 2550
    CEFBS_FeatureVector, // VGM = 2551
    CEFBS_FeatureVector, // VGMB = 2552
    CEFBS_FeatureVector, // VGMF = 2553
    CEFBS_FeatureVector, // VGMG = 2554
    CEFBS_FeatureVector, // VGMH = 2555
    CEFBS_FeatureVector, // VISTR = 2556
    CEFBS_FeatureVector, // VISTRB = 2557
    CEFBS_FeatureVector, // VISTRBS = 2558
    CEFBS_FeatureVector, // VISTRF = 2559
    CEFBS_FeatureVector, // VISTRFS = 2560
    CEFBS_FeatureVector, // VISTRH = 2561
    CEFBS_FeatureVector, // VISTRHS = 2562
    CEFBS_FeatureVector, // VL = 2563
    CEFBS_FeatureVector, // VLAlign = 2564
    CEFBS_FeatureVector, // VLBB = 2565
    CEFBS_FeatureVectorEnhancements2, // VLBR = 2566
    CEFBS_FeatureVectorEnhancements2, // VLBRF = 2567
    CEFBS_FeatureVectorEnhancements2, // VLBRG = 2568
    CEFBS_FeatureVectorEnhancements2, // VLBRH = 2569
    CEFBS_FeatureVectorEnhancements2, // VLBRQ = 2570
    CEFBS_FeatureVectorEnhancements2, // VLBRREP = 2571
    CEFBS_FeatureVectorEnhancements2, // VLBRREPF = 2572
    CEFBS_FeatureVectorEnhancements2, // VLBRREPG = 2573
    CEFBS_FeatureVectorEnhancements2, // VLBRREPH = 2574
    CEFBS_FeatureVector, // VLC = 2575
    CEFBS_FeatureVector, // VLCB = 2576
    CEFBS_FeatureVector, // VLCF = 2577
    CEFBS_FeatureVector, // VLCG = 2578
    CEFBS_FeatureVector, // VLCH = 2579
    CEFBS_FeatureVector, // VLDE = 2580
    CEFBS_FeatureVector, // VLDEB = 2581
    CEFBS_FeatureVector, // VLEB = 2582
    CEFBS_FeatureVectorEnhancements2, // VLEBRF = 2583
    CEFBS_FeatureVectorEnhancements2, // VLEBRG = 2584
    CEFBS_FeatureVectorEnhancements2, // VLEBRH = 2585
    CEFBS_FeatureVector, // VLED = 2586
    CEFBS_FeatureVector, // VLEDB = 2587
    CEFBS_FeatureVector, // VLEF = 2588
    CEFBS_FeatureVector, // VLEG = 2589
    CEFBS_FeatureVector, // VLEH = 2590
    CEFBS_FeatureVector, // VLEIB = 2591
    CEFBS_FeatureVector, // VLEIF = 2592
    CEFBS_FeatureVector, // VLEIG = 2593
    CEFBS_FeatureVector, // VLEIH = 2594
    CEFBS_FeatureVectorEnhancements2, // VLER = 2595
    CEFBS_FeatureVectorEnhancements2, // VLERF = 2596
    CEFBS_FeatureVectorEnhancements2, // VLERG = 2597
    CEFBS_FeatureVectorEnhancements2, // VLERH = 2598
    CEFBS_FeatureVector, // VLGV = 2599
    CEFBS_FeatureVector, // VLGVB = 2600
    CEFBS_FeatureVector, // VLGVF = 2601
    CEFBS_FeatureVector, // VLGVG = 2602
    CEFBS_FeatureVector, // VLGVH = 2603
    CEFBS_FeatureVectorPackedDecimal, // VLIP = 2604
    CEFBS_FeatureVector, // VLL = 2605
    CEFBS_FeatureVectorEnhancements2, // VLLEBRZ = 2606
    CEFBS_FeatureVectorEnhancements2, // VLLEBRZE = 2607
    CEFBS_FeatureVectorEnhancements2, // VLLEBRZF = 2608
    CEFBS_FeatureVectorEnhancements2, // VLLEBRZG = 2609
    CEFBS_FeatureVectorEnhancements2, // VLLEBRZH = 2610
    CEFBS_FeatureVector, // VLLEZ = 2611
    CEFBS_FeatureVector, // VLLEZB = 2612
    CEFBS_FeatureVector, // VLLEZF = 2613
    CEFBS_FeatureVector, // VLLEZG = 2614
    CEFBS_FeatureVector, // VLLEZH = 2615
    CEFBS_FeatureVectorEnhancements1, // VLLEZLF = 2616
    CEFBS_FeatureVector, // VLM = 2617
    CEFBS_FeatureVector, // VLMAlign = 2618
    CEFBS_FeatureVector, // VLP = 2619
    CEFBS_FeatureVector, // VLPB = 2620
    CEFBS_FeatureVector, // VLPF = 2621
    CEFBS_FeatureVector, // VLPG = 2622
    CEFBS_FeatureVector, // VLPH = 2623
    CEFBS_FeatureVector, // VLR = 2624
    CEFBS_FeatureVector, // VLREP = 2625
    CEFBS_FeatureVector, // VLREPB = 2626
    CEFBS_FeatureVector, // VLREPF = 2627
    CEFBS_FeatureVector, // VLREPG = 2628
    CEFBS_FeatureVector, // VLREPH = 2629
    CEFBS_FeatureVectorPackedDecimal, // VLRL = 2630
    CEFBS_FeatureVectorPackedDecimal, // VLRLR = 2631
    CEFBS_FeatureVector, // VLVG = 2632
    CEFBS_FeatureVector, // VLVGB = 2633
    CEFBS_FeatureVector, // VLVGF = 2634
    CEFBS_FeatureVector, // VLVGG = 2635
    CEFBS_FeatureVector, // VLVGH = 2636
    CEFBS_FeatureVector, // VLVGP = 2637
    CEFBS_FeatureVector, // VMAE = 2638
    CEFBS_FeatureVector, // VMAEB = 2639
    CEFBS_FeatureVector, // VMAEF = 2640
    CEFBS_FeatureVector, // VMAEH = 2641
    CEFBS_FeatureVector, // VMAH = 2642
    CEFBS_FeatureVector, // VMAHB = 2643
    CEFBS_FeatureVector, // VMAHF = 2644
    CEFBS_FeatureVector, // VMAHH = 2645
    CEFBS_FeatureVector, // VMAL = 2646
    CEFBS_FeatureVector, // VMALB = 2647
    CEFBS_FeatureVector, // VMALE = 2648
    CEFBS_FeatureVector, // VMALEB = 2649
    CEFBS_FeatureVector, // VMALEF = 2650
    CEFBS_FeatureVector, // VMALEH = 2651
    CEFBS_FeatureVector, // VMALF = 2652
    CEFBS_FeatureVector, // VMALH = 2653
    CEFBS_FeatureVector, // VMALHB = 2654
    CEFBS_FeatureVector, // VMALHF = 2655
    CEFBS_FeatureVector, // VMALHH = 2656
    CEFBS_FeatureVector, // VMALHW = 2657
    CEFBS_FeatureVector, // VMALO = 2658
    CEFBS_FeatureVector, // VMALOB = 2659
    CEFBS_FeatureVector, // VMALOF = 2660
    CEFBS_FeatureVector, // VMALOH = 2661
    CEFBS_FeatureVector, // VMAO = 2662
    CEFBS_FeatureVector, // VMAOB = 2663
    CEFBS_FeatureVector, // VMAOF = 2664
    CEFBS_FeatureVector, // VMAOH = 2665
    CEFBS_FeatureVector, // VME = 2666
    CEFBS_FeatureVector, // VMEB = 2667
    CEFBS_FeatureVector, // VMEF = 2668
    CEFBS_FeatureVector, // VMEH = 2669
    CEFBS_FeatureVector, // VMH = 2670
    CEFBS_FeatureVector, // VMHB = 2671
    CEFBS_FeatureVector, // VMHF = 2672
    CEFBS_FeatureVector, // VMHH = 2673
    CEFBS_FeatureVector, // VML = 2674
    CEFBS_FeatureVector, // VMLB = 2675
    CEFBS_FeatureVector, // VMLE = 2676
    CEFBS_FeatureVector, // VMLEB = 2677
    CEFBS_FeatureVector, // VMLEF = 2678
    CEFBS_FeatureVector, // VMLEH = 2679
    CEFBS_FeatureVector, // VMLF = 2680
    CEFBS_FeatureVector, // VMLH = 2681
    CEFBS_FeatureVector, // VMLHB = 2682
    CEFBS_FeatureVector, // VMLHF = 2683
    CEFBS_FeatureVector, // VMLHH = 2684
    CEFBS_FeatureVector, // VMLHW = 2685
    CEFBS_FeatureVector, // VMLO = 2686
    CEFBS_FeatureVector, // VMLOB = 2687
    CEFBS_FeatureVector, // VMLOF = 2688
    CEFBS_FeatureVector, // VMLOH = 2689
    CEFBS_FeatureVector, // VMN = 2690
    CEFBS_FeatureVector, // VMNB = 2691
    CEFBS_FeatureVector, // VMNF = 2692
    CEFBS_FeatureVector, // VMNG = 2693
    CEFBS_FeatureVector, // VMNH = 2694
    CEFBS_FeatureVector, // VMNL = 2695
    CEFBS_FeatureVector, // VMNLB = 2696
    CEFBS_FeatureVector, // VMNLF = 2697
    CEFBS_FeatureVector, // VMNLG = 2698
    CEFBS_FeatureVector, // VMNLH = 2699
    CEFBS_FeatureVector, // VMO = 2700
    CEFBS_FeatureVector, // VMOB = 2701
    CEFBS_FeatureVector, // VMOF = 2702
    CEFBS_FeatureVector, // VMOH = 2703
    CEFBS_FeatureVectorPackedDecimal, // VMP = 2704
    CEFBS_FeatureVector, // VMRH = 2705
    CEFBS_FeatureVector, // VMRHB = 2706
    CEFBS_FeatureVector, // VMRHF = 2707
    CEFBS_FeatureVector, // VMRHG = 2708
    CEFBS_FeatureVector, // VMRHH = 2709
    CEFBS_FeatureVector, // VMRL = 2710
    CEFBS_FeatureVector, // VMRLB = 2711
    CEFBS_FeatureVector, // VMRLF = 2712
    CEFBS_FeatureVector, // VMRLG = 2713
    CEFBS_FeatureVector, // VMRLH = 2714
    CEFBS_FeatureVectorEnhancements1, // VMSL = 2715
    CEFBS_FeatureVectorEnhancements1, // VMSLG = 2716
    CEFBS_FeatureVectorPackedDecimal, // VMSP = 2717
    CEFBS_FeatureVector, // VMX = 2718
    CEFBS_FeatureVector, // VMXB = 2719
    CEFBS_FeatureVector, // VMXF = 2720
    CEFBS_FeatureVector, // VMXG = 2721
    CEFBS_FeatureVector, // VMXH = 2722
    CEFBS_FeatureVector, // VMXL = 2723
    CEFBS_FeatureVector, // VMXLB = 2724
    CEFBS_FeatureVector, // VMXLF = 2725
    CEFBS_FeatureVector, // VMXLG = 2726
    CEFBS_FeatureVector, // VMXLH = 2727
    CEFBS_FeatureVector, // VN = 2728
    CEFBS_FeatureVector, // VNC = 2729
    CEFBS_FeatureVectorEnhancements1, // VNN = 2730
    CEFBS_FeatureVector, // VNO = 2731
    CEFBS_FeatureVectorEnhancements1, // VNX = 2732
    CEFBS_FeatureVector, // VO = 2733
    CEFBS_FeatureVectorEnhancements1, // VOC = 2734
    CEFBS_FeatureVector, // VONE = 2735
    CEFBS_FeatureVector, // VPDI = 2736
    CEFBS_FeatureVector, // VPERM = 2737
    CEFBS_FeatureVector, // VPK = 2738
    CEFBS_FeatureVector, // VPKF = 2739
    CEFBS_FeatureVector, // VPKG = 2740
    CEFBS_FeatureVector, // VPKH = 2741
    CEFBS_FeatureVector, // VPKLS = 2742
    CEFBS_FeatureVector, // VPKLSF = 2743
    CEFBS_FeatureVector, // VPKLSFS = 2744
    CEFBS_FeatureVector, // VPKLSG = 2745
    CEFBS_FeatureVector, // VPKLSGS = 2746
    CEFBS_FeatureVector, // VPKLSH = 2747
    CEFBS_FeatureVector, // VPKLSHS = 2748
    CEFBS_FeatureVector, // VPKS = 2749
    CEFBS_FeatureVector, // VPKSF = 2750
    CEFBS_FeatureVector, // VPKSFS = 2751
    CEFBS_FeatureVector, // VPKSG = 2752
    CEFBS_FeatureVector, // VPKSGS = 2753
    CEFBS_FeatureVector, // VPKSH = 2754
    CEFBS_FeatureVector, // VPKSHS = 2755
    CEFBS_FeatureVectorPackedDecimal, // VPKZ = 2756
    CEFBS_FeatureVector, // VPOPCT = 2757
    CEFBS_FeatureVectorEnhancements1, // VPOPCTB = 2758
    CEFBS_FeatureVectorEnhancements1, // VPOPCTF = 2759
    CEFBS_FeatureVectorEnhancements1, // VPOPCTG = 2760
    CEFBS_FeatureVectorEnhancements1, // VPOPCTH = 2761
    CEFBS_FeatureVectorPackedDecimal, // VPSOP = 2762
    CEFBS_FeatureVector, // VREP = 2763
    CEFBS_FeatureVector, // VREPB = 2764
    CEFBS_FeatureVector, // VREPF = 2765
    CEFBS_FeatureVector, // VREPG = 2766
    CEFBS_FeatureVector, // VREPH = 2767
    CEFBS_FeatureVector, // VREPI = 2768
    CEFBS_FeatureVector, // VREPIB = 2769
    CEFBS_FeatureVector, // VREPIF = 2770
    CEFBS_FeatureVector, // VREPIG = 2771
    CEFBS_FeatureVector, // VREPIH = 2772
    CEFBS_FeatureVectorPackedDecimal, // VRP = 2773
    CEFBS_FeatureVector, // VS = 2774
    CEFBS_FeatureVector, // VSB = 2775
    CEFBS_FeatureVector, // VSBCBI = 2776
    CEFBS_FeatureVector, // VSBCBIQ = 2777
    CEFBS_FeatureVector, // VSBI = 2778
    CEFBS_FeatureVector, // VSBIQ = 2779
    CEFBS_FeatureVector, // VSCBI = 2780
    CEFBS_FeatureVector, // VSCBIB = 2781
    CEFBS_FeatureVector, // VSCBIF = 2782
    CEFBS_FeatureVector, // VSCBIG = 2783
    CEFBS_FeatureVector, // VSCBIH = 2784
    CEFBS_FeatureVector, // VSCBIQ = 2785
    CEFBS_FeatureVector, // VSCEF = 2786
    CEFBS_FeatureVector, // VSCEG = 2787
    CEFBS_FeatureVectorPackedDecimal, // VSDP = 2788
    CEFBS_FeatureVector, // VSEG = 2789
    CEFBS_FeatureVector, // VSEGB = 2790
    CEFBS_FeatureVector, // VSEGF = 2791
    CEFBS_FeatureVector, // VSEGH = 2792
    CEFBS_FeatureVector, // VSEL = 2793
    CEFBS_FeatureVector, // VSF = 2794
    CEFBS_FeatureVector, // VSG = 2795
    CEFBS_FeatureVector, // VSH = 2796
    CEFBS_FeatureVector, // VSL = 2797
    CEFBS_FeatureVector, // VSLB = 2798
    CEFBS_FeatureVectorEnhancements2, // VSLD = 2799
    CEFBS_FeatureVector, // VSLDB = 2800
    CEFBS_FeatureVectorPackedDecimal, // VSP = 2801
    CEFBS_FeatureVector, // VSQ = 2802
    CEFBS_FeatureVector, // VSRA = 2803
    CEFBS_FeatureVector, // VSRAB = 2804
    CEFBS_FeatureVectorEnhancements2, // VSRD = 2805
    CEFBS_FeatureVector, // VSRL = 2806
    CEFBS_FeatureVector, // VSRLB = 2807
    CEFBS_FeatureVectorPackedDecimal, // VSRP = 2808
    CEFBS_FeatureVector, // VST = 2809
    CEFBS_FeatureVector, // VSTAlign = 2810
    CEFBS_FeatureVectorEnhancements2, // VSTBR = 2811
    CEFBS_FeatureVectorEnhancements2, // VSTBRF = 2812
    CEFBS_FeatureVectorEnhancements2, // VSTBRG = 2813
    CEFBS_FeatureVectorEnhancements2, // VSTBRH = 2814
    CEFBS_FeatureVectorEnhancements2, // VSTBRQ = 2815
    CEFBS_FeatureVector, // VSTEB = 2816
    CEFBS_FeatureVectorEnhancements2, // VSTEBRF = 2817
    CEFBS_FeatureVectorEnhancements2, // VSTEBRG = 2818
    CEFBS_FeatureVectorEnhancements2, // VSTEBRH = 2819
    CEFBS_FeatureVector, // VSTEF = 2820
    CEFBS_FeatureVector, // VSTEG = 2821
    CEFBS_FeatureVector, // VSTEH = 2822
    CEFBS_FeatureVectorEnhancements2, // VSTER = 2823
    CEFBS_FeatureVectorEnhancements2, // VSTERF = 2824
    CEFBS_FeatureVectorEnhancements2, // VSTERG = 2825
    CEFBS_FeatureVectorEnhancements2, // VSTERH = 2826
    CEFBS_FeatureVector, // VSTL = 2827
    CEFBS_FeatureVector, // VSTM = 2828
    CEFBS_FeatureVector, // VSTMAlign = 2829
    CEFBS_FeatureVector, // VSTRC = 2830
    CEFBS_FeatureVector, // VSTRCB = 2831
    CEFBS_FeatureVector, // VSTRCBS = 2832
    CEFBS_FeatureVector, // VSTRCF = 2833
    CEFBS_FeatureVector, // VSTRCFS = 2834
    CEFBS_FeatureVector, // VSTRCH = 2835
    CEFBS_FeatureVector, // VSTRCHS = 2836
    CEFBS_FeatureVector, // VSTRCZB = 2837
    CEFBS_FeatureVector, // VSTRCZBS = 2838
    CEFBS_FeatureVector, // VSTRCZF = 2839
    CEFBS_FeatureVector, // VSTRCZFS = 2840
    CEFBS_FeatureVector, // VSTRCZH = 2841
    CEFBS_FeatureVector, // VSTRCZHS = 2842
    CEFBS_FeatureVectorPackedDecimal, // VSTRL = 2843
    CEFBS_FeatureVectorPackedDecimal, // VSTRLR = 2844
    CEFBS_FeatureVectorEnhancements2, // VSTRS = 2845
    CEFBS_FeatureVectorEnhancements2, // VSTRSB = 2846
    CEFBS_FeatureVectorEnhancements2, // VSTRSF = 2847
    CEFBS_FeatureVectorEnhancements2, // VSTRSH = 2848
    CEFBS_FeatureVectorEnhancements2, // VSTRSZB = 2849
    CEFBS_FeatureVectorEnhancements2, // VSTRSZF = 2850
    CEFBS_FeatureVectorEnhancements2, // VSTRSZH = 2851
    CEFBS_FeatureVector, // VSUM = 2852
    CEFBS_FeatureVector, // VSUMB = 2853
    CEFBS_FeatureVector, // VSUMG = 2854
    CEFBS_FeatureVector, // VSUMGF = 2855
    CEFBS_FeatureVector, // VSUMGH = 2856
    CEFBS_FeatureVector, // VSUMH = 2857
    CEFBS_FeatureVector, // VSUMQ = 2858
    CEFBS_FeatureVector, // VSUMQF = 2859
    CEFBS_FeatureVector, // VSUMQG = 2860
    CEFBS_FeatureVector, // VTM = 2861
    CEFBS_FeatureVectorPackedDecimal, // VTP = 2862
    CEFBS_FeatureVector, // VUPH = 2863
    CEFBS_FeatureVector, // VUPHB = 2864
    CEFBS_FeatureVector, // VUPHF = 2865
    CEFBS_FeatureVector, // VUPHH = 2866
    CEFBS_FeatureVectorPackedDecimal, // VUPKZ = 2867
    CEFBS_FeatureVector, // VUPL = 2868
    CEFBS_FeatureVector, // VUPLB = 2869
    CEFBS_FeatureVector, // VUPLF = 2870
    CEFBS_FeatureVector, // VUPLH = 2871
    CEFBS_FeatureVector, // VUPLHB = 2872
    CEFBS_FeatureVector, // VUPLHF = 2873
    CEFBS_FeatureVector, // VUPLHH = 2874
    CEFBS_FeatureVector, // VUPLHW = 2875
    CEFBS_FeatureVector, // VUPLL = 2876
    CEFBS_FeatureVector, // VUPLLB = 2877
    CEFBS_FeatureVector, // VUPLLF = 2878
    CEFBS_FeatureVector, // VUPLLH = 2879
    CEFBS_FeatureVector, // VX = 2880
    CEFBS_FeatureVector, // VZERO = 2881
    CEFBS_FeatureVector, // WCDGB = 2882
    CEFBS_FeatureVector, // WCDLGB = 2883
    CEFBS_FeatureVectorEnhancements2, // WCEFB = 2884
    CEFBS_FeatureVectorEnhancements2, // WCELFB = 2885
    CEFBS_FeatureVectorEnhancements2, // WCFEB = 2886
    CEFBS_FeatureVector, // WCGDB = 2887
    CEFBS_FeatureVectorEnhancements2, // WCLFEB = 2888
    CEFBS_FeatureVector, // WCLGDB = 2889
    CEFBS_FeatureVector, // WFADB = 2890
    CEFBS_FeatureVectorEnhancements1, // WFASB = 2891
    CEFBS_FeatureVectorEnhancements1, // WFAXB = 2892
    CEFBS_FeatureVector, // WFC = 2893
    CEFBS_FeatureVector, // WFCDB = 2894
    CEFBS_FeatureVector, // WFCEDB = 2895
    CEFBS_FeatureVector, // WFCEDBS = 2896
    CEFBS_FeatureVectorEnhancements1, // WFCESB = 2897
    CEFBS_FeatureVectorEnhancements1, // WFCESBS = 2898
    CEFBS_FeatureVectorEnhancements1, // WFCEXB = 2899
    CEFBS_FeatureVectorEnhancements1, // WFCEXBS = 2900
    CEFBS_FeatureVector, // WFCHDB = 2901
    CEFBS_FeatureVector, // WFCHDBS = 2902
    CEFBS_FeatureVector, // WFCHEDB = 2903
    CEFBS_FeatureVector, // WFCHEDBS = 2904
    CEFBS_FeatureVectorEnhancements1, // WFCHESB = 2905
    CEFBS_FeatureVectorEnhancements1, // WFCHESBS = 2906
    CEFBS_FeatureVectorEnhancements1, // WFCHEXB = 2907
    CEFBS_FeatureVectorEnhancements1, // WFCHEXBS = 2908
    CEFBS_FeatureVectorEnhancements1, // WFCHSB = 2909
    CEFBS_FeatureVectorEnhancements1, // WFCHSBS = 2910
    CEFBS_FeatureVectorEnhancements1, // WFCHXB = 2911
    CEFBS_FeatureVectorEnhancements1, // WFCHXBS = 2912
    CEFBS_FeatureVectorEnhancements1, // WFCSB = 2913
    CEFBS_FeatureVectorEnhancements1, // WFCXB = 2914
    CEFBS_FeatureVector, // WFDDB = 2915
    CEFBS_FeatureVectorEnhancements1, // WFDSB = 2916
    CEFBS_FeatureVectorEnhancements1, // WFDXB = 2917
    CEFBS_FeatureVector, // WFIDB = 2918
    CEFBS_FeatureVectorEnhancements1, // WFISB = 2919
    CEFBS_FeatureVectorEnhancements1, // WFIXB = 2920
    CEFBS_FeatureVector, // WFK = 2921
    CEFBS_FeatureVector, // WFKDB = 2922
    CEFBS_FeatureVectorEnhancements1, // WFKEDB = 2923
    CEFBS_FeatureVectorEnhancements1, // WFKEDBS = 2924
    CEFBS_FeatureVectorEnhancements1, // WFKESB = 2925
    CEFBS_FeatureVectorEnhancements1, // WFKESBS = 2926
    CEFBS_FeatureVectorEnhancements1, // WFKEXB = 2927
    CEFBS_FeatureVectorEnhancements1, // WFKEXBS = 2928
    CEFBS_FeatureVectorEnhancements1, // WFKHDB = 2929
    CEFBS_FeatureVectorEnhancements1, // WFKHDBS = 2930
    CEFBS_FeatureVectorEnhancements1, // WFKHEDB = 2931
    CEFBS_FeatureVectorEnhancements1, // WFKHEDBS = 2932
    CEFBS_FeatureVectorEnhancements1, // WFKHESB = 2933
    CEFBS_FeatureVectorEnhancements1, // WFKHESBS = 2934
    CEFBS_FeatureVectorEnhancements1, // WFKHEXB = 2935
    CEFBS_FeatureVectorEnhancements1, // WFKHEXBS = 2936
    CEFBS_FeatureVectorEnhancements1, // WFKHSB = 2937
    CEFBS_FeatureVectorEnhancements1, // WFKHSBS = 2938
    CEFBS_FeatureVectorEnhancements1, // WFKHXB = 2939
    CEFBS_FeatureVectorEnhancements1, // WFKHXBS = 2940
    CEFBS_FeatureVectorEnhancements1, // WFKSB = 2941
    CEFBS_FeatureVectorEnhancements1, // WFKXB = 2942
    CEFBS_FeatureVector, // WFLCDB = 2943
    CEFBS_FeatureVectorEnhancements1, // WFLCSB = 2944
    CEFBS_FeatureVectorEnhancements1, // WFLCXB = 2945
    CEFBS_FeatureVectorEnhancements1, // WFLLD = 2946
    CEFBS_FeatureVectorEnhancements1, // WFLLS = 2947
    CEFBS_FeatureVector, // WFLNDB = 2948
    CEFBS_FeatureVectorEnhancements1, // WFLNSB = 2949
    CEFBS_FeatureVectorEnhancements1, // WFLNXB = 2950
    CEFBS_FeatureVector, // WFLPDB = 2951
    CEFBS_FeatureVectorEnhancements1, // WFLPSB = 2952
    CEFBS_FeatureVectorEnhancements1, // WFLPXB = 2953
    CEFBS_FeatureVectorEnhancements1, // WFLRD = 2954
    CEFBS_FeatureVectorEnhancements1, // WFLRX = 2955
    CEFBS_FeatureVector, // WFMADB = 2956
    CEFBS_FeatureVectorEnhancements1, // WFMASB = 2957
    CEFBS_FeatureVectorEnhancements1, // WFMAXB = 2958
    CEFBS_FeatureVectorEnhancements1, // WFMAXDB = 2959
    CEFBS_FeatureVectorEnhancements1, // WFMAXSB = 2960
    CEFBS_FeatureVectorEnhancements1, // WFMAXXB = 2961
    CEFBS_FeatureVector, // WFMDB = 2962
    CEFBS_FeatureVectorEnhancements1, // WFMINDB = 2963
    CEFBS_FeatureVectorEnhancements1, // WFMINSB = 2964
    CEFBS_FeatureVectorEnhancements1, // WFMINXB = 2965
    CEFBS_FeatureVectorEnhancements1, // WFMSB = 2966
    CEFBS_FeatureVector, // WFMSDB = 2967
    CEFBS_FeatureVectorEnhancements1, // WFMSSB = 2968
    CEFBS_FeatureVectorEnhancements1, // WFMSXB = 2969
    CEFBS_FeatureVectorEnhancements1, // WFMXB = 2970
    CEFBS_FeatureVectorEnhancements1, // WFNMADB = 2971
    CEFBS_FeatureVectorEnhancements1, // WFNMASB = 2972
    CEFBS_FeatureVectorEnhancements1, // WFNMAXB = 2973
    CEFBS_FeatureVectorEnhancements1, // WFNMSDB = 2974
    CEFBS_FeatureVectorEnhancements1, // WFNMSSB = 2975
    CEFBS_FeatureVectorEnhancements1, // WFNMSXB = 2976
    CEFBS_FeatureVector, // WFPSODB = 2977
    CEFBS_FeatureVectorEnhancements1, // WFPSOSB = 2978
    CEFBS_FeatureVectorEnhancements1, // WFPSOXB = 2979
    CEFBS_FeatureVector, // WFSDB = 2980
    CEFBS_FeatureVector, // WFSQDB = 2981
    CEFBS_FeatureVectorEnhancements1, // WFSQSB = 2982
    CEFBS_FeatureVectorEnhancements1, // WFSQXB = 2983
    CEFBS_FeatureVectorEnhancements1, // WFSSB = 2984
    CEFBS_FeatureVectorEnhancements1, // WFSXB = 2985
    CEFBS_FeatureVector, // WFTCIDB = 2986
    CEFBS_FeatureVectorEnhancements1, // WFTCISB = 2987
    CEFBS_FeatureVectorEnhancements1, // WFTCIXB = 2988
    CEFBS_FeatureVector, // WLDEB = 2989
    CEFBS_FeatureVector, // WLEDB = 2990
    CEFBS_None, // X = 2991
    CEFBS_None, // XC = 2992
    CEFBS_None, // XG = 2993
    CEFBS_None, // XGR = 2994
    CEFBS_FeatureDistinctOps, // XGRK = 2995
    CEFBS_None, // XI = 2996
    CEFBS_None, // XIHF = 2997
    CEFBS_None, // XILF = 2998
    CEFBS_None, // XIY = 2999
    CEFBS_None, // XR = 3000
    CEFBS_FeatureDistinctOps, // XRK = 3001
    CEFBS_None, // XSCH = 3002
    CEFBS_None, // XY = 3003
    CEFBS_None, // ZAP = 3004
  };

  assert(Inst.getOpcode() < 3005);
  const FeatureBitset &RequiredFeatures = FeatureBitsets[RequiredFeaturesRefs[Inst.getOpcode()]];
  FeatureBitset MissingFeatures =
      (AvailableFeatures & RequiredFeatures) ^
      RequiredFeatures;
  if (MissingFeatures.any()) {
    std::ostringstream Msg;
    Msg << "Attempting to emit " << MCII.getName(Inst.getOpcode()).str()
        << " instruction but the ";
    for (unsigned i = 0, e = MissingFeatures.size(); i != e; ++i)
      if (MissingFeatures.test(i))
        Msg << SubtargetFeatureNames[i] << " ";
    Msg << "predicate(s) are not met";
    report_fatal_error(Msg.str());
  }
#else
// Silence unused variable warning on targets that don't use MCII for other purposes (e.g. BPF).
(void)MCII;
#endif // NDEBUG
}
#endif
