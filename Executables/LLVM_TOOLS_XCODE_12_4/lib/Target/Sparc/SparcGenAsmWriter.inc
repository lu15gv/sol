/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* Assembly Writer Source Fragment                                            *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void SparcInstPrinter::printInstruction(const MCInst *MI, uint64_t Address, const MCSubtargetInfo &STI, raw_ostream &O) {
  static const char AsmStrs[] = {
  /* 0 */ 'r', 'd', 32, '%', 'w', 'i', 'm', ',', 32, 0,
  /* 10 */ 'r', 'd', 32, '%', 't', 'b', 'r', ',', 32, 0,
  /* 20 */ 'r', 'd', 32, '%', 'p', 's', 'r', ',', 32, 0,
  /* 30 */ 'f', 's', 'r', 'c', '1', 32, 0,
  /* 37 */ 'f', 'a', 'n', 'd', 'n', 'o', 't', '1', 32, 0,
  /* 47 */ 'f', 'n', 'o', 't', '1', 32, 0,
  /* 54 */ 'f', 'o', 'r', 'n', 'o', 't', '1', 32, 0,
  /* 63 */ 'f', 's', 'r', 'a', '3', '2', 32, 0,
  /* 71 */ 'f', 'p', 's', 'u', 'b', '3', '2', 32, 0,
  /* 80 */ 'f', 'p', 'a', 'd', 'd', '3', '2', 32, 0,
  /* 89 */ 'e', 'd', 'g', 'e', '3', '2', 32, 0,
  /* 97 */ 'f', 'c', 'm', 'p', 'l', 'e', '3', '2', 32, 0,
  /* 107 */ 'f', 'c', 'm', 'p', 'n', 'e', '3', '2', 32, 0,
  /* 117 */ 'f', 'p', 'a', 'c', 'k', '3', '2', 32, 0,
  /* 126 */ 'c', 'm', 'a', 's', 'k', '3', '2', 32, 0,
  /* 135 */ 'f', 's', 'l', 'l', '3', '2', 32, 0,
  /* 143 */ 'f', 's', 'r', 'l', '3', '2', 32, 0,
  /* 151 */ 'f', 'c', 'm', 'p', 'e', 'q', '3', '2', 32, 0,
  /* 161 */ 'f', 's', 'l', 'a', 's', '3', '2', 32, 0,
  /* 170 */ 'f', 'c', 'm', 'p', 'g', 't', '3', '2', 32, 0,
  /* 180 */ 'a', 'r', 'r', 'a', 'y', '3', '2', 32, 0,
  /* 189 */ 'f', 's', 'r', 'c', '2', 32, 0,
  /* 196 */ 'f', 'a', 'n', 'd', 'n', 'o', 't', '2', 32, 0,
  /* 206 */ 'f', 'n', 'o', 't', '2', 32, 0,
  /* 213 */ 'f', 'o', 'r', 'n', 'o', 't', '2', 32, 0,
  /* 222 */ 'f', 'p', 'a', 'd', 'd', '6', '4', 32, 0,
  /* 231 */ 'f', 's', 'r', 'a', '1', '6', 32, 0,
  /* 239 */ 'f', 'p', 's', 'u', 'b', '1', '6', 32, 0,
  /* 248 */ 'f', 'p', 'a', 'd', 'd', '1', '6', 32, 0,
  /* 257 */ 'e', 'd', 'g', 'e', '1', '6', 32, 0,
  /* 265 */ 'f', 'c', 'm', 'p', 'l', 'e', '1', '6', 32, 0,
  /* 275 */ 'f', 'c', 'm', 'p', 'n', 'e', '1', '6', 32, 0,
  /* 285 */ 'f', 'p', 'a', 'c', 'k', '1', '6', 32, 0,
  /* 294 */ 'c', 'm', 'a', 's', 'k', '1', '6', 32, 0,
  /* 303 */ 'f', 's', 'l', 'l', '1', '6', 32, 0,
  /* 311 */ 'f', 's', 'r', 'l', '1', '6', 32, 0,
  /* 319 */ 'f', 'c', 'h', 'k', 's', 'm', '1', '6', 32, 0,
  /* 329 */ 'f', 'm', 'e', 'a', 'n', '1', '6', 32, 0,
  /* 338 */ 'f', 'c', 'm', 'p', 'e', 'q', '1', '6', 32, 0,
  /* 348 */ 'f', 's', 'l', 'a', 's', '1', '6', 32, 0,
  /* 357 */ 'f', 'c', 'm', 'p', 'g', 't', '1', '6', 32, 0,
  /* 367 */ 'f', 'm', 'u', 'l', '8', 'x', '1', '6', 32, 0,
  /* 377 */ 'f', 'm', 'u', 'l', 'd', '8', 'u', 'l', 'x', '1', '6', 32, 0,
  /* 390 */ 'f', 'm', 'u', 'l', '8', 'u', 'l', 'x', '1', '6', 32, 0,
  /* 402 */ 'f', 'm', 'u', 'l', 'd', '8', 's', 'u', 'x', '1', '6', 32, 0,
  /* 415 */ 'f', 'm', 'u', 'l', '8', 's', 'u', 'x', '1', '6', 32, 0,
  /* 427 */ 'a', 'r', 'r', 'a', 'y', '1', '6', 32, 0,
  /* 436 */ 'e', 'd', 'g', 'e', '8', 32, 0,
  /* 443 */ 'c', 'm', 'a', 's', 'k', '8', 32, 0,
  /* 451 */ 'a', 'r', 'r', 'a', 'y', '8', 32, 0,
  /* 459 */ '!', 'A', 'D', 'J', 'C', 'A', 'L', 'L', 'S', 'T', 'A', 'C', 'K', 'D', 'O', 'W', 'N', 32, 0,
  /* 478 */ '!', 'A', 'D', 'J', 'C', 'A', 'L', 'L', 'S', 'T', 'A', 'C', 'K', 'U', 'P', 32, 0,
  /* 495 */ 'f', 'p', 's', 'u', 'b', '3', '2', 'S', 32, 0,
  /* 505 */ 'f', 'p', 's', 'u', 'b', '1', '6', 'S', 32, 0,
  /* 515 */ 'b', 'r', 'g', 'e', 'z', ',', 'a', 32, 0,
  /* 524 */ 'b', 'r', 'l', 'e', 'z', ',', 'a', 32, 0,
  /* 533 */ 'b', 'r', 'g', 'z', ',', 'a', 32, 0,
  /* 541 */ 'b', 'r', 'l', 'z', ',', 'a', 32, 0,
  /* 549 */ 'b', 'r', 'n', 'z', ',', 'a', 32, 0,
  /* 557 */ 'b', 'r', 'z', ',', 'a', 32, 0,
  /* 564 */ 's', 't', 'b', 'a', 32, 0,
  /* 570 */ 's', 't', 'd', 'a', 32, 0,
  /* 576 */ 's', 't', 'h', 'a', 32, 0,
  /* 582 */ 's', 't', 'q', 'a', 32, 0,
  /* 588 */ 's', 'r', 'a', 32, 0,
  /* 593 */ 'f', 'a', 'l', 'i', 'g', 'n', 'd', 'a', 't', 'a', 32, 0,
  /* 605 */ 's', 't', 'a', 32, 0,
  /* 610 */ 's', 't', 'b', 32, 0,
  /* 615 */ 's', 'u', 'b', 32, 0,
  /* 620 */ 's', 'm', 'a', 'c', 32, 0,
  /* 626 */ 'u', 'm', 'a', 'c', 32, 0,
  /* 632 */ 't', 's', 'u', 'b', 'c', 'c', 32, 0,
  /* 640 */ 'a', 'd', 'd', 'x', 'c', 'c', 'c', 32, 0,
  /* 649 */ 't', 'a', 'd', 'd', 'c', 'c', 32, 0,
  /* 657 */ 'a', 'n', 'd', 'c', 'c', 32, 0,
  /* 664 */ 's', 'm', 'u', 'l', 'c', 'c', 32, 0,
  /* 672 */ 'u', 'm', 'u', 'l', 'c', 'c', 32, 0,
  /* 680 */ 'a', 'n', 'd', 'n', 'c', 'c', 32, 0,
  /* 688 */ 'o', 'r', 'n', 'c', 'c', 32, 0,
  /* 695 */ 'x', 'n', 'o', 'r', 'c', 'c', 32, 0,
  /* 703 */ 'x', 'o', 'r', 'c', 'c', 32, 0,
  /* 710 */ 'm', 'u', 'l', 's', 'c', 'c', 32, 0,
  /* 718 */ 's', 'd', 'i', 'v', 'c', 'c', 32, 0,
  /* 726 */ 'u', 'd', 'i', 'v', 'c', 'c', 32, 0,
  /* 734 */ 's', 'u', 'b', 'x', 'c', 'c', 32, 0,
  /* 742 */ 'a', 'd', 'd', 'x', 'c', 'c', 32, 0,
  /* 750 */ 'p', 'o', 'p', 'c', 32, 0,
  /* 756 */ 'a', 'd', 'd', 'x', 'c', 32, 0,
  /* 763 */ 'f', 's', 'u', 'b', 'd', 32, 0,
  /* 770 */ 'f', 'h', 's', 'u', 'b', 'd', 32, 0,
  /* 778 */ 'a', 'd', 'd', 32, 0,
  /* 783 */ 'f', 'a', 'd', 'd', 'd', 32, 0,
  /* 790 */ 'f', 'h', 'a', 'd', 'd', 'd', 32, 0,
  /* 798 */ 'f', 'n', 'h', 'a', 'd', 'd', 'd', 32, 0,
  /* 807 */ 'f', 'n', 'a', 'd', 'd', 'd', 32, 0,
  /* 815 */ 'f', 'c', 'm', 'p', 'e', 'd', 32, 0,
  /* 823 */ 'f', 'n', 'e', 'g', 'd', 32, 0,
  /* 830 */ 'f', 'm', 'u', 'l', 'd', 32, 0,
  /* 837 */ 'f', 's', 'm', 'u', 'l', 'd', 32, 0,
  /* 845 */ 'f', 'a', 'n', 'd', 32, 0,
  /* 851 */ 'f', 'n', 'a', 'n', 'd', 32, 0,
  /* 858 */ 'f', 'e', 'x', 'p', 'a', 'n', 'd', 32, 0,
  /* 867 */ 'f', 'i', 't', 'o', 'd', 32, 0,
  /* 874 */ 'f', 'q', 't', 'o', 'd', 32, 0,
  /* 881 */ 'f', 's', 't', 'o', 'd', 32, 0,
  /* 888 */ 'f', 'x', 't', 'o', 'd', 32, 0,
  /* 895 */ 'f', 'c', 'm', 'p', 'd', 32, 0,
  /* 902 */ 'f', 'l', 'c', 'm', 'p', 'd', 32, 0,
  /* 910 */ 'r', 'd', 32, 0,
  /* 914 */ 'f', 'a', 'b', 's', 'd', 32, 0,
  /* 921 */ 'f', 's', 'q', 'r', 't', 'd', 32, 0,
  /* 929 */ 's', 't', 'd', 32, 0,
  /* 934 */ 'f', 'd', 'i', 'v', 'd', 32, 0,
  /* 941 */ 'f', 'm', 'o', 'v', 'd', 32, 0,
  /* 948 */ 'f', 'p', 'm', 'e', 'r', 'g', 'e', 32, 0,
  /* 957 */ 'b', 's', 'h', 'u', 'f', 'f', 'l', 'e', 32, 0,
  /* 967 */ 'f', 'o', 'n', 'e', 32, 0,
  /* 973 */ 'r', 'e', 's', 't', 'o', 'r', 'e', 32, 0,
  /* 982 */ 's', 'a', 'v', 'e', 32, 0,
  /* 988 */ 'f', 'l', 'u', 's', 'h', 32, 0,
  /* 995 */ 's', 't', 'h', 32, 0,
  /* 1000 */ 's', 'e', 't', 'h', 'i', 32, 0,
  /* 1007 */ 'u', 'm', 'u', 'l', 'x', 'h', 'i', 32, 0,
  /* 1016 */ 'x', 'm', 'u', 'l', 'x', 'h', 'i', 32, 0,
  /* 1025 */ 'f', 'd', 't', 'o', 'i', 32, 0,
  /* 1032 */ 'f', 'q', 't', 'o', 'i', 32, 0,
  /* 1039 */ 'f', 's', 't', 'o', 'i', 32, 0,
  /* 1046 */ 'b', 'm', 'a', 's', 'k', 32, 0,
  /* 1053 */ 'e', 'd', 'g', 'e', '3', '2', 'l', 32, 0,
  /* 1062 */ 'e', 'd', 'g', 'e', '1', '6', 'l', 32, 0,
  /* 1071 */ 'e', 'd', 'g', 'e', '8', 'l', 32, 0,
  /* 1079 */ 'f', 'm', 'u', 'l', '8', 'x', '1', '6', 'a', 'l', 32, 0,
  /* 1091 */ 'c', 'a', 'l', 'l', 32, 0,
  /* 1097 */ 's', 'l', 'l', 32, 0,
  /* 1102 */ 'j', 'm', 'p', 'l', 32, 0,
  /* 1108 */ 'a', 'l', 'i', 'g', 'n', 'a', 'd', 'd', 'r', 'l', 32, 0,
  /* 1120 */ 's', 'r', 'l', 32, 0,
  /* 1125 */ 's', 'm', 'u', 'l', 32, 0,
  /* 1131 */ 'u', 'm', 'u', 'l', 32, 0,
  /* 1137 */ 'e', 'd', 'g', 'e', '3', '2', 'n', 32, 0,
  /* 1146 */ 'e', 'd', 'g', 'e', '1', '6', 'n', 32, 0,
  /* 1155 */ 'e', 'd', 'g', 'e', '8', 'n', 32, 0,
  /* 1163 */ 'a', 'n', 'd', 'n', 32, 0,
  /* 1169 */ 'e', 'd', 'g', 'e', '3', '2', 'l', 'n', 32, 0,
  /* 1179 */ 'e', 'd', 'g', 'e', '1', '6', 'l', 'n', 32, 0,
  /* 1189 */ 'e', 'd', 'g', 'e', '8', 'l', 'n', 32, 0,
  /* 1198 */ 'b', 'r', 'g', 'e', 'z', ',', 'a', ',', 'p', 'n', 32, 0,
  /* 1210 */ 'b', 'r', 'l', 'e', 'z', ',', 'a', ',', 'p', 'n', 32, 0,
  /* 1222 */ 'b', 'r', 'g', 'z', ',', 'a', ',', 'p', 'n', 32, 0,
  /* 1233 */ 'b', 'r', 'l', 'z', ',', 'a', ',', 'p', 'n', 32, 0,
  /* 1244 */ 'b', 'r', 'n', 'z', ',', 'a', ',', 'p', 'n', 32, 0,
  /* 1255 */ 'b', 'r', 'z', ',', 'a', ',', 'p', 'n', 32, 0,
  /* 1265 */ 'b', 'r', 'g', 'e', 'z', ',', 'p', 'n', 32, 0,
  /* 1275 */ 'b', 'r', 'l', 'e', 'z', ',', 'p', 'n', 32, 0,
  /* 1285 */ 'b', 'r', 'g', 'z', ',', 'p', 'n', 32, 0,
  /* 1294 */ 'b', 'r', 'l', 'z', ',', 'p', 'n', 32, 0,
  /* 1303 */ 'b', 'r', 'n', 'z', ',', 'p', 'n', 32, 0,
  /* 1312 */ 'b', 'r', 'z', ',', 'p', 'n', 32, 0,
  /* 1320 */ 'o', 'r', 'n', 32, 0,
  /* 1325 */ 'p', 'd', 'i', 's', 't', 'n', 32, 0,
  /* 1333 */ 'f', 'z', 'e', 'r', 'o', 32, 0,
  /* 1340 */ 'c', 'm', 'p', 32, 0,
  /* 1345 */ 'u', 'n', 'i', 'm', 'p', 32, 0,
  /* 1352 */ 'j', 'm', 'p', 32, 0,
  /* 1357 */ 'f', 's', 'u', 'b', 'q', 32, 0,
  /* 1364 */ 'f', 'a', 'd', 'd', 'q', 32, 0,
  /* 1371 */ 'f', 'c', 'm', 'p', 'e', 'q', 32, 0,
  /* 1379 */ 'f', 'n', 'e', 'g', 'q', 32, 0,
  /* 1386 */ 'f', 'd', 'm', 'u', 'l', 'q', 32, 0,
  /* 1394 */ 'f', 'm', 'u', 'l', 'q', 32, 0,
  /* 1401 */ 'f', 'd', 't', 'o', 'q', 32, 0,
  /* 1408 */ 'f', 'i', 't', 'o', 'q', 32, 0,
  /* 1415 */ 'f', 's', 't', 'o', 'q', 32, 0,
  /* 1422 */ 'f', 'x', 't', 'o', 'q', 32, 0,
  /* 1429 */ 'f', 'c', 'm', 'p', 'q', 32, 0,
  /* 1436 */ 'f', 'a', 'b', 's', 'q', 32, 0,
  /* 1443 */ 'f', 's', 'q', 'r', 't', 'q', 32, 0,
  /* 1451 */ 's', 't', 'q', 32, 0,
  /* 1456 */ 'f', 'd', 'i', 'v', 'q', 32, 0,
  /* 1463 */ 'f', 'm', 'o', 'v', 'q', 32, 0,
  /* 1470 */ 'm', 'e', 'm', 'b', 'a', 'r', 32, 0,
  /* 1478 */ 'a', 'l', 'i', 'g', 'n', 'a', 'd', 'd', 'r', 32, 0,
  /* 1489 */ 'f', 'o', 'r', 32, 0,
  /* 1494 */ 'f', 'n', 'o', 'r', 32, 0,
  /* 1500 */ 'f', 'x', 'n', 'o', 'r', 32, 0,
  /* 1507 */ 'f', 'x', 'o', 'r', 32, 0,
  /* 1513 */ 'r', 'd', 'p', 'r', 32, 0,
  /* 1519 */ 'w', 'r', 'p', 'r', 32, 0,
  /* 1525 */ 'p', 'w', 'r', 32, 0,
  /* 1530 */ 'f', 's', 'r', 'c', '1', 's', 32, 0,
  /* 1538 */ 'f', 'a', 'n', 'd', 'n', 'o', 't', '1', 's', 32, 0,
  /* 1549 */ 'f', 'n', 'o', 't', '1', 's', 32, 0,
  /* 1557 */ 'f', 'o', 'r', 'n', 'o', 't', '1', 's', 32, 0,
  /* 1567 */ 'f', 'p', 'a', 'd', 'd', '3', '2', 's', 32, 0,
  /* 1577 */ 'f', 's', 'r', 'c', '2', 's', 32, 0,
  /* 1585 */ 'f', 'a', 'n', 'd', 'n', 'o', 't', '2', 's', 32, 0,
  /* 1596 */ 'f', 'n', 'o', 't', '2', 's', 32, 0,
  /* 1604 */ 'f', 'o', 'r', 'n', 'o', 't', '2', 's', 32, 0,
  /* 1614 */ 'f', 'p', 'a', 'd', 'd', '1', '6', 's', 32, 0,
  /* 1624 */ 'f', 's', 'u', 'b', 's', 32, 0,
  /* 1631 */ 'f', 'h', 's', 'u', 'b', 's', 32, 0,
  /* 1639 */ 'f', 'a', 'd', 'd', 's', 32, 0,
  /* 1646 */ 'f', 'h', 'a', 'd', 'd', 's', 32, 0,
  /* 1654 */ 'f', 'n', 'h', 'a', 'd', 'd', 's', 32, 0,
  /* 1663 */ 'f', 'n', 'a', 'd', 'd', 's', 32, 0,
  /* 1671 */ 'f', 'a', 'n', 'd', 's', 32, 0,
  /* 1678 */ 'f', 'n', 'a', 'n', 'd', 's', 32, 0,
  /* 1686 */ 'f', 'o', 'n', 'e', 's', 32, 0,
  /* 1693 */ 'f', 'c', 'm', 'p', 'e', 's', 32, 0,
  /* 1701 */ 'f', 'n', 'e', 'g', 's', 32, 0,
  /* 1708 */ 'f', 'm', 'u', 'l', 's', 32, 0,
  /* 1715 */ 'f', 'z', 'e', 'r', 'o', 's', 32, 0,
  /* 1723 */ 'f', 'd', 't', 'o', 's', 32, 0,
  /* 1730 */ 'f', 'i', 't', 'o', 's', 32, 0,
  /* 1737 */ 'f', 'q', 't', 'o', 's', 32, 0,
  /* 1744 */ 'f', 'x', 't', 'o', 's', 32, 0,
  /* 1751 */ 'f', 'c', 'm', 'p', 's', 32, 0,
  /* 1758 */ 'f', 'l', 'c', 'm', 'p', 's', 32, 0,
  /* 1766 */ 'f', 'o', 'r', 's', 32, 0,
  /* 1772 */ 'f', 'n', 'o', 'r', 's', 32, 0,
  /* 1779 */ 'f', 'x', 'n', 'o', 'r', 's', 32, 0,
  /* 1787 */ 'f', 'x', 'o', 'r', 's', 32, 0,
  /* 1794 */ 'f', 'a', 'b', 's', 's', 32, 0,
  /* 1801 */ 'f', 's', 'q', 'r', 't', 's', 32, 0,
  /* 1809 */ 'f', 'd', 'i', 'v', 's', 32, 0,
  /* 1816 */ 'f', 'm', 'o', 'v', 's', 32, 0,
  /* 1823 */ 's', 'e', 't', 32, 0,
  /* 1828 */ 'l', 'z', 'c', 'n', 't', 32, 0,
  /* 1835 */ 'p', 'd', 'i', 's', 't', 32, 0,
  /* 1842 */ 'r', 'e', 't', 't', 32, 0,
  /* 1848 */ 'f', 'm', 'u', 'l', '8', 'x', '1', '6', 'a', 'u', 32, 0,
  /* 1860 */ 's', 'd', 'i', 'v', 32, 0,
  /* 1866 */ 'u', 'd', 'i', 'v', 32, 0,
  /* 1872 */ 't', 's', 'u', 'b', 'c', 'c', 't', 'v', 32, 0,
  /* 1882 */ 't', 'a', 'd', 'd', 'c', 'c', 't', 'v', 32, 0,
  /* 1892 */ 'm', 'o', 'v', 's', 't', 'o', 's', 'w', 32, 0,
  /* 1902 */ 'm', 'o', 'v', 's', 't', 'o', 'u', 'w', 32, 0,
  /* 1912 */ 's', 'r', 'a', 'x', 32, 0,
  /* 1918 */ 's', 'u', 'b', 'x', 32, 0,
  /* 1924 */ 'a', 'd', 'd', 'x', 32, 0,
  /* 1930 */ 'f', 'p', 'a', 'c', 'k', 'f', 'i', 'x', 32, 0,
  /* 1940 */ 's', 'l', 'l', 'x', 32, 0,
  /* 1946 */ 's', 'r', 'l', 'x', 32, 0,
  /* 1952 */ 'x', 'm', 'u', 'l', 'x', 32, 0,
  /* 1959 */ 'f', 'd', 't', 'o', 'x', 32, 0,
  /* 1966 */ 'm', 'o', 'v', 'd', 't', 'o', 'x', 32, 0,
  /* 1975 */ 'f', 'q', 't', 'o', 'x', 32, 0,
  /* 1982 */ 'f', 's', 't', 'o', 'x', 32, 0,
  /* 1989 */ 's', 't', 'x', 32, 0,
  /* 1994 */ 's', 'd', 'i', 'v', 'x', 32, 0,
  /* 2001 */ 'u', 'd', 'i', 'v', 'x', 32, 0,
  /* 2008 */ 'f', 'm', 'o', 'v', 'r', 'd', 'z', 32, 0,
  /* 2017 */ 'f', 'm', 'o', 'v', 'r', 'd', 'g', 'e', 'z', 32, 0,
  /* 2028 */ 'f', 'm', 'o', 'v', 'r', 'q', 'g', 'e', 'z', 32, 0,
  /* 2039 */ 'b', 'r', 'g', 'e', 'z', 32, 0,
  /* 2046 */ 'm', 'o', 'v', 'r', 'g', 'e', 'z', 32, 0,
  /* 2055 */ 'f', 'm', 'o', 'v', 'r', 's', 'g', 'e', 'z', 32, 0,
  /* 2066 */ 'f', 'm', 'o', 'v', 'r', 'd', 'l', 'e', 'z', 32, 0,
  /* 2077 */ 'f', 'm', 'o', 'v', 'r', 'q', 'l', 'e', 'z', 32, 0,
  /* 2088 */ 'b', 'r', 'l', 'e', 'z', 32, 0,
  /* 2095 */ 'm', 'o', 'v', 'r', 'l', 'e', 'z', 32, 0,
  /* 2104 */ 'f', 'm', 'o', 'v', 'r', 's', 'l', 'e', 'z', 32, 0,
  /* 2115 */ 'f', 'm', 'o', 'v', 'r', 'd', 'g', 'z', 32, 0,
  /* 2125 */ 'f', 'm', 'o', 'v', 'r', 'q', 'g', 'z', 32, 0,
  /* 2135 */ 'b', 'r', 'g', 'z', 32, 0,
  /* 2141 */ 'm', 'o', 'v', 'r', 'g', 'z', 32, 0,
  /* 2149 */ 'f', 'm', 'o', 'v', 'r', 's', 'g', 'z', 32, 0,
  /* 2159 */ 'f', 'm', 'o', 'v', 'r', 'd', 'l', 'z', 32, 0,
  /* 2169 */ 'f', 'm', 'o', 'v', 'r', 'q', 'l', 'z', 32, 0,
  /* 2179 */ 'b', 'r', 'l', 'z', 32, 0,
  /* 2185 */ 'm', 'o', 'v', 'r', 'l', 'z', 32, 0,
  /* 2193 */ 'f', 'm', 'o', 'v', 'r', 's', 'l', 'z', 32, 0,
  /* 2203 */ 'f', 'm', 'o', 'v', 'r', 'd', 'n', 'z', 32, 0,
  /* 2213 */ 'f', 'm', 'o', 'v', 'r', 'q', 'n', 'z', 32, 0,
  /* 2223 */ 'b', 'r', 'n', 'z', 32, 0,
  /* 2229 */ 'm', 'o', 'v', 'r', 'n', 'z', 32, 0,
  /* 2237 */ 'f', 'm', 'o', 'v', 'r', 's', 'n', 'z', 32, 0,
  /* 2247 */ 'f', 'm', 'o', 'v', 'r', 'q', 'z', 32, 0,
  /* 2256 */ 'b', 'r', 'z', 32, 0,
  /* 2261 */ 'm', 'o', 'v', 'r', 'z', 32, 0,
  /* 2268 */ 'f', 'm', 'o', 'v', 'r', 's', 'z', 32, 0,
  /* 2277 */ ';', 32, 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'D', 'F', 'P', '_', 'F', 'C', 'C', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2305 */ ';', 32, 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'Q', 'F', 'P', '_', 'F', 'C', 'C', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2333 */ ';', 32, 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'F', 'P', '_', 'F', 'C', 'C', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2360 */ ';', 32, 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'I', 'n', 't', '_', 'F', 'C', 'C', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2388 */ ';', 32, 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'D', 'F', 'P', '_', 'I', 'C', 'C', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2416 */ ';', 32, 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'Q', 'F', 'P', '_', 'I', 'C', 'C', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2444 */ ';', 32, 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'F', 'P', '_', 'I', 'C', 'C', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2471 */ ';', 32, 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'I', 'n', 't', '_', 'I', 'C', 'C', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2499 */ 'j', 'm', 'p', 32, '%', 'i', '7', '+', 0,
  /* 2508 */ 'j', 'm', 'p', 32, '%', 'o', '7', '+', 0,
  /* 2517 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'F', 'u', 'n', 'c', 't', 'i', 'o', 'n', 32, 'P', 'a', 't', 'c', 'h', 'a', 'b', 'l', 'e', 32, 'R', 'E', 'T', '.', 0,
  /* 2548 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'T', 'y', 'p', 'e', 'd', 32, 'E', 'v', 'e', 'n', 't', 32, 'L', 'o', 'g', '.', 0,
  /* 2572 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'C', 'u', 's', 't', 'o', 'm', 32, 'E', 'v', 'e', 'n', 't', 32, 'L', 'o', 'g', '.', 0,
  /* 2597 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'F', 'u', 'n', 'c', 't', 'i', 'o', 'n', 32, 'E', 'n', 't', 'e', 'r', '.', 0,
  /* 2620 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'T', 'a', 'i', 'l', 32, 'C', 'a', 'l', 'l', 32, 'E', 'x', 'i', 't', '.', 0,
  /* 2643 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'F', 'u', 'n', 'c', 't', 'i', 'o', 'n', 32, 'E', 'x', 'i', 't', '.', 0,
  /* 2665 */ 'f', 'l', 'u', 's', 'h', 32, '%', 'g', '0', 0,
  /* 2675 */ 't', 'a', 32, '1', 0,
  /* 2680 */ 't', 'a', 32, '3', 0,
  /* 2685 */ 't', 'a', 32, '5', 0,
  /* 2690 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'E', 'N', 'D', 0,
  /* 2703 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 2710 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 2720 */ 'D', 'B', 'G', '_', 'L', 'A', 'B', 'E', 'L', 0,
  /* 2730 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'S', 'T', 'A', 'R', 'T', 0,
  /* 2745 */ 's', 't', 'd', 32, '%', 'c', 'q', ',', 32, '[', 0,
  /* 2756 */ 's', 't', 'd', 32, '%', 'f', 'q', ',', 32, '[', 0,
  /* 2767 */ 's', 't', 32, '%', 'c', 's', 'r', ',', 32, '[', 0,
  /* 2778 */ 's', 't', 32, '%', 'f', 's', 'r', ',', 32, '[', 0,
  /* 2789 */ 's', 't', 'x', 32, '%', 'f', 's', 'r', ',', 32, '[', 0,
  /* 2801 */ 'l', 'd', 's', 'b', 'a', 32, '[', 0,
  /* 2809 */ 'l', 'd', 'u', 'b', 'a', 32, '[', 0,
  /* 2817 */ 'l', 'd', 's', 't', 'u', 'b', 'a', 32, '[', 0,
  /* 2827 */ 'l', 'd', 'd', 'a', 32, '[', 0,
  /* 2834 */ 'l', 'd', 'a', 32, '[', 0,
  /* 2840 */ 'l', 'd', 's', 'h', 'a', 32, '[', 0,
  /* 2848 */ 'l', 'd', 'u', 'h', 'a', 32, '[', 0,
  /* 2856 */ 's', 'w', 'a', 'p', 'a', 32, '[', 0,
  /* 2864 */ 'l', 'd', 'q', 'a', 32, '[', 0,
  /* 2871 */ 'c', 'a', 's', 'a', 32, '[', 0,
  /* 2878 */ 'l', 'd', 's', 'b', 32, '[', 0,
  /* 2885 */ 'l', 'd', 'u', 'b', 32, '[', 0,
  /* 2892 */ 'l', 'd', 's', 't', 'u', 'b', 32, '[', 0,
  /* 2901 */ 'l', 'd', 'd', 32, '[', 0,
  /* 2907 */ 'l', 'd', 32, '[', 0,
  /* 2912 */ 'l', 'd', 's', 'h', 32, '[', 0,
  /* 2919 */ 'l', 'd', 'u', 'h', 32, '[', 0,
  /* 2926 */ 's', 'w', 'a', 'p', 32, '[', 0,
  /* 2933 */ 'l', 'd', 'q', 32, '[', 0,
  /* 2939 */ 'c', 'a', 's', 32, '[', 0,
  /* 2945 */ 'l', 'd', 's', 'w', 32, '[', 0,
  /* 2952 */ 'l', 'd', 'x', 32, '[', 0,
  /* 2958 */ 'c', 'a', 's', 'x', 32, '[', 0,
  /* 2965 */ 'c', 'b', 0,
  /* 2968 */ 'f', 'b', 0,
  /* 2971 */ 'f', 'm', 'o', 'v', 'd', 0,
  /* 2977 */ '#', 32, 'F', 'E', 'n', 't', 'r', 'y', 32, 'c', 'a', 'l', 'l', 0,
  /* 2991 */ 's', 'i', 'a', 'm', 0,
  /* 2996 */ 's', 'h', 'u', 't', 'd', 'o', 'w', 'n', 0,
  /* 3005 */ 'n', 'o', 'p', 0,
  /* 3009 */ 'f', 'm', 'o', 'v', 'q', 0,
  /* 3015 */ 's', 't', 'b', 'a', 'r', 0,
  /* 3021 */ 'f', 'm', 'o', 'v', 's', 0,
  /* 3027 */ 't', 0,
  /* 3029 */ 'm', 'o', 'v', 0,
  /* 3033 */ 'f', 'l', 'u', 's', 'h', 'w', 0,
  };

  static const uint32_t OpInfo0[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// INLINEASM_BR
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// ANNOTATION_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    2711U,	// DBG_VALUE
    2721U,	// DBG_LABEL
    0U,	// REG_SEQUENCE
    0U,	// COPY
    2704U,	// BUNDLE
    2731U,	// LIFETIME_START
    2691U,	// LIFETIME_END
    0U,	// STACKMAP
    2978U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    2598U,	// PATCHABLE_FUNCTION_ENTER
    2518U,	// PATCHABLE_RET
    2644U,	// PATCHABLE_FUNCTION_EXIT
    2621U,	// PATCHABLE_TAIL_CALL
    2573U,	// PATCHABLE_EVENT_CALL
    2549U,	// PATCHABLE_TYPED_EVENT_CALL
    0U,	// ICALL_BRANCH_FUNNEL
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_IMPLICIT_DEF
    0U,	// G_PHI
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_MERGE_VALUES
    0U,	// G_BUILD_VECTOR
    0U,	// G_BUILD_VECTOR_TRUNC
    0U,	// G_CONCAT_VECTORS
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_INTRINSIC_TRUNC
    0U,	// G_INTRINSIC_ROUND
    0U,	// G_READCYCLECOUNTER
    0U,	// G_LOAD
    0U,	// G_SEXTLOAD
    0U,	// G_ZEXTLOAD
    0U,	// G_INDEXED_LOAD
    0U,	// G_INDEXED_SEXTLOAD
    0U,	// G_INDEXED_ZEXTLOAD
    0U,	// G_STORE
    0U,	// G_INDEXED_STORE
    0U,	// G_ATOMIC_CMPXCHG_WITH_SUCCESS
    0U,	// G_ATOMIC_CMPXCHG
    0U,	// G_ATOMICRMW_XCHG
    0U,	// G_ATOMICRMW_ADD
    0U,	// G_ATOMICRMW_SUB
    0U,	// G_ATOMICRMW_AND
    0U,	// G_ATOMICRMW_NAND
    0U,	// G_ATOMICRMW_OR
    0U,	// G_ATOMICRMW_XOR
    0U,	// G_ATOMICRMW_MAX
    0U,	// G_ATOMICRMW_MIN
    0U,	// G_ATOMICRMW_UMAX
    0U,	// G_ATOMICRMW_UMIN
    0U,	// G_ATOMICRMW_FADD
    0U,	// G_ATOMICRMW_FSUB
    0U,	// G_FENCE
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_SEXT_INREG
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDO
    0U,	// G_UADDE
    0U,	// G_USUBO
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SADDE
    0U,	// G_SSUBO
    0U,	// G_SSUBE
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FMA
    0U,	// G_FMAD
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FEXP
    0U,	// G_FEXP2
    0U,	// G_FLOG
    0U,	// G_FLOG2
    0U,	// G_FLOG10
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_FABS
    0U,	// G_FCOPYSIGN
    0U,	// G_FCANONICALIZE
    0U,	// G_FMINNUM
    0U,	// G_FMAXNUM
    0U,	// G_FMINNUM_IEEE
    0U,	// G_FMAXNUM_IEEE
    0U,	// G_FMINIMUM
    0U,	// G_FMAXIMUM
    0U,	// G_PTR_ADD
    0U,	// G_PTR_MASK
    0U,	// G_SMIN
    0U,	// G_SMAX
    0U,	// G_UMIN
    0U,	// G_UMAX
    0U,	// G_BR
    0U,	// G_BRJT
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// G_SHUFFLE_VECTOR
    0U,	// G_CTTZ
    0U,	// G_CTTZ_ZERO_UNDEF
    0U,	// G_CTLZ
    0U,	// G_CTLZ_ZERO_UNDEF
    0U,	// G_CTPOP
    0U,	// G_BSWAP
    0U,	// G_BITREVERSE
    0U,	// G_FCEIL
    0U,	// G_FCOS
    0U,	// G_FSIN
    0U,	// G_FSQRT
    0U,	// G_FFLOOR
    0U,	// G_FRINT
    0U,	// G_FNEARBYINT
    0U,	// G_ADDRSPACE_CAST
    0U,	// G_BLOCK_ADDR
    0U,	// G_JUMP_TABLE
    0U,	// G_DYN_STACKALLOC
    4556U,	// ADJCALLSTACKDOWN
    70111U,	// ADJCALLSTACKUP
    8202U,	// GETPCX
    2278U,	// SELECT_CC_DFP_FCC
    2389U,	// SELECT_CC_DFP_ICC
    2334U,	// SELECT_CC_FP_FCC
    2445U,	// SELECT_CC_FP_ICC
    2361U,	// SELECT_CC_Int_FCC
    2472U,	// SELECT_CC_Int_ICC
    2306U,	// SELECT_CC_QFP_FCC
    2417U,	// SELECT_CC_QFP_ICC
    2111264U,	// SET
    4207243U,	// ADDCCri
    4207243U,	// ADDCCrr
    4208517U,	// ADDCri
    4208517U,	// ADDCrr
    4207335U,	// ADDEri
    4207335U,	// ADDErr
    4207349U,	// ADDXC
    4207233U,	// ADDXCCC
    4207371U,	// ADDXri
    4207371U,	// ADDXrr
    4207371U,	// ADDri
    4207371U,	// ADDrr
    4208071U,	// ALIGNADDR
    4207701U,	// ALIGNADDRL
    4207250U,	// ANDCCri
    4207250U,	// ANDCCrr
    4207273U,	// ANDNCCri
    4207273U,	// ANDNCCrr
    4207756U,	// ANDNri
    4207756U,	// ANDNrr
    4207756U,	// ANDXNrr
    4207439U,	// ANDXri
    4207439U,	// ANDXrr
    4207439U,	// ANDri
    4207439U,	// ANDrr
    4207020U,	// ARRAY16
    4206773U,	// ARRAY32
    4207044U,	// ARRAY8
    70199U,	// BA
    2247575U,	// BCOND
    2313111U,	// BCONDA
    87369U,	// BINDri
    87369U,	// BINDrr
    4207639U,	// BMASK
    4344729U,	// BPFCC
    4410265U,	// BPFCCA
    281497U,	// BPFCCANT
    347033U,	// BPFCCNT
    5295U,	// BPGEZapn
    4612U,	// BPGEZapt
    5362U,	// BPGEZnapn
    6136U,	// BPGEZnapt
    5319U,	// BPGZapn
    4630U,	// BPGZapt
    5382U,	// BPGZnapn
    6232U,	// BPGZnapt
    2509719U,	// BPICC
    478103U,	// BPICCA
    543639U,	// BPICCANT
    609175U,	// BPICCNT
    5307U,	// BPLEZapn
    4621U,	// BPLEZapt
    5372U,	// BPLEZnapn
    6185U,	// BPLEZnapt
    5330U,	// BPLZapn
    4638U,	// BPLZapt
    5391U,	// BPLZnapn
    6276U,	// BPLZnapt
    5341U,	// BPNZapn
    4646U,	// BPNZapt
    5400U,	// BPNZnapn
    6320U,	// BPNZnapt
    2771863U,	// BPXCC
    740247U,	// BPXCCA
    805783U,	// BPXCCANT
    871319U,	// BPXCCNT
    5352U,	// BPZapn
    4654U,	// BPZapt
    5409U,	// BPZnapn
    6353U,	// BPZnapt
    4207550U,	// BSHUFFLE
    70724U,	// CALL
    87108U,	// CALLri
    87108U,	// CALLrr
    932664U,	// CASAasi10
    7289656U,	// CASArr
    5258127U,	// CASXrr
    5258108U,	// CASrr
    2247574U,	// CBCOND
    2313110U,	// CBCONDA
    69927U,	// CMASK16
    69759U,	// CMASK32
    70076U,	// CMASK8
    5437U,	// CMPri
    5437U,	// CMPrr
    4206850U,	// EDGE16
    4207655U,	// EDGE16L
    4207772U,	// EDGE16LN
    4207739U,	// EDGE16N
    4206682U,	// EDGE32
    4207646U,	// EDGE32L
    4207762U,	// EDGE32LN
    4207730U,	// EDGE32N
    4207029U,	// EDGE8
    4207664U,	// EDGE8L
    4207782U,	// EDGE8LN
    4207748U,	// EDGE8N
    2110355U,	// FABSD
    2110877U,	// FABSQ
    2111235U,	// FABSS
    4207376U,	// FADDD
    4207957U,	// FADDQ
    4208232U,	// FADDS
    4207186U,	// FALIGNADATA
    4207438U,	// FAND
    4206630U,	// FANDNOT1
    4208131U,	// FANDNOT1S
    4206789U,	// FANDNOT2
    4208178U,	// FANDNOT2S
    4208264U,	// FANDS
    2247577U,	// FBCOND
    2313113U,	// FBCONDA
    4206912U,	// FCHKSM16
    4992U,	// FCMPD
    4206931U,	// FCMPEQ16
    4206744U,	// FCMPEQ32
    4206950U,	// FCMPGT16
    4206763U,	// FCMPGT32
    4206858U,	// FCMPLE16
    4206690U,	// FCMPLE32
    4206868U,	// FCMPNE16
    4206700U,	// FCMPNE32
    5526U,	// FCMPQ
    5848U,	// FCMPS
    4207527U,	// FDIVD
    4208049U,	// FDIVQ
    4208402U,	// FDIVS
    4207979U,	// FDMULQ
    2110466U,	// FDTOI
    2110842U,	// FDTOQ
    2111164U,	// FDTOS
    2111400U,	// FDTOX
    2110299U,	// FEXPAND
    4207383U,	// FHADDD
    4208239U,	// FHADDS
    4207363U,	// FHSUBD
    4208224U,	// FHSUBS
    2110308U,	// FITOD
    2110849U,	// FITOQ
    2111171U,	// FITOS
    16782215U,	// FLCMPD
    16783071U,	// FLCMPS
    2666U,	// FLUSH
    3034U,	// FLUSHW
    87005U,	// FLUSHri
    87005U,	// FLUSHrr
    4206922U,	// FMEAN16
    2110382U,	// FMOVD
    1141660U,	// FMOVD_FCC
    151415708U,	// FMOVD_ICC
    151677852U,	// FMOVD_XCC
    2110904U,	// FMOVQ
    1141698U,	// FMOVQ_FCC
    151415746U,	// FMOVQ_ICC
    151677890U,	// FMOVQ_XCC
    4208610U,	// FMOVRGEZD
    4208621U,	// FMOVRGEZQ
    4208648U,	// FMOVRGEZS
    4208708U,	// FMOVRGZD
    4208718U,	// FMOVRGZQ
    4208742U,	// FMOVRGZS
    4208659U,	// FMOVRLEZD
    4208670U,	// FMOVRLEZQ
    4208697U,	// FMOVRLEZS
    4208752U,	// FMOVRLZD
    4208762U,	// FMOVRLZQ
    4208786U,	// FMOVRLZS
    4208796U,	// FMOVRNZD
    4208806U,	// FMOVRNZQ
    4208830U,	// FMOVRNZS
    4208601U,	// FMOVRZD
    4208840U,	// FMOVRZQ
    4208861U,	// FMOVRZS
    2111257U,	// FMOVS
    1141710U,	// FMOVS_FCC
    151415758U,	// FMOVS_ICC
    151677902U,	// FMOVS_XCC
    4207008U,	// FMUL8SUX16
    4206983U,	// FMUL8ULX16
    4206960U,	// FMUL8X16
    4207672U,	// FMUL8X16AL
    4208441U,	// FMUL8X16AU
    4207423U,	// FMULD
    4206995U,	// FMULD8SUX16
    4206970U,	// FMULD8ULX16
    4207987U,	// FMULQ
    4208301U,	// FMULS
    4207400U,	// FNADDD
    4208256U,	// FNADDS
    4207444U,	// FNAND
    4208271U,	// FNANDS
    2110264U,	// FNEGD
    2110820U,	// FNEGQ
    2111142U,	// FNEGS
    4207391U,	// FNHADDD
    4208247U,	// FNHADDS
    4207391U,	// FNMULD
    4208247U,	// FNMULS
    4208087U,	// FNOR
    4208365U,	// FNORS
    2109488U,	// FNOT1
    2110990U,	// FNOT1S
    2109647U,	// FNOT2
    2111037U,	// FNOT2S
    4208247U,	// FNSMULD
    70600U,	// FONE
    71319U,	// FONES
    4208082U,	// FOR
    4206647U,	// FORNOT1
    4208150U,	// FORNOT1S
    4206806U,	// FORNOT2
    4208197U,	// FORNOT2S
    4208359U,	// FORS
    2109726U,	// FPACK16
    4206710U,	// FPACK32
    2111371U,	// FPACKFIX
    4206841U,	// FPADD16
    4208207U,	// FPADD16S
    4206673U,	// FPADD32
    4208160U,	// FPADD32S
    4206815U,	// FPADD64
    4207541U,	// FPMERGE
    4206832U,	// FPSUB16
    4207098U,	// FPSUB16S
    4206664U,	// FPSUB32
    4207088U,	// FPSUB32S
    2110315U,	// FQTOD
    2110473U,	// FQTOI
    2111178U,	// FQTOS
    2111416U,	// FQTOX
    4206941U,	// FSLAS16
    4206754U,	// FSLAS32
    4206896U,	// FSLL16
    4206728U,	// FSLL32
    4207430U,	// FSMULD
    2110362U,	// FSQRTD
    2110884U,	// FSQRTQ
    2111242U,	// FSQRTS
    4206824U,	// FSRA16
    4206656U,	// FSRA32
    2109471U,	// FSRC1
    2110971U,	// FSRC1S
    2109630U,	// FSRC2
    2111018U,	// FSRC2S
    4206904U,	// FSRL16
    4206736U,	// FSRL32
    2110322U,	// FSTOD
    2110480U,	// FSTOI
    2110856U,	// FSTOQ
    2111423U,	// FSTOX
    4207356U,	// FSUBD
    4207950U,	// FSUBQ
    4208217U,	// FSUBS
    4208093U,	// FXNOR
    4208372U,	// FXNORS
    4208100U,	// FXOR
    4208380U,	// FXORS
    2110329U,	// FXTOD
    2110863U,	// FXTOQ
    2111185U,	// FXTOS
    70966U,	// FZERO
    71348U,	// FZEROS
    2126927U,	// JMPLri
    2126927U,	// JMPLrr
    160398099U,	// LDArr
    1203036U,	// LDCSRri
    1203036U,	// LDCSRrr
    3177308U,	// LDCri
    3177308U,	// LDCrr
    160398092U,	// LDDArr
    3177302U,	// LDDCri
    3177302U,	// LDDCrr
    160398092U,	// LDDFArr
    3177302U,	// LDDFri
    3177302U,	// LDDFrr
    3177302U,	// LDDri
    3177302U,	// LDDrr
    160398099U,	// LDFArr
    1268572U,	// LDFSRri
    1268572U,	// LDFSRrr
    3177308U,	// LDFri
    3177308U,	// LDFrr
    160398129U,	// LDQFArr
    3177334U,	// LDQFri
    3177334U,	// LDQFrr
    160398066U,	// LDSBArr
    3177279U,	// LDSBri
    3177279U,	// LDSBrr
    160398105U,	// LDSHArr
    3177313U,	// LDSHri
    3177313U,	// LDSHrr
    160398082U,	// LDSTUBArr
    3177293U,	// LDSTUBri
    3177293U,	// LDSTUBrr
    3177346U,	// LDSWri
    3177346U,	// LDSWrr
    160398074U,	// LDUBArr
    3177286U,	// LDUBri
    3177286U,	// LDUBrr
    160398113U,	// LDUHArr
    3177320U,	// LDUHri
    3177320U,	// LDUHrr
    1268617U,	// LDXFSRri
    1268617U,	// LDXFSRrr
    3177353U,	// LDXri
    3177353U,	// LDXrr
    3177308U,	// LDri
    3177308U,	// LDrr
    33547U,	// LEAX_ADDri
    33547U,	// LEA_ADDri
    2111269U,	// LZCNT
    38335U,	// MEMBARi
    2111407U,	// MOVDTOX
    1141718U,	// MOVFCCri
    1141718U,	// MOVFCCrr
    151415766U,	// MOVICCri
    151415766U,	// MOVICCrr
    4208639U,	// MOVRGEZri
    4208639U,	// MOVRGEZrr
    4208734U,	// MOVRGZri
    4208734U,	// MOVRGZrr
    4208688U,	// MOVRLEZri
    4208688U,	// MOVRLEZrr
    4208778U,	// MOVRLZri
    4208778U,	// MOVRLZrr
    4208822U,	// MOVRNZri
    4208822U,	// MOVRNZrr
    4208854U,	// MOVRRZri
    4208854U,	// MOVRRZrr
    2111333U,	// MOVSTOSW
    2111343U,	// MOVSTOUW
    2111407U,	// MOVWTOS
    151677910U,	// MOVXCCri
    151677910U,	// MOVXCCrr
    2111407U,	// MOVXTOD
    4207303U,	// MULSCCri
    4207303U,	// MULSCCrr
    4208546U,	// MULXri
    4208546U,	// MULXrr
    3006U,	// NOP
    4207290U,	// ORCCri
    4207290U,	// ORCCrr
    4207281U,	// ORNCCri
    4207281U,	// ORNCCrr
    4207913U,	// ORNri
    4207913U,	// ORNrr
    4207913U,	// ORXNrr
    4208083U,	// ORXri
    4208083U,	// ORXrr
    4208083U,	// ORri
    4208083U,	// ORrr
    4208428U,	// PDIST
    4207918U,	// PDISTN
    2110191U,	// POPCrr
    33560054U,	// PWRPSRri
    33560054U,	// PWRPSRrr
    2110351U,	// RDASR
    2110954U,	// RDPR
    69653U,	// RDPSR
    69643U,	// RDTBR
    69633U,	// RDWIM
    4207566U,	// RESTOREri
    4207566U,	// RESTORErr
    72132U,	// RET
    72141U,	// RETL
    87859U,	// RETTri
    87859U,	// RETTrr
    4207575U,	// SAVEri
    4207575U,	// SAVErr
    4207311U,	// SDIVCCri
    4207311U,	// SDIVCCrr
    4208587U,	// SDIVXri
    4208587U,	// SDIVXrr
    4208453U,	// SDIVri
    4208453U,	// SDIVrr
    2110441U,	// SETHIXi
    2110441U,	// SETHIi
    2997U,	// SHUTDOWN
    2992U,	// SIAM
    4208533U,	// SLLXri
    4208533U,	// SLLXrr
    4207690U,	// SLLri
    4207690U,	// SLLrr
    4207213U,	// SMACri
    4207213U,	// SMACrr
    4207257U,	// SMULCCri
    4207257U,	// SMULCCrr
    4207718U,	// SMULri
    4207718U,	// SMULrr
    4208505U,	// SRAXri
    4208505U,	// SRAXrr
    4207181U,	// SRAri
    4207181U,	// SRArr
    4208539U,	// SRLXri
    4208539U,	// SRLXrr
    4207713U,	// SRLri
    4207713U,	// SRLrr
    9413214U,	// STArr
    3016U,	// STBAR
    9413173U,	// STBArr
    1352291U,	// STBri
    1352291U,	// STBrr
    1333968U,	// STCSRri
    1333968U,	// STCSRrr
    1353519U,	// STCri
    1353519U,	// STCrr
    9413179U,	// STDArr
    1333946U,	// STDCQri
    1333946U,	// STDCQrr
    1352610U,	// STDCri
    1352610U,	// STDCrr
    9413179U,	// STDFArr
    1333957U,	// STDFQri
    1333957U,	// STDFQrr
    1352610U,	// STDFri
    1352610U,	// STDFrr
    1352610U,	// STDri
    1352610U,	// STDrr
    9413214U,	// STFArr
    1333979U,	// STFSRri
    1333979U,	// STFSRrr
    1353519U,	// STFri
    1353519U,	// STFrr
    9413185U,	// STHArr
    1352676U,	// STHri
    1352676U,	// STHrr
    9413191U,	// STQFArr
    1353132U,	// STQFri
    1353132U,	// STQFrr
    1333990U,	// STXFSRri
    1333990U,	// STXFSRrr
    1353670U,	// STXri
    1353670U,	// STXrr
    1353519U,	// STri
    1353519U,	// STrr
    4207226U,	// SUBCCri
    4207226U,	// SUBCCrr
    4208511U,	// SUBCri
    4208511U,	// SUBCrr
    4207327U,	// SUBEri
    4207327U,	// SUBErr
    4207208U,	// SUBXri
    4207208U,	// SUBXrr
    4207208U,	// SUBri
    4207208U,	// SUBrr
    160398121U,	// SWAPArr
    3177327U,	// SWAPri
    3177327U,	// SWAPrr
    2676U,	// TA1
    2681U,	// TA3
    2686U,	// TA5
    4208475U,	// TADDCCTVri
    4208475U,	// TADDCCTVrr
    4207242U,	// TADDCCri
    4207242U,	// TADDCCrr
    52870100U,	// TICCri
    52870100U,	// TICCrr
    289420043U,	// TLS_ADDXrr
    289420043U,	// TLS_ADDrr
    5188U,	// TLS_CALL
    288390025U,	// TLS_LDXrr
    288389980U,	// TLS_LDrr
    52607956U,	// TRAPri
    52607956U,	// TRAPrr
    4208465U,	// TSUBCCTVri
    4208465U,	// TSUBCCTVrr
    4207225U,	// TSUBCCri
    4207225U,	// TSUBCCrr
    53132244U,	// TXCCri
    53132244U,	// TXCCrr
    4207319U,	// UDIVCCri
    4207319U,	// UDIVCCrr
    4208594U,	// UDIVXri
    4208594U,	// UDIVXrr
    4208459U,	// UDIVri
    4208459U,	// UDIVrr
    4207219U,	// UMACri
    4207219U,	// UMACrr
    4207265U,	// UMULCCri
    4207265U,	// UMULCCrr
    4207600U,	// UMULXHI
    4207724U,	// UMULri
    4207724U,	// UMULrr
    70978U,	// UNIMP
    16782208U,	// V9FCMPD
    16782128U,	// V9FCMPED
    16782684U,	// V9FCMPEQ
    16783006U,	// V9FCMPES
    16782742U,	// V9FCMPQ
    16783064U,	// V9FCMPS
    52124U,	// V9FMOVD_FCC
    52162U,	// V9FMOVQ_FCC
    52174U,	// V9FMOVS_FCC
    52182U,	// V9MOVFCCri
    52182U,	// V9MOVFCCrr
    4208119U,	// WRASRri
    4208119U,	// WRASRrr
    4208112U,	// WRPRri
    4208112U,	// WRPRrr
    33560055U,	// WRPSRri
    33560055U,	// WRPSRrr
    67114487U,	// WRTBRri
    67114487U,	// WRTBRrr
    83891703U,	// WRWIMri
    83891703U,	// WRWIMrr
    4208545U,	// XMULX
    4207609U,	// XMULXHI
    4207288U,	// XNORCCri
    4207288U,	// XNORCCrr
    4208094U,	// XNORXrr
    4208094U,	// XNORri
    4208094U,	// XNORrr
    4207296U,	// XORCCri
    4207296U,	// XORCCrr
    4208101U,	// XORXri
    4208101U,	// XORXrr
    4208101U,	// XORri
    4208101U,	// XORrr
  };

  O << "\t";

  // Emit the opcode for the instruction.
  uint32_t Bits = 0;
  Bits |= OpInfo0[MI->getOpcode()] << 0;
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 4095)-1;


  // Fragment 0 encoded into 4 bits for 13 unique commands.
  switch ((Bits >> 12) & 15) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // DBG_VALUE, DBG_LABEL, BUNDLE, LIFETIME_START, LIFETIME_END, FENTRY_CAL...
    return;
    break;
  case 1:
    // ADJCALLSTACKDOWN, ADJCALLSTACKUP, BA, BPGEZapn, BPGEZapt, BPGEZnapn, B...
    printOperand(MI, 0, STI, O);
    break;
  case 2:
    // GETPCX
    printGetPCX(MI, 0, STI, O);
    return;
    break;
  case 3:
    // SET, ADDCCri, ADDCCrr, ADDCri, ADDCrr, ADDEri, ADDErr, ADDXC, ADDXCCC,...
    printOperand(MI, 1, STI, O);
    break;
  case 4:
    // BCOND, BCONDA, BPFCC, BPFCCA, BPFCCANT, BPFCCNT, BPICC, BPICCA, BPICCA...
    printCCOperand(MI, 1, STI, O);
    break;
  case 5:
    // BINDri, BINDrr, CALLri, CALLrr, FLUSHri, FLUSHrr, LDCSRri, LDCSRrr, LD...
    printMemOperand(MI, 0, STI, O);
    break;
  case 6:
    // FMOVD_FCC, FMOVD_ICC, FMOVD_XCC, FMOVQ_FCC, FMOVQ_ICC, FMOVQ_XCC, FMOV...
    printCCOperand(MI, 3, STI, O);
    break;
  case 7:
    // JMPLri, JMPLrr, LDArr, LDCri, LDCrr, LDDArr, LDDCri, LDDCrr, LDDFArr, ...
    printMemOperand(MI, 1, STI, O);
    break;
  case 8:
    // LEAX_ADDri, LEA_ADDri
    printMemOperand(MI, 1, STI, O, "arith");
    O << ", ";
    printOperand(MI, 0, STI, O);
    return;
    break;
  case 9:
    // MEMBARi
    printMembarTag(MI, 0, STI, O);
    return;
    break;
  case 10:
    // STArr, STBArr, STBri, STBrr, STCri, STCrr, STDArr, STDCri, STDCrr, STD...
    printOperand(MI, 2, STI, O);
    O << ", [";
    printMemOperand(MI, 0, STI, O);
    break;
  case 11:
    // TICCri, TICCrr, TRAPri, TRAPrr, TXCCri, TXCCrr
    printCCOperand(MI, 2, STI, O);
    break;
  case 12:
    // V9FMOVD_FCC, V9FMOVQ_FCC, V9FMOVS_FCC, V9MOVFCCri, V9MOVFCCrr
    printCCOperand(MI, 4, STI, O);
    O << ' ';
    printOperand(MI, 1, STI, O);
    O << ", ";
    printOperand(MI, 2, STI, O);
    O << ", ";
    printOperand(MI, 0, STI, O);
    return;
    break;
  }


  // Fragment 1 encoded into 5 bits for 21 unique commands.
  switch ((Bits >> 16) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ADJCALLSTACKDOWN, SET, ADDCCri, ADDCCrr, ADDCri, ADDCrr, ADDEri, ADDEr...
    O << ", ";
    break;
  case 1:
    // ADJCALLSTACKUP, BA, BINDri, BINDrr, CALL, CALLri, CALLrr, CMASK16, CMA...
    return;
    break;
  case 2:
    // BCOND, BPFCC, CBCOND, FBCOND, TRAPri, TRAPrr
    O << ' ';
    break;
  case 3:
    // BCONDA, BPFCCA, CBCONDA, FBCONDA
    O << ",a ";
    break;
  case 4:
    // BPFCCANT
    O << ",a,pn ";
    printOperand(MI, 2, STI, O);
    O << ", ";
    printOperand(MI, 0, STI, O);
    return;
    break;
  case 5:
    // BPFCCNT
    O << ",pn ";
    printOperand(MI, 2, STI, O);
    O << ", ";
    printOperand(MI, 0, STI, O);
    return;
    break;
  case 6:
    // BPICC, FMOVD_ICC, FMOVQ_ICC, FMOVS_ICC, MOVICCri, MOVICCrr, TICCri, TI...
    O << " %icc, ";
    break;
  case 7:
    // BPICCA
    O << ",a %icc, ";
    printOperand(MI, 0, STI, O);
    return;
    break;
  case 8:
    // BPICCANT
    O << ",a,pn %icc, ";
    printOperand(MI, 0, STI, O);
    return;
    break;
  case 9:
    // BPICCNT
    O << ",pn %icc, ";
    printOperand(MI, 0, STI, O);
    return;
    break;
  case 10:
    // BPXCC, FMOVD_XCC, FMOVQ_XCC, FMOVS_XCC, MOVXCCri, MOVXCCrr, TXCCri, TX...
    O << " %xcc, ";
    break;
  case 11:
    // BPXCCA
    O << ",a %xcc, ";
    printOperand(MI, 0, STI, O);
    return;
    break;
  case 12:
    // BPXCCANT
    O << ",a,pn %xcc, ";
    printOperand(MI, 0, STI, O);
    return;
    break;
  case 13:
    // BPXCCNT
    O << ",pn %xcc, ";
    printOperand(MI, 0, STI, O);
    return;
    break;
  case 14:
    // CASAasi10
    O << "] 10, ";
    printOperand(MI, 2, STI, O);
    O << ", ";
    printOperand(MI, 0, STI, O);
    return;
    break;
  case 15:
    // CASArr, LDArr, LDDArr, LDDFArr, LDFArr, LDQFArr, LDSBArr, LDSHArr, LDS...
    O << "] ";
    break;
  case 16:
    // CASXrr, CASrr, LDCri, LDCrr, LDDCri, LDDCrr, LDDFri, LDDFrr, LDDri, LD...
    O << "], ";
    break;
  case 17:
    // FMOVD_FCC, FMOVQ_FCC, FMOVS_FCC, MOVFCCri, MOVFCCrr
    O << " %fcc0, ";
    printOperand(MI, 1, STI, O);
    O << ", ";
    printOperand(MI, 0, STI, O);
    return;
    break;
  case 18:
    // LDCSRri, LDCSRrr
    O << "], %csr";
    return;
    break;
  case 19:
    // LDFSRri, LDFSRrr, LDXFSRri, LDXFSRrr
    O << "], %fsr";
    return;
    break;
  case 20:
    // STBri, STBrr, STCSRri, STCSRrr, STCri, STCrr, STDCQri, STDCQrr, STDCri...
    O << ']';
    return;
    break;
  }


  // Fragment 2 encoded into 3 bits for 5 unique commands.
  switch ((Bits >> 21) & 7) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ADJCALLSTACKDOWN, BPGEZapn, BPGEZapt, BPGEZnapn, BPGEZnapt, BPGZapn, B...
    printOperand(MI, 1, STI, O);
    break;
  case 1:
    // SET, BCOND, BCONDA, BPICC, BPXCC, CBCOND, CBCONDA, FABSD, FABSQ, FABSS...
    printOperand(MI, 0, STI, O);
    break;
  case 2:
    // ADDCCri, ADDCCrr, ADDCri, ADDCrr, ADDEri, ADDErr, ADDXC, ADDXCCC, ADDX...
    printOperand(MI, 2, STI, O);
    O << ", ";
    printOperand(MI, 0, STI, O);
    break;
  case 3:
    // CASArr
    printOperand(MI, 4, STI, O);
    O << ", ";
    printOperand(MI, 2, STI, O);
    O << ", ";
    printOperand(MI, 0, STI, O);
    return;
    break;
  case 4:
    // LDArr, LDDArr, LDDFArr, LDFArr, LDQFArr, LDSBArr, LDSHArr, LDSTUBArr, ...
    printOperand(MI, 3, STI, O);
    break;
  }


  // Fragment 3 encoded into 3 bits for 6 unique commands.
  switch ((Bits >> 24) & 7) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ADJCALLSTACKDOWN, SET, ADDCCri, ADDCCrr, ADDCri, ADDCrr, ADDEri, ADDEr...
    return;
    break;
  case 1:
    // FLCMPD, FLCMPS, FMOVD_ICC, FMOVD_XCC, FMOVQ_ICC, FMOVQ_XCC, FMOVS_ICC,...
    O << ", ";
    break;
  case 2:
    // PWRPSRri, PWRPSRrr, WRPSRri, WRPSRrr
    O << ", %psr";
    return;
    break;
  case 3:
    // TICCri, TICCrr, TRAPri, TRAPrr, TXCCri, TXCCrr
    O << " + ";
    printOperand(MI, 1, STI, O);
    return;
    break;
  case 4:
    // WRTBRri, WRTBRrr
    O << ", %tbr";
    return;
    break;
  case 5:
    // WRWIMri, WRWIMrr
    O << ", %wim";
    return;
    break;
  }


  // Fragment 4 encoded into 2 bits for 3 unique commands.
  switch ((Bits >> 27) & 3) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // FLCMPD, FLCMPS, V9FCMPD, V9FCMPED, V9FCMPEQ, V9FCMPES, V9FCMPQ, V9FCMP...
    printOperand(MI, 2, STI, O);
    return;
    break;
  case 1:
    // FMOVD_ICC, FMOVD_XCC, FMOVQ_ICC, FMOVQ_XCC, FMOVS_ICC, FMOVS_XCC, LDAr...
    printOperand(MI, 0, STI, O);
    return;
    break;
  case 2:
    // TLS_ADDXrr, TLS_ADDrr, TLS_LDXrr, TLS_LDrr
    printOperand(MI, 3, STI, O);
    return;
    break;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *SparcInstPrinter::getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 236 && "Invalid register number!");

  static const char AsmStrs[] = {
  /* 0 */ 'C', '1', '0', 0,
  /* 4 */ 'F', '1', '0', 0,
  /* 8 */ 'A', 'S', 'R', '1', '0', 0,
  /* 14 */ 'C', '2', '0', 0,
  /* 18 */ 'F', '2', '0', 0,
  /* 22 */ 'A', 'S', 'R', '2', '0', 0,
  /* 28 */ 'C', '3', '0', 0,
  /* 32 */ 'F', '3', '0', 0,
  /* 36 */ 'A', 'S', 'R', '3', '0', 0,
  /* 42 */ 'F', '4', '0', 0,
  /* 46 */ 'F', '5', '0', 0,
  /* 50 */ 'F', '6', '0', 0,
  /* 54 */ 'F', 'C', 'C', '0', 0,
  /* 59 */ 'F', '0', 0,
  /* 62 */ 'G', '0', 0,
  /* 65 */ 'I', '0', 0,
  /* 68 */ 'L', '0', 0,
  /* 71 */ 'O', '0', 0,
  /* 74 */ 'C', '1', '1', 0,
  /* 78 */ 'F', '1', '1', 0,
  /* 82 */ 'A', 'S', 'R', '1', '1', 0,
  /* 88 */ 'C', '2', '1', 0,
  /* 92 */ 'F', '2', '1', 0,
  /* 96 */ 'A', 'S', 'R', '2', '1', 0,
  /* 102 */ 'C', '3', '1', 0,
  /* 106 */ 'F', '3', '1', 0,
  /* 110 */ 'A', 'S', 'R', '3', '1', 0,
  /* 116 */ 'F', 'C', 'C', '1', 0,
  /* 121 */ 'F', '1', 0,
  /* 124 */ 'G', '1', 0,
  /* 127 */ 'I', '1', 0,
  /* 130 */ 'L', '1', 0,
  /* 133 */ 'O', '1', 0,
  /* 136 */ 'A', 'S', 'R', '1', 0,
  /* 141 */ 'C', '1', '2', 0,
  /* 145 */ 'F', '1', '2', 0,
  /* 149 */ 'A', 'S', 'R', '1', '2', 0,
  /* 155 */ 'C', '2', '2', 0,
  /* 159 */ 'F', '2', '2', 0,
  /* 163 */ 'A', 'S', 'R', '2', '2', 0,
  /* 169 */ 'F', '3', '2', 0,
  /* 173 */ 'F', '4', '2', 0,
  /* 177 */ 'F', '5', '2', 0,
  /* 181 */ 'F', '6', '2', 0,
  /* 185 */ 'F', 'C', 'C', '2', 0,
  /* 190 */ 'F', '2', 0,
  /* 193 */ 'G', '2', 0,
  /* 196 */ 'I', '2', 0,
  /* 199 */ 'L', '2', 0,
  /* 202 */ 'O', '2', 0,
  /* 205 */ 'A', 'S', 'R', '2', 0,
  /* 210 */ 'C', '1', '3', 0,
  /* 214 */ 'F', '1', '3', 0,
  /* 218 */ 'A', 'S', 'R', '1', '3', 0,
  /* 224 */ 'C', '2', '3', 0,
  /* 228 */ 'F', '2', '3', 0,
  /* 232 */ 'A', 'S', 'R', '2', '3', 0,
  /* 238 */ 'F', 'C', 'C', '3', 0,
  /* 243 */ 'F', '3', 0,
  /* 246 */ 'G', '3', 0,
  /* 249 */ 'I', '3', 0,
  /* 252 */ 'L', '3', 0,
  /* 255 */ 'O', '3', 0,
  /* 258 */ 'A', 'S', 'R', '3', 0,
  /* 263 */ 'C', '1', '4', 0,
  /* 267 */ 'F', '1', '4', 0,
  /* 271 */ 'A', 'S', 'R', '1', '4', 0,
  /* 277 */ 'C', '2', '4', 0,
  /* 281 */ 'F', '2', '4', 0,
  /* 285 */ 'A', 'S', 'R', '2', '4', 0,
  /* 291 */ 'F', '3', '4', 0,
  /* 295 */ 'F', '4', '4', 0,
  /* 299 */ 'F', '5', '4', 0,
  /* 303 */ 'C', '4', 0,
  /* 306 */ 'F', '4', 0,
  /* 309 */ 'G', '4', 0,
  /* 312 */ 'I', '4', 0,
  /* 315 */ 'L', '4', 0,
  /* 318 */ 'O', '4', 0,
  /* 321 */ 'A', 'S', 'R', '4', 0,
  /* 326 */ 'C', '1', '5', 0,
  /* 330 */ 'F', '1', '5', 0,
  /* 334 */ 'A', 'S', 'R', '1', '5', 0,
  /* 340 */ 'C', '2', '5', 0,
  /* 344 */ 'F', '2', '5', 0,
  /* 348 */ 'A', 'S', 'R', '2', '5', 0,
  /* 354 */ 'C', '5', 0,
  /* 357 */ 'F', '5', 0,
  /* 360 */ 'G', '5', 0,
  /* 363 */ 'I', '5', 0,
  /* 366 */ 'L', '5', 0,
  /* 369 */ 'O', '5', 0,
  /* 372 */ 'A', 'S', 'R', '5', 0,
  /* 377 */ 'C', '1', '6', 0,
  /* 381 */ 'F', '1', '6', 0,
  /* 385 */ 'A', 'S', 'R', '1', '6', 0,
  /* 391 */ 'C', '2', '6', 0,
  /* 395 */ 'F', '2', '6', 0,
  /* 399 */ 'A', 'S', 'R', '2', '6', 0,
  /* 405 */ 'F', '3', '6', 0,
  /* 409 */ 'F', '4', '6', 0,
  /* 413 */ 'F', '5', '6', 0,
  /* 417 */ 'C', '6', 0,
  /* 420 */ 'F', '6', 0,
  /* 423 */ 'G', '6', 0,
  /* 426 */ 'I', '6', 0,
  /* 429 */ 'L', '6', 0,
  /* 432 */ 'O', '6', 0,
  /* 435 */ 'A', 'S', 'R', '6', 0,
  /* 440 */ 'C', '1', '7', 0,
  /* 444 */ 'F', '1', '7', 0,
  /* 448 */ 'A', 'S', 'R', '1', '7', 0,
  /* 454 */ 'C', '2', '7', 0,
  /* 458 */ 'F', '2', '7', 0,
  /* 462 */ 'A', 'S', 'R', '2', '7', 0,
  /* 468 */ 'C', '7', 0,
  /* 471 */ 'F', '7', 0,
  /* 474 */ 'G', '7', 0,
  /* 477 */ 'I', '7', 0,
  /* 480 */ 'L', '7', 0,
  /* 483 */ 'O', '7', 0,
  /* 486 */ 'A', 'S', 'R', '7', 0,
  /* 491 */ 'C', '1', '8', 0,
  /* 495 */ 'F', '1', '8', 0,
  /* 499 */ 'A', 'S', 'R', '1', '8', 0,
  /* 505 */ 'C', '2', '8', 0,
  /* 509 */ 'F', '2', '8', 0,
  /* 513 */ 'A', 'S', 'R', '2', '8', 0,
  /* 519 */ 'F', '3', '8', 0,
  /* 523 */ 'F', '4', '8', 0,
  /* 527 */ 'F', '5', '8', 0,
  /* 531 */ 'C', '8', 0,
  /* 534 */ 'F', '8', 0,
  /* 537 */ 'A', 'S', 'R', '8', 0,
  /* 542 */ 'C', '1', '9', 0,
  /* 546 */ 'F', '1', '9', 0,
  /* 550 */ 'A', 'S', 'R', '1', '9', 0,
  /* 556 */ 'C', '2', '9', 0,
  /* 560 */ 'F', '2', '9', 0,
  /* 564 */ 'A', 'S', 'R', '2', '9', 0,
  /* 570 */ 'C', '9', 0,
  /* 573 */ 'F', '9', 0,
  /* 576 */ 'A', 'S', 'R', '9', 0,
  /* 581 */ 'T', 'B', 'A', 0,
  /* 585 */ 'I', 'C', 'C', 0,
  /* 589 */ 'T', 'N', 'P', 'C', 0,
  /* 594 */ 'T', 'P', 'C', 0,
  /* 598 */ 'C', 'A', 'N', 'R', 'E', 'S', 'T', 'O', 'R', 'E', 0,
  /* 609 */ 'P', 'S', 'T', 'A', 'T', 'E', 0,
  /* 616 */ 'T', 'S', 'T', 'A', 'T', 'E', 0,
  /* 623 */ 'W', 'S', 'T', 'A', 'T', 'E', 0,
  /* 630 */ 'C', 'A', 'N', 'S', 'A', 'V', 'E', 0,
  /* 638 */ 'T', 'I', 'C', 'K', 0,
  /* 643 */ 'P', 'I', 'L', 0,
  /* 647 */ 'T', 'L', 0,
  /* 650 */ 'W', 'I', 'M', 0,
  /* 654 */ 'C', 'L', 'E', 'A', 'N', 'W', 'I', 'N', 0,
  /* 663 */ 'O', 'T', 'H', 'E', 'R', 'W', 'I', 'N', 0,
  /* 672 */ 'F', 'P', 0,
  /* 675 */ 'S', 'P', 0,
  /* 678 */ 'C', 'W', 'P', 0,
  /* 682 */ 'F', 'Q', 0,
  /* 685 */ 'C', 'P', 'Q', 0,
  /* 689 */ 'T', 'B', 'R', 0,
  /* 693 */ 'F', 'S', 'R', 0,
  /* 697 */ 'C', 'P', 'S', 'R', 0,
  /* 702 */ 'T', 'T', 0,
  /* 705 */ 'Y', 0,
  };

  static const uint16_t RegAsmOffset[] = {
    598, 630, 654, 685, 697, 678, 682, 693, 585, 663, 643, 698, 609, 581, 
    689, 638, 647, 589, 594, 616, 702, 650, 623, 705, 136, 205, 258, 321, 
    372, 435, 486, 537, 576, 8, 82, 149, 218, 271, 334, 385, 448, 499, 
    550, 22, 96, 163, 232, 285, 348, 399, 462, 513, 564, 36, 110, 56, 
    118, 187, 240, 303, 354, 417, 468, 531, 570, 0, 74, 141, 210, 263, 
    326, 377, 440, 491, 542, 14, 88, 155, 224, 277, 340, 391, 454, 505, 
    556, 28, 102, 59, 190, 306, 420, 534, 4, 145, 267, 381, 495, 18, 
    159, 281, 395, 509, 32, 169, 291, 405, 519, 42, 173, 295, 409, 523, 
    46, 177, 299, 413, 527, 50, 181, 59, 121, 190, 243, 306, 357, 420, 
    471, 534, 573, 4, 78, 145, 214, 267, 330, 381, 444, 495, 546, 18, 
    92, 159, 228, 281, 344, 395, 458, 509, 560, 32, 106, 54, 116, 185, 
    238, 62, 124, 193, 246, 309, 360, 423, 474, 65, 127, 196, 249, 312, 
    363, 672, 477, 68, 130, 199, 252, 315, 366, 429, 480, 71, 133, 202, 
    255, 318, 369, 675, 483, 59, 306, 534, 145, 381, 18, 281, 509, 169, 
    405, 42, 295, 523, 177, 413, 50, 56, 187, 303, 417, 531, 0, 141, 
    263, 377, 491, 14, 155, 277, 391, 505, 28, 62, 193, 309, 423, 65, 
    196, 312, 426, 68, 199, 315, 429, 71, 202, 318, 432, 
  };

  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
}

#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

bool SparcInstPrinter::printAliasInstr(const MCInst *MI, const MCSubtargetInfo &STI, raw_ostream &OS) {
  static const PatternsForOpcode OpToPatterns[] = {
    {SP::BCOND, 0, 16 },
    {SP::BCONDA, 16, 16 },
    {SP::BPFCCANT, 32, 16 },
    {SP::BPFCCNT, 48, 16 },
    {SP::BPICCANT, 64, 16 },
    {SP::BPICCNT, 80, 16 },
    {SP::BPXCCANT, 96, 16 },
    {SP::BPXCCNT, 112, 16 },
    {SP::FMOVD_ICC, 128, 16 },
    {SP::FMOVD_XCC, 144, 16 },
    {SP::FMOVQ_ICC, 160, 16 },
    {SP::FMOVQ_XCC, 176, 16 },
    {SP::FMOVS_ICC, 192, 16 },
    {SP::FMOVS_XCC, 208, 16 },
    {SP::MOVICCri, 224, 16 },
    {SP::MOVICCrr, 240, 16 },
    {SP::MOVXCCri, 256, 16 },
    {SP::MOVXCCrr, 272, 16 },
    {SP::ORCCrr, 288, 1 },
    {SP::ORri, 289, 1 },
    {SP::ORrr, 290, 1 },
    {SP::RESTORErr, 291, 1 },
    {SP::RET, 292, 1 },
    {SP::RETL, 293, 1 },
    {SP::SAVErr, 294, 1 },
    {SP::TICCri, 295, 32 },
    {SP::TICCrr, 327, 32 },
    {SP::TRAPri, 359, 32 },
    {SP::TRAPrr, 391, 32 },
    {SP::TXCCri, 423, 32 },
    {SP::TXCCrr, 455, 32 },
    {SP::V9FCMPD, 487, 1 },
    {SP::V9FCMPED, 488, 1 },
    {SP::V9FCMPEQ, 489, 1 },
    {SP::V9FCMPES, 490, 1 },
    {SP::V9FCMPQ, 491, 1 },
    {SP::V9FCMPS, 492, 1 },
    {SP::V9FMOVD_FCC, 493, 16 },
    {SP::V9FMOVQ_FCC, 509, 16 },
    {SP::V9FMOVS_FCC, 525, 16 },
    {SP::V9MOVFCCri, 541, 16 },
    {SP::V9MOVFCCrr, 557, 16 },
  };

  static const AliasPattern Patterns[] = {
    // SP::BCOND - 0
    {0, 0, 2, 2 },
    {6, 2, 2, 2 },
    {12, 4, 2, 2 },
    {19, 6, 2, 2 },
    {25, 8, 2, 2 },
    {31, 10, 2, 2 },
    {38, 12, 2, 2 },
    {45, 14, 2, 2 },
    {51, 16, 2, 2 },
    {58, 18, 2, 2 },
    {66, 20, 2, 2 },
    {73, 22, 2, 2 },
    {80, 24, 2, 2 },
    {88, 26, 2, 2 },
    {96, 28, 2, 2 },
    {103, 30, 2, 2 },
    // SP::BCONDA - 16
    {110, 32, 2, 2 },
    {118, 34, 2, 2 },
    {126, 36, 2, 2 },
    {135, 38, 2, 2 },
    {143, 40, 2, 2 },
    {151, 42, 2, 2 },
    {160, 44, 2, 2 },
    {169, 46, 2, 2 },
    {177, 48, 2, 2 },
    {186, 50, 2, 2 },
    {196, 52, 2, 2 },
    {205, 54, 2, 2 },
    {214, 56, 2, 2 },
    {224, 58, 2, 2 },
    {234, 60, 2, 2 },
    {243, 62, 2, 2 },
    // SP::BPFCCANT - 32
    {252, 64, 3, 4 },
    {268, 68, 3, 4 },
    {284, 72, 3, 4 },
    {300, 76, 3, 4 },
    {316, 80, 3, 4 },
    {333, 84, 3, 4 },
    {349, 88, 3, 4 },
    {366, 92, 3, 4 },
    {383, 96, 3, 4 },
    {400, 100, 3, 4 },
    {416, 104, 3, 4 },
    {433, 108, 3, 4 },
    {450, 112, 3, 4 },
    {468, 116, 3, 4 },
    {485, 120, 3, 4 },
    {503, 124, 3, 4 },
    // SP::BPFCCNT - 48
    {519, 128, 3, 4 },
    {533, 132, 3, 4 },
    {547, 136, 3, 4 },
    {561, 140, 3, 4 },
    {575, 144, 3, 4 },
    {590, 148, 3, 4 },
    {604, 152, 3, 4 },
    {619, 156, 3, 4 },
    {634, 160, 3, 4 },
    {649, 164, 3, 4 },
    {663, 168, 3, 4 },
    {678, 172, 3, 4 },
    {693, 176, 3, 4 },
    {709, 180, 3, 4 },
    {724, 184, 3, 4 },
    {740, 188, 3, 4 },
    // SP::BPICCANT - 64
    {754, 192, 2, 3 },
    {771, 195, 2, 3 },
    {788, 198, 2, 3 },
    {806, 201, 2, 3 },
    {823, 204, 2, 3 },
    {840, 207, 2, 3 },
    {858, 210, 2, 3 },
    {876, 213, 2, 3 },
    {893, 216, 2, 3 },
    {911, 219, 2, 3 },
    {930, 222, 2, 3 },
    {948, 225, 2, 3 },
    {966, 228, 2, 3 },
    {985, 231, 2, 3 },
    {1004, 234, 2, 3 },
    {1022, 237, 2, 3 },
    // SP::BPICCNT - 80
    {1040, 240, 2, 3 },
    {1055, 243, 2, 3 },
    {1070, 246, 2, 3 },
    {1086, 249, 2, 3 },
    {1101, 252, 2, 3 },
    {1116, 255, 2, 3 },
    {1132, 258, 2, 3 },
    {1148, 261, 2, 3 },
    {1163, 264, 2, 3 },
    {1179, 267, 2, 3 },
    {1196, 270, 2, 3 },
    {1212, 273, 2, 3 },
    {1228, 276, 2, 3 },
    {1245, 279, 2, 3 },
    {1262, 282, 2, 3 },
    {1278, 285, 2, 3 },
    // SP::BPXCCANT - 96
    {1294, 288, 2, 2 },
    {1311, 290, 2, 2 },
    {1328, 292, 2, 2 },
    {1346, 294, 2, 2 },
    {1363, 296, 2, 2 },
    {1380, 298, 2, 2 },
    {1398, 300, 2, 2 },
    {1416, 302, 2, 2 },
    {1433, 304, 2, 2 },
    {1451, 306, 2, 2 },
    {1470, 308, 2, 2 },
    {1488, 310, 2, 2 },
    {1506, 312, 2, 2 },
    {1525, 314, 2, 2 },
    {1544, 316, 2, 2 },
    {1562, 318, 2, 2 },
    // SP::BPXCCNT - 112
    {1580, 320, 2, 2 },
    {1595, 322, 2, 2 },
    {1610, 324, 2, 2 },
    {1626, 326, 2, 2 },
    {1641, 328, 2, 2 },
    {1656, 330, 2, 2 },
    {1672, 332, 2, 2 },
    {1688, 334, 2, 2 },
    {1703, 336, 2, 2 },
    {1719, 338, 2, 2 },
    {1736, 340, 2, 2 },
    {1752, 342, 2, 2 },
    {1768, 344, 2, 2 },
    {1785, 346, 2, 2 },
    {1802, 348, 2, 2 },
    {1818, 350, 2, 2 },
    // SP::FMOVD_ICC - 128
    {1834, 352, 4, 5 },
    {1854, 357, 4, 5 },
    {1874, 362, 4, 5 },
    {1895, 367, 4, 5 },
    {1915, 372, 4, 5 },
    {1935, 377, 4, 5 },
    {1956, 382, 4, 5 },
    {1977, 387, 4, 5 },
    {1997, 392, 4, 5 },
    {2018, 397, 4, 5 },
    {2040, 402, 4, 5 },
    {2061, 407, 4, 5 },
    {2082, 412, 4, 5 },
    {2104, 417, 4, 5 },
    {2126, 422, 4, 5 },
    {2147, 427, 4, 5 },
    // SP::FMOVD_XCC - 144
    {2168, 432, 4, 4 },
    {2188, 436, 4, 4 },
    {2208, 440, 4, 4 },
    {2229, 444, 4, 4 },
    {2249, 448, 4, 4 },
    {2269, 452, 4, 4 },
    {2290, 456, 4, 4 },
    {2311, 460, 4, 4 },
    {2331, 464, 4, 4 },
    {2352, 468, 4, 4 },
    {2374, 472, 4, 4 },
    {2395, 476, 4, 4 },
    {2416, 480, 4, 4 },
    {2438, 484, 4, 4 },
    {2460, 488, 4, 4 },
    {2481, 492, 4, 4 },
    // SP::FMOVQ_ICC - 160
    {2502, 496, 4, 5 },
    {2522, 501, 4, 5 },
    {2542, 506, 4, 5 },
    {2563, 511, 4, 5 },
    {2583, 516, 4, 5 },
    {2603, 521, 4, 5 },
    {2624, 526, 4, 5 },
    {2645, 531, 4, 5 },
    {2665, 536, 4, 5 },
    {2686, 541, 4, 5 },
    {2708, 546, 4, 5 },
    {2729, 551, 4, 5 },
    {2750, 556, 4, 5 },
    {2772, 561, 4, 5 },
    {2794, 566, 4, 5 },
    {2815, 571, 4, 5 },
    // SP::FMOVQ_XCC - 176
    {2836, 576, 4, 4 },
    {2856, 580, 4, 4 },
    {2876, 584, 4, 4 },
    {2897, 588, 4, 4 },
    {2917, 592, 4, 4 },
    {2937, 596, 4, 4 },
    {2958, 600, 4, 4 },
    {2979, 604, 4, 4 },
    {2999, 608, 4, 4 },
    {3020, 612, 4, 4 },
    {3042, 616, 4, 4 },
    {3063, 620, 4, 4 },
    {3084, 624, 4, 4 },
    {3106, 628, 4, 4 },
    {3128, 632, 4, 4 },
    {3149, 636, 4, 4 },
    // SP::FMOVS_ICC - 192
    {3170, 640, 4, 5 },
    {3190, 645, 4, 5 },
    {3210, 650, 4, 5 },
    {3231, 655, 4, 5 },
    {3251, 660, 4, 5 },
    {3271, 665, 4, 5 },
    {3292, 670, 4, 5 },
    {3313, 675, 4, 5 },
    {3333, 680, 4, 5 },
    {3354, 685, 4, 5 },
    {3376, 690, 4, 5 },
    {3397, 695, 4, 5 },
    {3418, 700, 4, 5 },
    {3440, 705, 4, 5 },
    {3462, 710, 4, 5 },
    {3483, 715, 4, 5 },
    // SP::FMOVS_XCC - 208
    {3504, 720, 4, 4 },
    {3524, 724, 4, 4 },
    {3544, 728, 4, 4 },
    {3565, 732, 4, 4 },
    {3585, 736, 4, 4 },
    {3605, 740, 4, 4 },
    {3626, 744, 4, 4 },
    {3647, 748, 4, 4 },
    {3667, 752, 4, 4 },
    {3688, 756, 4, 4 },
    {3710, 760, 4, 4 },
    {3731, 764, 4, 4 },
    {3752, 768, 4, 4 },
    {3774, 772, 4, 4 },
    {3796, 776, 4, 4 },
    {3817, 780, 4, 4 },
    // SP::MOVICCri - 224
    {3838, 784, 4, 5 },
    {3856, 789, 4, 5 },
    {3874, 794, 4, 5 },
    {3893, 799, 4, 5 },
    {3911, 804, 4, 5 },
    {3929, 809, 4, 5 },
    {3948, 814, 4, 5 },
    {3967, 819, 4, 5 },
    {3985, 824, 4, 5 },
    {4004, 829, 4, 5 },
    {4024, 834, 4, 5 },
    {4043, 839, 4, 5 },
    {4062, 844, 4, 5 },
    {4082, 849, 4, 5 },
    {4102, 854, 4, 5 },
    {4121, 859, 4, 5 },
    // SP::MOVICCrr - 240
    {3838, 864, 4, 5 },
    {3856, 869, 4, 5 },
    {3874, 874, 4, 5 },
    {3893, 879, 4, 5 },
    {3911, 884, 4, 5 },
    {3929, 889, 4, 5 },
    {3948, 894, 4, 5 },
    {3967, 899, 4, 5 },
    {3985, 904, 4, 5 },
    {4004, 909, 4, 5 },
    {4024, 914, 4, 5 },
    {4043, 919, 4, 5 },
    {4062, 924, 4, 5 },
    {4082, 929, 4, 5 },
    {4102, 934, 4, 5 },
    {4121, 939, 4, 5 },
    // SP::MOVXCCri - 256
    {4140, 944, 4, 4 },
    {4158, 948, 4, 4 },
    {4176, 952, 4, 4 },
    {4195, 956, 4, 4 },
    {4213, 960, 4, 4 },
    {4231, 964, 4, 4 },
    {4250, 968, 4, 4 },
    {4269, 972, 4, 4 },
    {4287, 976, 4, 4 },
    {4306, 980, 4, 4 },
    {4326, 984, 4, 4 },
    {4345, 988, 4, 4 },
    {4364, 992, 4, 4 },
    {4384, 996, 4, 4 },
    {4404, 1000, 4, 4 },
    {4423, 1004, 4, 4 },
    // SP::MOVXCCrr - 272
    {4140, 1008, 4, 4 },
    {4158, 1012, 4, 4 },
    {4176, 1016, 4, 4 },
    {4195, 1020, 4, 4 },
    {4213, 1024, 4, 4 },
    {4231, 1028, 4, 4 },
    {4250, 1032, 4, 4 },
    {4269, 1036, 4, 4 },
    {4287, 1040, 4, 4 },
    {4306, 1044, 4, 4 },
    {4326, 1048, 4, 4 },
    {4345, 1052, 4, 4 },
    {4364, 1056, 4, 4 },
    {4384, 1060, 4, 4 },
    {4404, 1064, 4, 4 },
    {4423, 1068, 4, 4 },
    // SP::ORCCrr - 288
    {4442, 1072, 3, 3 },
    // SP::ORri - 289
    {4449, 1075, 3, 2 },
    // SP::ORrr - 290
    {4449, 1077, 3, 3 },
    // SP::RESTORErr - 291
    {4460, 1080, 3, 3 },
    // SP::RET - 292
    {4468, 1083, 1, 1 },
    // SP::RETL - 293
    {4472, 1084, 1, 1 },
    // SP::SAVErr - 294
    {4477, 1085, 3, 3 },
    // SP::TICCri - 295
    {4482, 1088, 3, 4 },
    {4494, 1092, 3, 4 },
    {4511, 1096, 3, 4 },
    {4523, 1100, 3, 4 },
    {4540, 1104, 3, 4 },
    {4553, 1108, 3, 4 },
    {4571, 1112, 3, 4 },
    {4583, 1116, 3, 4 },
    {4600, 1120, 3, 4 },
    {4612, 1124, 3, 4 },
    {4629, 1128, 3, 4 },
    {4642, 1132, 3, 4 },
    {4660, 1136, 3, 4 },
    {4673, 1140, 3, 4 },
    {4691, 1144, 3, 4 },
    {4703, 1148, 3, 4 },
    {4720, 1152, 3, 4 },
    {4733, 1156, 3, 4 },
    {4751, 1160, 3, 4 },
    {4765, 1164, 3, 4 },
    {4784, 1168, 3, 4 },
    {4797, 1172, 3, 4 },
    {4815, 1176, 3, 4 },
    {4828, 1180, 3, 4 },
    {4846, 1184, 3, 4 },
    {4860, 1188, 3, 4 },
    {4879, 1192, 3, 4 },
    {4893, 1196, 3, 4 },
    {4912, 1200, 3, 4 },
    {4925, 1204, 3, 4 },
    {4943, 1208, 3, 4 },
    {4956, 1212, 3, 4 },
    // SP::TICCrr - 327
    {4482, 1216, 3, 4 },
    {4494, 1220, 3, 4 },
    {4511, 1224, 3, 4 },
    {4523, 1228, 3, 4 },
    {4540, 1232, 3, 4 },
    {4553, 1236, 3, 4 },
    {4571, 1240, 3, 4 },
    {4583, 1244, 3, 4 },
    {4600, 1248, 3, 4 },
    {4612, 1252, 3, 4 },
    {4629, 1256, 3, 4 },
    {4642, 1260, 3, 4 },
    {4660, 1264, 3, 4 },
    {4673, 1268, 3, 4 },
    {4691, 1272, 3, 4 },
    {4703, 1276, 3, 4 },
    {4720, 1280, 3, 4 },
    {4733, 1284, 3, 4 },
    {4751, 1288, 3, 4 },
    {4765, 1292, 3, 4 },
    {4784, 1296, 3, 4 },
    {4797, 1300, 3, 4 },
    {4815, 1304, 3, 4 },
    {4828, 1308, 3, 4 },
    {4846, 1312, 3, 4 },
    {4860, 1316, 3, 4 },
    {4879, 1320, 3, 4 },
    {4893, 1324, 3, 4 },
    {4912, 1328, 3, 4 },
    {4925, 1332, 3, 4 },
    {4943, 1336, 3, 4 },
    {4956, 1340, 3, 4 },
    // SP::TRAPri - 359
    {4974, 1344, 3, 3 },
    {4980, 1347, 3, 3 },
    {4991, 1350, 3, 3 },
    {4997, 1353, 3, 3 },
    {5008, 1356, 3, 3 },
    {5015, 1359, 3, 3 },
    {5027, 1362, 3, 3 },
    {5033, 1365, 3, 3 },
    {5044, 1368, 3, 3 },
    {5050, 1371, 3, 3 },
    {5061, 1374, 3, 3 },
    {5068, 1377, 3, 3 },
    {5080, 1380, 3, 3 },
    {5087, 1383, 3, 3 },
    {5099, 1386, 3, 3 },
    {5105, 1389, 3, 3 },
    {5116, 1392, 3, 3 },
    {5123, 1395, 3, 3 },
    {5135, 1398, 3, 3 },
    {5143, 1401, 3, 3 },
    {5156, 1404, 3, 3 },
    {5163, 1407, 3, 3 },
    {5175, 1410, 3, 3 },
    {5182, 1413, 3, 3 },
    {5194, 1416, 3, 3 },
    {5202, 1419, 3, 3 },
    {5215, 1422, 3, 3 },
    {5223, 1425, 3, 3 },
    {5236, 1428, 3, 3 },
    {5243, 1431, 3, 3 },
    {5255, 1434, 3, 3 },
    {5262, 1437, 3, 3 },
    // SP::TRAPrr - 391
    {4974, 1440, 3, 3 },
    {4980, 1443, 3, 3 },
    {4991, 1446, 3, 3 },
    {4997, 1449, 3, 3 },
    {5008, 1452, 3, 3 },
    {5015, 1455, 3, 3 },
    {5027, 1458, 3, 3 },
    {5033, 1461, 3, 3 },
    {5044, 1464, 3, 3 },
    {5050, 1467, 3, 3 },
    {5061, 1470, 3, 3 },
    {5068, 1473, 3, 3 },
    {5080, 1476, 3, 3 },
    {5087, 1479, 3, 3 },
    {5099, 1482, 3, 3 },
    {5105, 1485, 3, 3 },
    {5116, 1488, 3, 3 },
    {5123, 1491, 3, 3 },
    {5135, 1494, 3, 3 },
    {5143, 1497, 3, 3 },
    {5156, 1500, 3, 3 },
    {5163, 1503, 3, 3 },
    {5175, 1506, 3, 3 },
    {5182, 1509, 3, 3 },
    {5194, 1512, 3, 3 },
    {5202, 1515, 3, 3 },
    {5215, 1518, 3, 3 },
    {5223, 1521, 3, 3 },
    {5236, 1524, 3, 3 },
    {5243, 1527, 3, 3 },
    {5255, 1530, 3, 3 },
    {5262, 1533, 3, 3 },
    // SP::TXCCri - 423
    {5274, 1536, 3, 4 },
    {5286, 1540, 3, 4 },
    {5303, 1544, 3, 4 },
    {5315, 1548, 3, 4 },
    {5332, 1552, 3, 4 },
    {5345, 1556, 3, 4 },
    {5363, 1560, 3, 4 },
    {5375, 1564, 3, 4 },
    {5392, 1568, 3, 4 },
    {5404, 1572, 3, 4 },
    {5421, 1576, 3, 4 },
    {5434, 1580, 3, 4 },
    {5452, 1584, 3, 4 },
    {5465, 1588, 3, 4 },
    {5483, 1592, 3, 4 },
    {5495, 1596, 3, 4 },
    {5512, 1600, 3, 4 },
    {5525, 1604, 3, 4 },
    {5543, 1608, 3, 4 },
    {5557, 1612, 3, 4 },
    {5576, 1616, 3, 4 },
    {5589, 1620, 3, 4 },
    {5607, 1624, 3, 4 },
    {5620, 1628, 3, 4 },
    {5638, 1632, 3, 4 },
    {5652, 1636, 3, 4 },
    {5671, 1640, 3, 4 },
    {5685, 1644, 3, 4 },
    {5704, 1648, 3, 4 },
    {5717, 1652, 3, 4 },
    {5735, 1656, 3, 4 },
    {5748, 1660, 3, 4 },
    // SP::TXCCrr - 455
    {5274, 1664, 3, 4 },
    {5286, 1668, 3, 4 },
    {5303, 1672, 3, 4 },
    {5315, 1676, 3, 4 },
    {5332, 1680, 3, 4 },
    {5345, 1684, 3, 4 },
    {5363, 1688, 3, 4 },
    {5375, 1692, 3, 4 },
    {5392, 1696, 3, 4 },
    {5404, 1700, 3, 4 },
    {5421, 1704, 3, 4 },
    {5434, 1708, 3, 4 },
    {5452, 1712, 3, 4 },
    {5465, 1716, 3, 4 },
    {5483, 1720, 3, 4 },
    {5495, 1724, 3, 4 },
    {5512, 1728, 3, 4 },
    {5525, 1732, 3, 4 },
    {5543, 1736, 3, 4 },
    {5557, 1740, 3, 4 },
    {5576, 1744, 3, 4 },
    {5589, 1748, 3, 4 },
    {5607, 1752, 3, 4 },
    {5620, 1756, 3, 4 },
    {5638, 1760, 3, 4 },
    {5652, 1764, 3, 4 },
    {5671, 1768, 3, 4 },
    {5685, 1772, 3, 4 },
    {5704, 1776, 3, 4 },
    {5717, 1780, 3, 4 },
    {5735, 1784, 3, 4 },
    {5748, 1788, 3, 4 },
    // SP::V9FCMPD - 487
    {5766, 1792, 3, 3 },
    // SP::V9FCMPED - 488
    {5779, 1795, 3, 3 },
    // SP::V9FCMPEQ - 489
    {5793, 1798, 3, 3 },
    // SP::V9FCMPES - 490
    {5807, 1801, 3, 3 },
    // SP::V9FCMPQ - 491
    {5821, 1804, 3, 3 },
    // SP::V9FCMPS - 492
    {5834, 1807, 3, 3 },
    // SP::V9FMOVD_FCC - 493
    {5847, 1810, 5, 6 },
    {5865, 1816, 5, 6 },
    {5883, 1822, 5, 6 },
    {5901, 1828, 5, 6 },
    {5919, 1834, 5, 6 },
    {5938, 1840, 5, 6 },
    {5956, 1846, 5, 6 },
    {5975, 1852, 5, 6 },
    {5994, 1858, 5, 6 },
    {6013, 1864, 5, 6 },
    {6031, 1870, 5, 6 },
    {6050, 1876, 5, 6 },
    {6069, 1882, 5, 6 },
    {6089, 1888, 5, 6 },
    {6108, 1894, 5, 6 },
    {6128, 1900, 5, 6 },
    // SP::V9FMOVQ_FCC - 509
    {6146, 1906, 5, 6 },
    {6164, 1912, 5, 6 },
    {6182, 1918, 5, 6 },
    {6200, 1924, 5, 6 },
    {6218, 1930, 5, 6 },
    {6237, 1936, 5, 6 },
    {6255, 1942, 5, 6 },
    {6274, 1948, 5, 6 },
    {6293, 1954, 5, 6 },
    {6312, 1960, 5, 6 },
    {6330, 1966, 5, 6 },
    {6349, 1972, 5, 6 },
    {6368, 1978, 5, 6 },
    {6388, 1984, 5, 6 },
    {6407, 1990, 5, 6 },
    {6427, 1996, 5, 6 },
    // SP::V9FMOVS_FCC - 525
    {6445, 2002, 5, 6 },
    {6463, 2008, 5, 6 },
    {6481, 2014, 5, 6 },
    {6499, 2020, 5, 6 },
    {6517, 2026, 5, 6 },
    {6536, 2032, 5, 6 },
    {6554, 2038, 5, 6 },
    {6573, 2044, 5, 6 },
    {6592, 2050, 5, 6 },
    {6611, 2056, 5, 6 },
    {6629, 2062, 5, 6 },
    {6648, 2068, 5, 6 },
    {6667, 2074, 5, 6 },
    {6687, 2080, 5, 6 },
    {6706, 2086, 5, 6 },
    {6726, 2092, 5, 6 },
    // SP::V9MOVFCCri - 541
    {6744, 2098, 5, 6 },
    {6760, 2104, 5, 6 },
    {6776, 2110, 5, 6 },
    {6792, 2116, 5, 6 },
    {6808, 2122, 5, 6 },
    {6825, 2128, 5, 6 },
    {6841, 2134, 5, 6 },
    {6858, 2140, 5, 6 },
    {6875, 2146, 5, 6 },
    {6892, 2152, 5, 6 },
    {6908, 2158, 5, 6 },
    {6925, 2164, 5, 6 },
    {6942, 2170, 5, 6 },
    {6960, 2176, 5, 6 },
    {6977, 2182, 5, 6 },
    {6995, 2188, 5, 6 },
    // SP::V9MOVFCCrr - 557
    {6744, 2194, 5, 6 },
    {6760, 2200, 5, 6 },
    {6776, 2206, 5, 6 },
    {6792, 2212, 5, 6 },
    {6808, 2218, 5, 6 },
    {6825, 2224, 5, 6 },
    {6841, 2230, 5, 6 },
    {6858, 2236, 5, 6 },
    {6875, 2242, 5, 6 },
    {6892, 2248, 5, 6 },
    {6908, 2254, 5, 6 },
    {6925, 2260, 5, 6 },
    {6942, 2266, 5, 6 },
    {6960, 2272, 5, 6 },
    {6977, 2278, 5, 6 },
    {6995, 2284, 5, 6 },
  };

  static const AliasPatternCond Conds[] = {
    // (BCOND brtarget:$imm, { 1, 0, 0, 0 }) - 0
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(8)},
    // (BCOND brtarget:$imm, { 0, 0, 0, 0 }) - 2
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (BCOND brtarget:$imm, { 1, 0, 0, 1 }) - 4
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(9)},
    // (BCOND brtarget:$imm, { 0, 0, 0, 1 }) - 6
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    // (BCOND brtarget:$imm, { 1, 0, 1, 0 }) - 8
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(10)},
    // (BCOND brtarget:$imm, { 0, 0, 1, 0 }) - 10
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    // (BCOND brtarget:$imm, { 1, 0, 1, 1 }) - 12
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(11)},
    // (BCOND brtarget:$imm, { 0, 0, 1, 1 }) - 14
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    // (BCOND brtarget:$imm, { 1, 1, 0, 0 }) - 16
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(12)},
    // (BCOND brtarget:$imm, { 0, 1, 0, 0 }) - 18
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(4)},
    // (BCOND brtarget:$imm, { 1, 1, 0, 1 }) - 20
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(13)},
    // (BCOND brtarget:$imm, { 0, 1, 0, 1 }) - 22
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(5)},
    // (BCOND brtarget:$imm, { 1, 1, 1, 0 }) - 24
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(14)},
    // (BCOND brtarget:$imm, { 0, 1, 1, 0 }) - 26
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(6)},
    // (BCOND brtarget:$imm, { 1, 1, 1, 1 }) - 28
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(15)},
    // (BCOND brtarget:$imm, { 0, 1, 1, 1 }) - 30
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    // (BCONDA brtarget:$imm, { 1, 0, 0, 0 }) - 32
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(8)},
    // (BCONDA brtarget:$imm, { 0, 0, 0, 0 }) - 34
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (BCONDA brtarget:$imm, { 1, 0, 0, 1 }) - 36
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(9)},
    // (BCONDA brtarget:$imm, { 0, 0, 0, 1 }) - 38
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    // (BCONDA brtarget:$imm, { 1, 0, 1, 0 }) - 40
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(10)},
    // (BCONDA brtarget:$imm, { 0, 0, 1, 0 }) - 42
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    // (BCONDA brtarget:$imm, { 1, 0, 1, 1 }) - 44
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(11)},
    // (BCONDA brtarget:$imm, { 0, 0, 1, 1 }) - 46
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    // (BCONDA brtarget:$imm, { 1, 1, 0, 0 }) - 48
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(12)},
    // (BCONDA brtarget:$imm, { 0, 1, 0, 0 }) - 50
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(4)},
    // (BCONDA brtarget:$imm, { 1, 1, 0, 1 }) - 52
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(13)},
    // (BCONDA brtarget:$imm, { 0, 1, 0, 1 }) - 54
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(5)},
    // (BCONDA brtarget:$imm, { 1, 1, 1, 0 }) - 56
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(14)},
    // (BCONDA brtarget:$imm, { 0, 1, 1, 0 }) - 58
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(6)},
    // (BCONDA brtarget:$imm, { 1, 1, 1, 1 }) - 60
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(15)},
    // (BCONDA brtarget:$imm, { 0, 1, 1, 1 }) - 62
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    // (BPFCCANT brtarget:$imm, { 1, 0, 0, 0 }, FCCRegs:$cc) - 64
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(8)},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPFCCANT brtarget:$imm, { 0, 0, 0, 0 }, FCCRegs:$cc) - 68
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPFCCANT brtarget:$imm, { 0, 1, 1, 1 }, FCCRegs:$cc) - 72
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPFCCANT brtarget:$imm, { 0, 1, 1, 0 }, FCCRegs:$cc) - 76
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(6)},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPFCCANT brtarget:$imm, { 0, 1, 0, 1 }, FCCRegs:$cc) - 80
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(5)},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPFCCANT brtarget:$imm, { 0, 1, 0, 0 }, FCCRegs:$cc) - 84
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(4)},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPFCCANT brtarget:$imm, { 0, 0, 1, 1 }, FCCRegs:$cc) - 88
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPFCCANT brtarget:$imm, { 0, 0, 1, 0 }, FCCRegs:$cc) - 92
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPFCCANT brtarget:$imm, { 0, 0, 0, 1 }, FCCRegs:$cc) - 96
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPFCCANT brtarget:$imm, { 1, 0, 0, 1 }, FCCRegs:$cc) - 100
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(9)},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPFCCANT brtarget:$imm, { 1, 0, 1, 0 }, FCCRegs:$cc) - 104
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(10)},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPFCCANT brtarget:$imm, { 1, 0, 1, 1 }, FCCRegs:$cc) - 108
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(11)},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPFCCANT brtarget:$imm, { 1, 1, 0, 0 }, FCCRegs:$cc) - 112
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(12)},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPFCCANT brtarget:$imm, { 1, 1, 0, 1 }, FCCRegs:$cc) - 116
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(13)},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPFCCANT brtarget:$imm, { 1, 1, 1, 0 }, FCCRegs:$cc) - 120
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(14)},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPFCCANT brtarget:$imm, { 1, 1, 1, 1 }, FCCRegs:$cc) - 124
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(15)},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPFCCNT brtarget:$imm, { 1, 0, 0, 0 }, FCCRegs:$cc) - 128
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(8)},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPFCCNT brtarget:$imm, { 0, 0, 0, 0 }, FCCRegs:$cc) - 132
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPFCCNT brtarget:$imm, { 0, 1, 1, 1 }, FCCRegs:$cc) - 136
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPFCCNT brtarget:$imm, { 0, 1, 1, 0 }, FCCRegs:$cc) - 140
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(6)},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPFCCNT brtarget:$imm, { 0, 1, 0, 1 }, FCCRegs:$cc) - 144
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(5)},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPFCCNT brtarget:$imm, { 0, 1, 0, 0 }, FCCRegs:$cc) - 148
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(4)},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPFCCNT brtarget:$imm, { 0, 0, 1, 1 }, FCCRegs:$cc) - 152
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPFCCNT brtarget:$imm, { 0, 0, 1, 0 }, FCCRegs:$cc) - 156
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPFCCNT brtarget:$imm, { 0, 0, 0, 1 }, FCCRegs:$cc) - 160
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPFCCNT brtarget:$imm, { 1, 0, 0, 1 }, FCCRegs:$cc) - 164
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(9)},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPFCCNT brtarget:$imm, { 1, 0, 1, 0 }, FCCRegs:$cc) - 168
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(10)},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPFCCNT brtarget:$imm, { 1, 0, 1, 1 }, FCCRegs:$cc) - 172
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(11)},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPFCCNT brtarget:$imm, { 1, 1, 0, 0 }, FCCRegs:$cc) - 176
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(12)},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPFCCNT brtarget:$imm, { 1, 1, 0, 1 }, FCCRegs:$cc) - 180
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(13)},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPFCCNT brtarget:$imm, { 1, 1, 1, 0 }, FCCRegs:$cc) - 184
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(14)},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPFCCNT brtarget:$imm, { 1, 1, 1, 1 }, FCCRegs:$cc) - 188
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(15)},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPICCANT brtarget:$imm, { 1, 0, 0, 0 }) - 192
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(8)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPICCANT brtarget:$imm, { 0, 0, 0, 0 }) - 195
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPICCANT brtarget:$imm, { 1, 0, 0, 1 }) - 198
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(9)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPICCANT brtarget:$imm, { 0, 0, 0, 1 }) - 201
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPICCANT brtarget:$imm, { 1, 0, 1, 0 }) - 204
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(10)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPICCANT brtarget:$imm, { 0, 0, 1, 0 }) - 207
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPICCANT brtarget:$imm, { 1, 0, 1, 1 }) - 210
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(11)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPICCANT brtarget:$imm, { 0, 0, 1, 1 }) - 213
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPICCANT brtarget:$imm, { 1, 1, 0, 0 }) - 216
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(12)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPICCANT brtarget:$imm, { 0, 1, 0, 0 }) - 219
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(4)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPICCANT brtarget:$imm, { 1, 1, 0, 1 }) - 222
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(13)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPICCANT brtarget:$imm, { 0, 1, 0, 1 }) - 225
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(5)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPICCANT brtarget:$imm, { 1, 1, 1, 0 }) - 228
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(14)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPICCANT brtarget:$imm, { 0, 1, 1, 0 }) - 231
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(6)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPICCANT brtarget:$imm, { 1, 1, 1, 1 }) - 234
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(15)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPICCANT brtarget:$imm, { 0, 1, 1, 1 }) - 237
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPICCNT brtarget:$imm, { 1, 0, 0, 0 }) - 240
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(8)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPICCNT brtarget:$imm, { 0, 0, 0, 0 }) - 243
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPICCNT brtarget:$imm, { 1, 0, 0, 1 }) - 246
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(9)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPICCNT brtarget:$imm, { 0, 0, 0, 1 }) - 249
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPICCNT brtarget:$imm, { 1, 0, 1, 0 }) - 252
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(10)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPICCNT brtarget:$imm, { 0, 0, 1, 0 }) - 255
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPICCNT brtarget:$imm, { 1, 0, 1, 1 }) - 258
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(11)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPICCNT brtarget:$imm, { 0, 0, 1, 1 }) - 261
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPICCNT brtarget:$imm, { 1, 1, 0, 0 }) - 264
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(12)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPICCNT brtarget:$imm, { 0, 1, 0, 0 }) - 267
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(4)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPICCNT brtarget:$imm, { 1, 1, 0, 1 }) - 270
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(13)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPICCNT brtarget:$imm, { 0, 1, 0, 1 }) - 273
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(5)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPICCNT brtarget:$imm, { 1, 1, 1, 0 }) - 276
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(14)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPICCNT brtarget:$imm, { 0, 1, 1, 0 }) - 279
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(6)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPICCNT brtarget:$imm, { 1, 1, 1, 1 }) - 282
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(15)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPICCNT brtarget:$imm, { 0, 1, 1, 1 }) - 285
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPXCCANT brtarget:$imm, { 1, 0, 0, 0 }) - 288
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(8)},
    // (BPXCCANT brtarget:$imm, { 0, 0, 0, 0 }) - 290
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (BPXCCANT brtarget:$imm, { 1, 0, 0, 1 }) - 292
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(9)},
    // (BPXCCANT brtarget:$imm, { 0, 0, 0, 1 }) - 294
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    // (BPXCCANT brtarget:$imm, { 1, 0, 1, 0 }) - 296
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(10)},
    // (BPXCCANT brtarget:$imm, { 0, 0, 1, 0 }) - 298
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    // (BPXCCANT brtarget:$imm, { 1, 0, 1, 1 }) - 300
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(11)},
    // (BPXCCANT brtarget:$imm, { 0, 0, 1, 1 }) - 302
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    // (BPXCCANT brtarget:$imm, { 1, 1, 0, 0 }) - 304
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(12)},
    // (BPXCCANT brtarget:$imm, { 0, 1, 0, 0 }) - 306
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(4)},
    // (BPXCCANT brtarget:$imm, { 1, 1, 0, 1 }) - 308
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(13)},
    // (BPXCCANT brtarget:$imm, { 0, 1, 0, 1 }) - 310
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(5)},
    // (BPXCCANT brtarget:$imm, { 1, 1, 1, 0 }) - 312
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(14)},
    // (BPXCCANT brtarget:$imm, { 0, 1, 1, 0 }) - 314
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(6)},
    // (BPXCCANT brtarget:$imm, { 1, 1, 1, 1 }) - 316
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(15)},
    // (BPXCCANT brtarget:$imm, { 0, 1, 1, 1 }) - 318
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    // (BPXCCNT brtarget:$imm, { 1, 0, 0, 0 }) - 320
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(8)},
    // (BPXCCNT brtarget:$imm, { 0, 0, 0, 0 }) - 322
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (BPXCCNT brtarget:$imm, { 1, 0, 0, 1 }) - 324
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(9)},
    // (BPXCCNT brtarget:$imm, { 0, 0, 0, 1 }) - 326
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    // (BPXCCNT brtarget:$imm, { 1, 0, 1, 0 }) - 328
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(10)},
    // (BPXCCNT brtarget:$imm, { 0, 0, 1, 0 }) - 330
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    // (BPXCCNT brtarget:$imm, { 1, 0, 1, 1 }) - 332
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(11)},
    // (BPXCCNT brtarget:$imm, { 0, 0, 1, 1 }) - 334
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    // (BPXCCNT brtarget:$imm, { 1, 1, 0, 0 }) - 336
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(12)},
    // (BPXCCNT brtarget:$imm, { 0, 1, 0, 0 }) - 338
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(4)},
    // (BPXCCNT brtarget:$imm, { 1, 1, 0, 1 }) - 340
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(13)},
    // (BPXCCNT brtarget:$imm, { 0, 1, 0, 1 }) - 342
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(5)},
    // (BPXCCNT brtarget:$imm, { 1, 1, 1, 0 }) - 344
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(14)},
    // (BPXCCNT brtarget:$imm, { 0, 1, 1, 0 }) - 346
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(6)},
    // (BPXCCNT brtarget:$imm, { 1, 1, 1, 1 }) - 348
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(15)},
    // (BPXCCNT brtarget:$imm, { 0, 1, 1, 1 }) - 350
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    // (FMOVD_ICC DFPRegs:$rd, DFPRegs:$rs2, { 1, 0, 0, 0 }) - 352
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(8)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVD_ICC DFPRegs:$rd, DFPRegs:$rs2, { 0, 0, 0, 0 }) - 357
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVD_ICC DFPRegs:$rd, DFPRegs:$rs2, { 1, 0, 0, 1 }) - 362
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(9)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVD_ICC DFPRegs:$rd, DFPRegs:$rs2, { 0, 0, 0, 1 }) - 367
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVD_ICC DFPRegs:$rd, DFPRegs:$rs2, { 1, 0, 1, 0 }) - 372
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(10)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVD_ICC DFPRegs:$rd, DFPRegs:$rs2, { 0, 0, 1, 0 }) - 377
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVD_ICC DFPRegs:$rd, DFPRegs:$rs2, { 1, 0, 1, 1 }) - 382
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(11)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVD_ICC DFPRegs:$rd, DFPRegs:$rs2, { 0, 0, 1, 1 }) - 387
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVD_ICC DFPRegs:$rd, DFPRegs:$rs2, { 1, 1, 0, 0 }) - 392
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(12)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVD_ICC DFPRegs:$rd, DFPRegs:$rs2, { 0, 1, 0, 0 }) - 397
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(4)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVD_ICC DFPRegs:$rd, DFPRegs:$rs2, { 1, 1, 0, 1 }) - 402
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(13)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVD_ICC DFPRegs:$rd, DFPRegs:$rs2, { 0, 1, 0, 1 }) - 407
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(5)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVD_ICC DFPRegs:$rd, DFPRegs:$rs2, { 1, 1, 1, 0 }) - 412
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(14)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVD_ICC DFPRegs:$rd, DFPRegs:$rs2, { 0, 1, 1, 0 }) - 417
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(6)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVD_ICC DFPRegs:$rd, DFPRegs:$rs2, { 1, 1, 1, 1 }) - 422
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(15)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVD_ICC DFPRegs:$rd, DFPRegs:$rs2, { 0, 1, 1, 1 }) - 427
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVD_XCC DFPRegs:$rd, DFPRegs:$rs2, { 1, 0, 0, 0 }) - 432
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(8)},
    // (FMOVD_XCC DFPRegs:$rd, DFPRegs:$rs2, { 0, 0, 0, 0 }) - 436
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (FMOVD_XCC DFPRegs:$rd, DFPRegs:$rs2, { 1, 0, 0, 1 }) - 440
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(9)},
    // (FMOVD_XCC DFPRegs:$rd, DFPRegs:$rs2, { 0, 0, 0, 1 }) - 444
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    // (FMOVD_XCC DFPRegs:$rd, DFPRegs:$rs2, { 1, 0, 1, 0 }) - 448
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(10)},
    // (FMOVD_XCC DFPRegs:$rd, DFPRegs:$rs2, { 0, 0, 1, 0 }) - 452
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    // (FMOVD_XCC DFPRegs:$rd, DFPRegs:$rs2, { 1, 0, 1, 1 }) - 456
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(11)},
    // (FMOVD_XCC DFPRegs:$rd, DFPRegs:$rs2, { 0, 0, 1, 1 }) - 460
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    // (FMOVD_XCC DFPRegs:$rd, DFPRegs:$rs2, { 1, 1, 0, 0 }) - 464
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(12)},
    // (FMOVD_XCC DFPRegs:$rd, DFPRegs:$rs2, { 0, 1, 0, 0 }) - 468
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(4)},
    // (FMOVD_XCC DFPRegs:$rd, DFPRegs:$rs2, { 1, 1, 0, 1 }) - 472
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(13)},
    // (FMOVD_XCC DFPRegs:$rd, DFPRegs:$rs2, { 0, 1, 0, 1 }) - 476
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(5)},
    // (FMOVD_XCC DFPRegs:$rd, DFPRegs:$rs2, { 1, 1, 1, 0 }) - 480
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(14)},
    // (FMOVD_XCC DFPRegs:$rd, DFPRegs:$rs2, { 0, 1, 1, 0 }) - 484
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(6)},
    // (FMOVD_XCC DFPRegs:$rd, DFPRegs:$rs2, { 1, 1, 1, 1 }) - 488
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(15)},
    // (FMOVD_XCC DFPRegs:$rd, DFPRegs:$rs2, { 0, 1, 1, 1 }) - 492
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    // (FMOVQ_ICC QFPRegs:$rd, QFPRegs:$rs2, { 1, 0, 0, 0 }) - 496
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(8)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVQ_ICC QFPRegs:$rd, QFPRegs:$rs2, { 0, 0, 0, 0 }) - 501
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVQ_ICC QFPRegs:$rd, QFPRegs:$rs2, { 1, 0, 0, 1 }) - 506
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(9)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVQ_ICC QFPRegs:$rd, QFPRegs:$rs2, { 0, 0, 0, 1 }) - 511
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVQ_ICC QFPRegs:$rd, QFPRegs:$rs2, { 1, 0, 1, 0 }) - 516
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(10)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVQ_ICC QFPRegs:$rd, QFPRegs:$rs2, { 0, 0, 1, 0 }) - 521
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVQ_ICC QFPRegs:$rd, QFPRegs:$rs2, { 1, 0, 1, 1 }) - 526
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(11)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVQ_ICC QFPRegs:$rd, QFPRegs:$rs2, { 0, 0, 1, 1 }) - 531
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVQ_ICC QFPRegs:$rd, QFPRegs:$rs2, { 1, 1, 0, 0 }) - 536
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(12)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVQ_ICC QFPRegs:$rd, QFPRegs:$rs2, { 0, 1, 0, 0 }) - 541
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(4)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVQ_ICC QFPRegs:$rd, QFPRegs:$rs2, { 1, 1, 0, 1 }) - 546
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(13)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVQ_ICC QFPRegs:$rd, QFPRegs:$rs2, { 0, 1, 0, 1 }) - 551
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(5)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVQ_ICC QFPRegs:$rd, QFPRegs:$rs2, { 1, 1, 1, 0 }) - 556
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(14)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVQ_ICC QFPRegs:$rd, QFPRegs:$rs2, { 0, 1, 1, 0 }) - 561
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(6)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVQ_ICC QFPRegs:$rd, QFPRegs:$rs2, { 1, 1, 1, 1 }) - 566
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(15)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVQ_ICC QFPRegs:$rd, QFPRegs:$rs2, { 0, 1, 1, 1 }) - 571
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVQ_XCC QFPRegs:$rd, QFPRegs:$rs2, { 1, 0, 0, 0 }) - 576
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(8)},
    // (FMOVQ_XCC QFPRegs:$rd, QFPRegs:$rs2, { 0, 0, 0, 0 }) - 580
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (FMOVQ_XCC QFPRegs:$rd, QFPRegs:$rs2, { 1, 0, 0, 1 }) - 584
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(9)},
    // (FMOVQ_XCC QFPRegs:$rd, QFPRegs:$rs2, { 0, 0, 0, 1 }) - 588
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    // (FMOVQ_XCC QFPRegs:$rd, QFPRegs:$rs2, { 1, 0, 1, 0 }) - 592
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(10)},
    // (FMOVQ_XCC QFPRegs:$rd, QFPRegs:$rs2, { 0, 0, 1, 0 }) - 596
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    // (FMOVQ_XCC QFPRegs:$rd, QFPRegs:$rs2, { 1, 0, 1, 1 }) - 600
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(11)},
    // (FMOVQ_XCC QFPRegs:$rd, QFPRegs:$rs2, { 0, 0, 1, 1 }) - 604
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    // (FMOVQ_XCC QFPRegs:$rd, QFPRegs:$rs2, { 1, 1, 0, 0 }) - 608
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(12)},
    // (FMOVQ_XCC QFPRegs:$rd, QFPRegs:$rs2, { 0, 1, 0, 0 }) - 612
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(4)},
    // (FMOVQ_XCC QFPRegs:$rd, QFPRegs:$rs2, { 1, 1, 0, 1 }) - 616
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(13)},
    // (FMOVQ_XCC QFPRegs:$rd, QFPRegs:$rs2, { 0, 1, 0, 1 }) - 620
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(5)},
    // (FMOVQ_XCC QFPRegs:$rd, QFPRegs:$rs2, { 1, 1, 1, 0 }) - 624
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(14)},
    // (FMOVQ_XCC QFPRegs:$rd, QFPRegs:$rs2, { 0, 1, 1, 0 }) - 628
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(6)},
    // (FMOVQ_XCC QFPRegs:$rd, QFPRegs:$rs2, { 1, 1, 1, 1 }) - 632
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(15)},
    // (FMOVQ_XCC QFPRegs:$rd, QFPRegs:$rs2, { 0, 1, 1, 1 }) - 636
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    // (FMOVS_ICC FPRegs:$rd, FPRegs:$rs2, { 1, 0, 0, 0 }) - 640
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(8)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVS_ICC FPRegs:$rd, FPRegs:$rs2, { 0, 0, 0, 0 }) - 645
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVS_ICC FPRegs:$rd, FPRegs:$rs2, { 1, 0, 0, 1 }) - 650
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(9)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVS_ICC FPRegs:$rd, FPRegs:$rs2, { 0, 0, 0, 1 }) - 655
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVS_ICC FPRegs:$rd, FPRegs:$rs2, { 1, 0, 1, 0 }) - 660
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(10)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVS_ICC FPRegs:$rd, FPRegs:$rs2, { 0, 0, 1, 0 }) - 665
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVS_ICC FPRegs:$rd, FPRegs:$rs2, { 1, 0, 1, 1 }) - 670
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(11)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVS_ICC FPRegs:$rd, FPRegs:$rs2, { 0, 0, 1, 1 }) - 675
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVS_ICC FPRegs:$rd, FPRegs:$rs2, { 1, 1, 0, 0 }) - 680
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(12)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVS_ICC FPRegs:$rd, FPRegs:$rs2, { 0, 1, 0, 0 }) - 685
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(4)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVS_ICC FPRegs:$rd, FPRegs:$rs2, { 1, 1, 0, 1 }) - 690
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(13)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVS_ICC FPRegs:$rd, FPRegs:$rs2, { 0, 1, 0, 1 }) - 695
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(5)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVS_ICC FPRegs:$rd, FPRegs:$rs2, { 1, 1, 1, 0 }) - 700
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(14)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVS_ICC FPRegs:$rd, FPRegs:$rs2, { 0, 1, 1, 0 }) - 705
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(6)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVS_ICC FPRegs:$rd, FPRegs:$rs2, { 1, 1, 1, 1 }) - 710
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(15)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVS_ICC FPRegs:$rd, FPRegs:$rs2, { 0, 1, 1, 1 }) - 715
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVS_XCC FPRegs:$rd, FPRegs:$rs2, { 1, 0, 0, 0 }) - 720
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(8)},
    // (FMOVS_XCC FPRegs:$rd, FPRegs:$rs2, { 0, 0, 0, 0 }) - 724
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (FMOVS_XCC FPRegs:$rd, FPRegs:$rs2, { 1, 0, 0, 1 }) - 728
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(9)},
    // (FMOVS_XCC FPRegs:$rd, FPRegs:$rs2, { 0, 0, 0, 1 }) - 732
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    // (FMOVS_XCC FPRegs:$rd, FPRegs:$rs2, { 1, 0, 1, 0 }) - 736
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(10)},
    // (FMOVS_XCC FPRegs:$rd, FPRegs:$rs2, { 0, 0, 1, 0 }) - 740
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    // (FMOVS_XCC FPRegs:$rd, FPRegs:$rs2, { 1, 0, 1, 1 }) - 744
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(11)},
    // (FMOVS_XCC FPRegs:$rd, FPRegs:$rs2, { 0, 0, 1, 1 }) - 748
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    // (FMOVS_XCC FPRegs:$rd, FPRegs:$rs2, { 1, 1, 0, 0 }) - 752
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(12)},
    // (FMOVS_XCC FPRegs:$rd, FPRegs:$rs2, { 0, 1, 0, 0 }) - 756
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(4)},
    // (FMOVS_XCC FPRegs:$rd, FPRegs:$rs2, { 1, 1, 0, 1 }) - 760
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(13)},
    // (FMOVS_XCC FPRegs:$rd, FPRegs:$rs2, { 0, 1, 0, 1 }) - 764
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(5)},
    // (FMOVS_XCC FPRegs:$rd, FPRegs:$rs2, { 1, 1, 1, 0 }) - 768
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(14)},
    // (FMOVS_XCC FPRegs:$rd, FPRegs:$rs2, { 0, 1, 1, 0 }) - 772
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(6)},
    // (FMOVS_XCC FPRegs:$rd, FPRegs:$rs2, { 1, 1, 1, 1 }) - 776
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(15)},
    // (FMOVS_XCC FPRegs:$rd, FPRegs:$rs2, { 0, 1, 1, 1 }) - 780
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    // (MOVICCri IntRegs:$rd, i32imm:$simm11, { 1, 0, 0, 0 }) - 784
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(8)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (MOVICCri IntRegs:$rd, i32imm:$simm11, { 0, 0, 0, 0 }) - 789
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (MOVICCri IntRegs:$rd, i32imm:$simm11, { 1, 0, 0, 1 }) - 794
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(9)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (MOVICCri IntRegs:$rd, i32imm:$simm11, { 0, 0, 0, 1 }) - 799
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (MOVICCri IntRegs:$rd, i32imm:$simm11, { 1, 0, 1, 0 }) - 804
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(10)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (MOVICCri IntRegs:$rd, i32imm:$simm11, { 0, 0, 1, 0 }) - 809
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (MOVICCri IntRegs:$rd, i32imm:$simm11, { 1, 0, 1, 1 }) - 814
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(11)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (MOVICCri IntRegs:$rd, i32imm:$simm11, { 0, 0, 1, 1 }) - 819
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (MOVICCri IntRegs:$rd, i32imm:$simm11, { 1, 1, 0, 0 }) - 824
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(12)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (MOVICCri IntRegs:$rd, i32imm:$simm11, { 0, 1, 0, 0 }) - 829
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(4)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (MOVICCri IntRegs:$rd, i32imm:$simm11, { 1, 1, 0, 1 }) - 834
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(13)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (MOVICCri IntRegs:$rd, i32imm:$simm11, { 0, 1, 0, 1 }) - 839
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(5)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (MOVICCri IntRegs:$rd, i32imm:$simm11, { 1, 1, 1, 0 }) - 844
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(14)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (MOVICCri IntRegs:$rd, i32imm:$simm11, { 0, 1, 1, 0 }) - 849
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(6)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (MOVICCri IntRegs:$rd, i32imm:$simm11, { 1, 1, 1, 1 }) - 854
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(15)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (MOVICCri IntRegs:$rd, i32imm:$simm11, { 0, 1, 1, 1 }) - 859
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (MOVICCrr IntRegs:$rd, IntRegs:$rs2, { 1, 0, 0, 0 }) - 864
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(8)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (MOVICCrr IntRegs:$rd, IntRegs:$rs2, { 0, 0, 0, 0 }) - 869
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (MOVICCrr IntRegs:$rd, IntRegs:$rs2, { 1, 0, 0, 1 }) - 874
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(9)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (MOVICCrr IntRegs:$rd, IntRegs:$rs2, { 0, 0, 0, 1 }) - 879
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (MOVICCrr IntRegs:$rd, IntRegs:$rs2, { 1, 0, 1, 0 }) - 884
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(10)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (MOVICCrr IntRegs:$rd, IntRegs:$rs2, { 0, 0, 1, 0 }) - 889
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (MOVICCrr IntRegs:$rd, IntRegs:$rs2, { 1, 0, 1, 1 }) - 894
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(11)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (MOVICCrr IntRegs:$rd, IntRegs:$rs2, { 0, 0, 1, 1 }) - 899
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (MOVICCrr IntRegs:$rd, IntRegs:$rs2, { 1, 1, 0, 0 }) - 904
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(12)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (MOVICCrr IntRegs:$rd, IntRegs:$rs2, { 0, 1, 0, 0 }) - 909
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(4)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (MOVICCrr IntRegs:$rd, IntRegs:$rs2, { 1, 1, 0, 1 }) - 914
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(13)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (MOVICCrr IntRegs:$rd, IntRegs:$rs2, { 0, 1, 0, 1 }) - 919
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(5)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (MOVICCrr IntRegs:$rd, IntRegs:$rs2, { 1, 1, 1, 0 }) - 924
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(14)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (MOVICCrr IntRegs:$rd, IntRegs:$rs2, { 0, 1, 1, 0 }) - 929
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(6)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (MOVICCrr IntRegs:$rd, IntRegs:$rs2, { 1, 1, 1, 1 }) - 934
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(15)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (MOVICCrr IntRegs:$rd, IntRegs:$rs2, { 0, 1, 1, 1 }) - 939
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (MOVXCCri IntRegs:$rd, i32imm:$simm11, { 1, 0, 0, 0 }) - 944
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(8)},
    // (MOVXCCri IntRegs:$rd, i32imm:$simm11, { 0, 0, 0, 0 }) - 948
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (MOVXCCri IntRegs:$rd, i32imm:$simm11, { 1, 0, 0, 1 }) - 952
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(9)},
    // (MOVXCCri IntRegs:$rd, i32imm:$simm11, { 0, 0, 0, 1 }) - 956
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    // (MOVXCCri IntRegs:$rd, i32imm:$simm11, { 1, 0, 1, 0 }) - 960
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(10)},
    // (MOVXCCri IntRegs:$rd, i32imm:$simm11, { 0, 0, 1, 0 }) - 964
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    // (MOVXCCri IntRegs:$rd, i32imm:$simm11, { 1, 0, 1, 1 }) - 968
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(11)},
    // (MOVXCCri IntRegs:$rd, i32imm:$simm11, { 0, 0, 1, 1 }) - 972
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    // (MOVXCCri IntRegs:$rd, i32imm:$simm11, { 1, 1, 0, 0 }) - 976
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(12)},
    // (MOVXCCri IntRegs:$rd, i32imm:$simm11, { 0, 1, 0, 0 }) - 980
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(4)},
    // (MOVXCCri IntRegs:$rd, i32imm:$simm11, { 1, 1, 0, 1 }) - 984
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(13)},
    // (MOVXCCri IntRegs:$rd, i32imm:$simm11, { 0, 1, 0, 1 }) - 988
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(5)},
    // (MOVXCCri IntRegs:$rd, i32imm:$simm11, { 1, 1, 1, 0 }) - 992
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(14)},
    // (MOVXCCri IntRegs:$rd, i32imm:$simm11, { 0, 1, 1, 0 }) - 996
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(6)},
    // (MOVXCCri IntRegs:$rd, i32imm:$simm11, { 1, 1, 1, 1 }) - 1000
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(15)},
    // (MOVXCCri IntRegs:$rd, i32imm:$simm11, { 0, 1, 1, 1 }) - 1004
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    // (MOVXCCrr IntRegs:$rd, IntRegs:$rs2, { 1, 0, 0, 0 }) - 1008
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(8)},
    // (MOVXCCrr IntRegs:$rd, IntRegs:$rs2, { 0, 0, 0, 0 }) - 1012
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (MOVXCCrr IntRegs:$rd, IntRegs:$rs2, { 1, 0, 0, 1 }) - 1016
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(9)},
    // (MOVXCCrr IntRegs:$rd, IntRegs:$rs2, { 0, 0, 0, 1 }) - 1020
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    // (MOVXCCrr IntRegs:$rd, IntRegs:$rs2, { 1, 0, 1, 0 }) - 1024
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(10)},
    // (MOVXCCrr IntRegs:$rd, IntRegs:$rs2, { 0, 0, 1, 0 }) - 1028
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    // (MOVXCCrr IntRegs:$rd, IntRegs:$rs2, { 1, 0, 1, 1 }) - 1032
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(11)},
    // (MOVXCCrr IntRegs:$rd, IntRegs:$rs2, { 0, 0, 1, 1 }) - 1036
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    // (MOVXCCrr IntRegs:$rd, IntRegs:$rs2, { 1, 1, 0, 0 }) - 1040
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(12)},
    // (MOVXCCrr IntRegs:$rd, IntRegs:$rs2, { 0, 1, 0, 0 }) - 1044
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(4)},
    // (MOVXCCrr IntRegs:$rd, IntRegs:$rs2, { 1, 1, 0, 1 }) - 1048
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(13)},
    // (MOVXCCrr IntRegs:$rd, IntRegs:$rs2, { 0, 1, 0, 1 }) - 1052
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(5)},
    // (MOVXCCrr IntRegs:$rd, IntRegs:$rs2, { 1, 1, 1, 0 }) - 1056
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(14)},
    // (MOVXCCrr IntRegs:$rd, IntRegs:$rs2, { 0, 1, 1, 0 }) - 1060
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(6)},
    // (MOVXCCrr IntRegs:$rd, IntRegs:$rs2, { 1, 1, 1, 1 }) - 1064
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(15)},
    // (MOVXCCrr IntRegs:$rd, IntRegs:$rs2, { 0, 1, 1, 1 }) - 1068
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    // (ORCCrr G0, IntRegs:$rs2, G0) - 1072
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Reg, Sparc::G0},
    // (ORri IntRegs:$rd, G0, i32imm:$simm13) - 1075
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Reg, Sparc::G0},
    // (ORrr IntRegs:$rd, G0, IntRegs:$rs2) - 1077
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    // (RESTORErr G0, G0, G0) - 1080
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Reg, Sparc::G0},
    // (RET 8) - 1083
    {AliasPatternCond::K_Imm, uint32_t(8)},
    // (RETL 8) - 1084
    {AliasPatternCond::K_Imm, uint32_t(8)},
    // (SAVErr G0, G0, G0) - 1085
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Reg, Sparc::G0},
    // (TICCri G0, i32imm:$imm, { 1, 0, 0, 0 }) - 1088
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(8)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCri IntRegs:$rs1, i32imm:$imm, { 1, 0, 0, 0 }) - 1092
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(8)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCri G0, i32imm:$imm, { 0, 0, 0, 0 }) - 1096
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCri IntRegs:$rs1, i32imm:$imm, { 0, 0, 0, 0 }) - 1100
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCri G0, i32imm:$imm, { 1, 0, 0, 1 }) - 1104
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(9)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCri IntRegs:$rs1, i32imm:$imm, { 1, 0, 0, 1 }) - 1108
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(9)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCri G0, i32imm:$imm, { 0, 0, 0, 1 }) - 1112
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCri IntRegs:$rs1, i32imm:$imm, { 0, 0, 0, 1 }) - 1116
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCri G0, i32imm:$imm, { 1, 0, 1, 0 }) - 1120
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(10)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCri IntRegs:$rs1, i32imm:$imm, { 1, 0, 1, 0 }) - 1124
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(10)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCri G0, i32imm:$imm, { 0, 0, 1, 0 }) - 1128
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCri IntRegs:$rs1, i32imm:$imm, { 0, 0, 1, 0 }) - 1132
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCri G0, i32imm:$imm, { 1, 0, 1, 1 }) - 1136
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(11)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCri IntRegs:$rs1, i32imm:$imm, { 1, 0, 1, 1 }) - 1140
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(11)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCri G0, i32imm:$imm, { 0, 0, 1, 1 }) - 1144
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCri IntRegs:$rs1, i32imm:$imm, { 0, 0, 1, 1 }) - 1148
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCri G0, i32imm:$imm, { 1, 1, 0, 0 }) - 1152
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(12)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCri IntRegs:$rs1, i32imm:$imm, { 1, 1, 0, 0 }) - 1156
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(12)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCri G0, i32imm:$imm, { 0, 1, 0, 0 }) - 1160
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(4)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCri IntRegs:$rs1, i32imm:$imm, { 0, 1, 0, 0 }) - 1164
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(4)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCri G0, i32imm:$imm, { 1, 1, 0, 1 }) - 1168
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(13)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCri IntRegs:$rs1, i32imm:$imm, { 1, 1, 0, 1 }) - 1172
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(13)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCri G0, i32imm:$imm, { 0, 1, 0, 1 }) - 1176
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(5)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCri IntRegs:$rs1, i32imm:$imm, { 0, 1, 0, 1 }) - 1180
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(5)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCri G0, i32imm:$imm, { 1, 1, 1, 0 }) - 1184
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(14)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCri IntRegs:$rs1, i32imm:$imm, { 1, 1, 1, 0 }) - 1188
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(14)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCri G0, i32imm:$imm, { 0, 1, 1, 0 }) - 1192
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(6)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCri IntRegs:$rs1, i32imm:$imm, { 0, 1, 1, 0 }) - 1196
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(6)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCri G0, i32imm:$imm, { 1, 1, 1, 1 }) - 1200
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(15)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCri IntRegs:$rs1, i32imm:$imm, { 1, 1, 1, 1 }) - 1204
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(15)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCri G0, i32imm:$imm, { 0, 1, 1, 1 }) - 1208
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCri IntRegs:$rs1, i32imm:$imm, { 0, 1, 1, 1 }) - 1212
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCrr G0, IntRegs:$rs2, { 1, 0, 0, 0 }) - 1216
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(8)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCrr IntRegs:$rs1, IntRegs:$rs2, { 1, 0, 0, 0 }) - 1220
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(8)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCrr G0, IntRegs:$rs2, { 0, 0, 0, 0 }) - 1224
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCrr IntRegs:$rs1, IntRegs:$rs2, { 0, 0, 0, 0 }) - 1228
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCrr G0, IntRegs:$rs2, { 1, 0, 0, 1 }) - 1232
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(9)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCrr IntRegs:$rs1, IntRegs:$rs2, { 1, 0, 0, 1 }) - 1236
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(9)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCrr G0, IntRegs:$rs2, { 0, 0, 0, 1 }) - 1240
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCrr IntRegs:$rs1, IntRegs:$rs2, { 0, 0, 0, 1 }) - 1244
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCrr G0, IntRegs:$rs2, { 1, 0, 1, 0 }) - 1248
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(10)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCrr IntRegs:$rs1, IntRegs:$rs2, { 1, 0, 1, 0 }) - 1252
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(10)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCrr G0, IntRegs:$rs2, { 0, 0, 1, 0 }) - 1256
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCrr IntRegs:$rs1, IntRegs:$rs2, { 0, 0, 1, 0 }) - 1260
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCrr G0, IntRegs:$rs2, { 1, 0, 1, 1 }) - 1264
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(11)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCrr IntRegs:$rs1, IntRegs:$rs2, { 1, 0, 1, 1 }) - 1268
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(11)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCrr G0, IntRegs:$rs2, { 0, 0, 1, 1 }) - 1272
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCrr IntRegs:$rs1, IntRegs:$rs2, { 0, 0, 1, 1 }) - 1276
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCrr G0, IntRegs:$rs2, { 1, 1, 0, 0 }) - 1280
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(12)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCrr IntRegs:$rs1, IntRegs:$rs2, { 1, 1, 0, 0 }) - 1284
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(12)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCrr G0, IntRegs:$rs2, { 0, 1, 0, 0 }) - 1288
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(4)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCrr IntRegs:$rs1, IntRegs:$rs2, { 0, 1, 0, 0 }) - 1292
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(4)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCrr G0, IntRegs:$rs2, { 1, 1, 0, 1 }) - 1296
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(13)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCrr IntRegs:$rs1, IntRegs:$rs2, { 1, 1, 0, 1 }) - 1300
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(13)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCrr G0, IntRegs:$rs2, { 0, 1, 0, 1 }) - 1304
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(5)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCrr IntRegs:$rs1, IntRegs:$rs2, { 0, 1, 0, 1 }) - 1308
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(5)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCrr G0, IntRegs:$rs2, { 1, 1, 1, 0 }) - 1312
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(14)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCrr IntRegs:$rs1, IntRegs:$rs2, { 1, 1, 1, 0 }) - 1316
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(14)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCrr G0, IntRegs:$rs2, { 0, 1, 1, 0 }) - 1320
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(6)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCrr IntRegs:$rs1, IntRegs:$rs2, { 0, 1, 1, 0 }) - 1324
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(6)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCrr G0, IntRegs:$rs2, { 1, 1, 1, 1 }) - 1328
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(15)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCrr IntRegs:$rs1, IntRegs:$rs2, { 1, 1, 1, 1 }) - 1332
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(15)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCrr G0, IntRegs:$rs2, { 0, 1, 1, 1 }) - 1336
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCrr IntRegs:$rs1, IntRegs:$rs2, { 0, 1, 1, 1 }) - 1340
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TRAPri G0, i32imm:$imm, { 1, 0, 0, 0 }) - 1344
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(8)},
    // (TRAPri IntRegs:$rs1, i32imm:$imm, { 1, 0, 0, 0 }) - 1347
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(8)},
    // (TRAPri G0, i32imm:$imm, { 0, 0, 0, 0 }) - 1350
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (TRAPri IntRegs:$rs1, i32imm:$imm, { 0, 0, 0, 0 }) - 1353
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (TRAPri G0, i32imm:$imm, { 1, 0, 0, 1 }) - 1356
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(9)},
    // (TRAPri IntRegs:$rs1, i32imm:$imm, { 1, 0, 0, 1 }) - 1359
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(9)},
    // (TRAPri G0, i32imm:$imm, { 0, 0, 0, 1 }) - 1362
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    // (TRAPri IntRegs:$rs1, i32imm:$imm, { 0, 0, 0, 1 }) - 1365
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    // (TRAPri G0, i32imm:$imm, { 1, 0, 1, 0 }) - 1368
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(10)},
    // (TRAPri IntRegs:$rs1, i32imm:$imm, { 1, 0, 1, 0 }) - 1371
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(10)},
    // (TRAPri G0, i32imm:$imm, { 0, 0, 1, 0 }) - 1374
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    // (TRAPri IntRegs:$rs1, i32imm:$imm, { 0, 0, 1, 0 }) - 1377
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    // (TRAPri G0, i32imm:$imm, { 1, 0, 1, 1 }) - 1380
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(11)},
    // (TRAPri IntRegs:$rs1, i32imm:$imm, { 1, 0, 1, 1 }) - 1383
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(11)},
    // (TRAPri G0, i32imm:$imm, { 0, 0, 1, 1 }) - 1386
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    // (TRAPri IntRegs:$rs1, i32imm:$imm, { 0, 0, 1, 1 }) - 1389
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    // (TRAPri G0, i32imm:$imm, { 1, 1, 0, 0 }) - 1392
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(12)},
    // (TRAPri IntRegs:$rs1, i32imm:$imm, { 1, 1, 0, 0 }) - 1395
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(12)},
    // (TRAPri G0, i32imm:$imm, { 0, 1, 0, 0 }) - 1398
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(4)},
    // (TRAPri IntRegs:$rs1, i32imm:$imm, { 0, 1, 0, 0 }) - 1401
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(4)},
    // (TRAPri G0, i32imm:$imm, { 1, 1, 0, 1 }) - 1404
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(13)},
    // (TRAPri IntRegs:$rs1, i32imm:$imm, { 1, 1, 0, 1 }) - 1407
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(13)},
    // (TRAPri G0, i32imm:$imm, { 0, 1, 0, 1 }) - 1410
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(5)},
    // (TRAPri IntRegs:$rs1, i32imm:$imm, { 0, 1, 0, 1 }) - 1413
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(5)},
    // (TRAPri G0, i32imm:$imm, { 1, 1, 1, 0 }) - 1416
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(14)},
    // (TRAPri IntRegs:$rs1, i32imm:$imm, { 1, 1, 1, 0 }) - 1419
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(14)},
    // (TRAPri G0, i32imm:$imm, { 0, 1, 1, 0 }) - 1422
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(6)},
    // (TRAPri IntRegs:$rs1, i32imm:$imm, { 0, 1, 1, 0 }) - 1425
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(6)},
    // (TRAPri G0, i32imm:$imm, { 1, 1, 1, 1 }) - 1428
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(15)},
    // (TRAPri IntRegs:$rs1, i32imm:$imm, { 1, 1, 1, 1 }) - 1431
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(15)},
    // (TRAPri G0, i32imm:$imm, { 0, 1, 1, 1 }) - 1434
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    // (TRAPri IntRegs:$rs1, i32imm:$imm, { 0, 1, 1, 1 }) - 1437
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    // (TRAPrr G0, IntRegs:$rs1, { 1, 0, 0, 0 }) - 1440
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(8)},
    // (TRAPrr IntRegs:$rs1, IntRegs:$rs2, { 1, 0, 0, 0 }) - 1443
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(8)},
    // (TRAPrr G0, IntRegs:$rs1, { 0, 0, 0, 0 }) - 1446
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (TRAPrr IntRegs:$rs1, IntRegs:$rs2, { 0, 0, 0, 0 }) - 1449
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (TRAPrr G0, IntRegs:$rs1, { 1, 0, 0, 1 }) - 1452
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(9)},
    // (TRAPrr IntRegs:$rs1, IntRegs:$rs2, { 1, 0, 0, 1 }) - 1455
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(9)},
    // (TRAPrr G0, IntRegs:$rs1, { 0, 0, 0, 1 }) - 1458
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    // (TRAPrr IntRegs:$rs1, IntRegs:$rs2, { 0, 0, 0, 1 }) - 1461
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    // (TRAPrr G0, IntRegs:$rs1, { 1, 0, 1, 0 }) - 1464
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(10)},
    // (TRAPrr IntRegs:$rs1, IntRegs:$rs2, { 1, 0, 1, 0 }) - 1467
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(10)},
    // (TRAPrr G0, IntRegs:$rs1, { 0, 0, 1, 0 }) - 1470
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    // (TRAPrr IntRegs:$rs1, IntRegs:$rs2, { 0, 0, 1, 0 }) - 1473
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    // (TRAPrr G0, IntRegs:$rs1, { 1, 0, 1, 1 }) - 1476
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(11)},
    // (TRAPrr IntRegs:$rs1, IntRegs:$rs2, { 1, 0, 1, 1 }) - 1479
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(11)},
    // (TRAPrr G0, IntRegs:$rs1, { 0, 0, 1, 1 }) - 1482
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    // (TRAPrr IntRegs:$rs1, IntRegs:$rs2, { 0, 0, 1, 1 }) - 1485
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    // (TRAPrr G0, IntRegs:$rs1, { 1, 1, 0, 0 }) - 1488
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(12)},
    // (TRAPrr IntRegs:$rs1, IntRegs:$rs2, { 1, 1, 0, 0 }) - 1491
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(12)},
    // (TRAPrr G0, IntRegs:$rs1, { 0, 1, 0, 0 }) - 1494
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(4)},
    // (TRAPrr IntRegs:$rs1, IntRegs:$rs2, { 0, 1, 0, 0 }) - 1497
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(4)},
    // (TRAPrr G0, IntRegs:$rs1, { 1, 1, 0, 1 }) - 1500
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(13)},
    // (TRAPrr IntRegs:$rs1, IntRegs:$rs2, { 1, 1, 0, 1 }) - 1503
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(13)},
    // (TRAPrr G0, IntRegs:$rs1, { 0, 1, 0, 1 }) - 1506
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(5)},
    // (TRAPrr IntRegs:$rs1, IntRegs:$rs2, { 0, 1, 0, 1 }) - 1509
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(5)},
    // (TRAPrr G0, IntRegs:$rs1, { 1, 1, 1, 0 }) - 1512
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(14)},
    // (TRAPrr IntRegs:$rs1, IntRegs:$rs2, { 1, 1, 1, 0 }) - 1515
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(14)},
    // (TRAPrr G0, IntRegs:$rs1, { 0, 1, 1, 0 }) - 1518
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(6)},
    // (TRAPrr IntRegs:$rs1, IntRegs:$rs2, { 0, 1, 1, 0 }) - 1521
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(6)},
    // (TRAPrr G0, IntRegs:$rs1, { 1, 1, 1, 1 }) - 1524
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(15)},
    // (TRAPrr IntRegs:$rs1, IntRegs:$rs2, { 1, 1, 1, 1 }) - 1527
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(15)},
    // (TRAPrr G0, IntRegs:$rs1, { 0, 1, 1, 1 }) - 1530
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    // (TRAPrr IntRegs:$rs1, IntRegs:$rs2, { 0, 1, 1, 1 }) - 1533
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    // (TXCCri G0, i32imm:$imm, { 1, 0, 0, 0 }) - 1536
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(8)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCri IntRegs:$rs1, i32imm:$imm, { 1, 0, 0, 0 }) - 1540
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(8)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCri G0, i32imm:$imm, { 0, 0, 0, 0 }) - 1544
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCri IntRegs:$rs1, i32imm:$imm, { 0, 0, 0, 0 }) - 1548
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCri G0, i32imm:$imm, { 1, 0, 0, 1 }) - 1552
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(9)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCri IntRegs:$rs1, i32imm:$imm, { 1, 0, 0, 1 }) - 1556
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(9)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCri G0, i32imm:$imm, { 0, 0, 0, 1 }) - 1560
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCri IntRegs:$rs1, i32imm:$imm, { 0, 0, 0, 1 }) - 1564
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCri G0, i32imm:$imm, { 1, 0, 1, 0 }) - 1568
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(10)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCri IntRegs:$rs1, i32imm:$imm, { 1, 0, 1, 0 }) - 1572
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(10)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCri G0, i32imm:$imm, { 0, 0, 1, 0 }) - 1576
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCri IntRegs:$rs1, i32imm:$imm, { 0, 0, 1, 0 }) - 1580
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCri G0, i32imm:$imm, { 1, 0, 1, 1 }) - 1584
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(11)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCri IntRegs:$rs1, i32imm:$imm, { 1, 0, 1, 1 }) - 1588
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(11)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCri G0, i32imm:$imm, { 0, 0, 1, 1 }) - 1592
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCri IntRegs:$rs1, i32imm:$imm, { 0, 0, 1, 1 }) - 1596
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCri G0, i32imm:$imm, { 1, 1, 0, 0 }) - 1600
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(12)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCri IntRegs:$rs1, i32imm:$imm, { 1, 1, 0, 0 }) - 1604
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(12)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCri G0, i32imm:$imm, { 0, 1, 0, 0 }) - 1608
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(4)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCri IntRegs:$rs1, i32imm:$imm, { 0, 1, 0, 0 }) - 1612
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(4)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCri G0, i32imm:$imm, { 1, 1, 0, 1 }) - 1616
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(13)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCri IntRegs:$rs1, i32imm:$imm, { 1, 1, 0, 1 }) - 1620
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(13)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCri G0, i32imm:$imm, { 0, 1, 0, 1 }) - 1624
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(5)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCri IntRegs:$rs1, i32imm:$imm, { 0, 1, 0, 1 }) - 1628
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(5)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCri G0, i32imm:$imm, { 1, 1, 1, 0 }) - 1632
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(14)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCri IntRegs:$rs1, i32imm:$imm, { 1, 1, 1, 0 }) - 1636
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(14)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCri G0, i32imm:$imm, { 0, 1, 1, 0 }) - 1640
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(6)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCri IntRegs:$rs1, i32imm:$imm, { 0, 1, 1, 0 }) - 1644
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(6)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCri G0, i32imm:$imm, { 1, 1, 1, 1 }) - 1648
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(15)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCri IntRegs:$rs1, i32imm:$imm, { 1, 1, 1, 1 }) - 1652
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(15)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCri G0, i32imm:$imm, { 0, 1, 1, 1 }) - 1656
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCri IntRegs:$rs1, i32imm:$imm, { 0, 1, 1, 1 }) - 1660
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCrr G0, IntRegs:$rs2, { 1, 0, 0, 0 }) - 1664
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(8)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCrr IntRegs:$rs1, IntRegs:$rs2, { 1, 0, 0, 0 }) - 1668
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(8)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCrr G0, IntRegs:$rs2, { 0, 0, 0, 0 }) - 1672
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCrr IntRegs:$rs1, IntRegs:$rs2, { 0, 0, 0, 0 }) - 1676
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCrr G0, IntRegs:$rs2, { 1, 0, 0, 1 }) - 1680
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(9)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCrr IntRegs:$rs1, IntRegs:$rs2, { 1, 0, 0, 1 }) - 1684
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(9)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCrr G0, IntRegs:$rs2, { 0, 0, 0, 1 }) - 1688
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCrr IntRegs:$rs1, IntRegs:$rs2, { 0, 0, 0, 1 }) - 1692
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCrr G0, IntRegs:$rs2, { 1, 0, 1, 0 }) - 1696
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(10)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCrr IntRegs:$rs1, IntRegs:$rs2, { 1, 0, 1, 0 }) - 1700
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(10)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCrr G0, IntRegs:$rs2, { 0, 0, 1, 0 }) - 1704
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCrr IntRegs:$rs1, IntRegs:$rs2, { 0, 0, 1, 0 }) - 1708
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCrr G0, IntRegs:$rs2, { 1, 0, 1, 1 }) - 1712
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(11)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCrr IntRegs:$rs1, IntRegs:$rs2, { 1, 0, 1, 1 }) - 1716
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(11)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCrr G0, IntRegs:$rs2, { 0, 0, 1, 1 }) - 1720
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCrr IntRegs:$rs1, IntRegs:$rs2, { 0, 0, 1, 1 }) - 1724
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCrr G0, IntRegs:$rs2, { 1, 1, 0, 0 }) - 1728
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(12)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCrr IntRegs:$rs1, IntRegs:$rs2, { 1, 1, 0, 0 }) - 1732
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(12)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCrr G0, IntRegs:$rs2, { 0, 1, 0, 0 }) - 1736
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(4)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCrr IntRegs:$rs1, IntRegs:$rs2, { 0, 1, 0, 0 }) - 1740
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(4)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCrr G0, IntRegs:$rs2, { 1, 1, 0, 1 }) - 1744
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(13)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCrr IntRegs:$rs1, IntRegs:$rs2, { 1, 1, 0, 1 }) - 1748
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(13)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCrr G0, IntRegs:$rs2, { 0, 1, 0, 1 }) - 1752
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(5)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCrr IntRegs:$rs1, IntRegs:$rs2, { 0, 1, 0, 1 }) - 1756
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(5)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCrr G0, IntRegs:$rs2, { 1, 1, 1, 0 }) - 1760
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(14)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCrr IntRegs:$rs1, IntRegs:$rs2, { 1, 1, 1, 0 }) - 1764
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(14)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCrr G0, IntRegs:$rs2, { 0, 1, 1, 0 }) - 1768
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(6)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCrr IntRegs:$rs1, IntRegs:$rs2, { 0, 1, 1, 0 }) - 1772
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(6)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCrr G0, IntRegs:$rs2, { 1, 1, 1, 1 }) - 1776
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(15)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCrr IntRegs:$rs1, IntRegs:$rs2, { 1, 1, 1, 1 }) - 1780
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(15)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCrr G0, IntRegs:$rs2, { 0, 1, 1, 1 }) - 1784
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCrr IntRegs:$rs1, IntRegs:$rs2, { 0, 1, 1, 1 }) - 1788
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FCMPD FCC0, DFPRegs:$rs1, DFPRegs:$rs2) - 1792
    {AliasPatternCond::K_Reg, Sparc::FCC0},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    // (V9FCMPED FCC0, DFPRegs:$rs1, DFPRegs:$rs2) - 1795
    {AliasPatternCond::K_Reg, Sparc::FCC0},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    // (V9FCMPEQ FCC0, QFPRegs:$rs1, QFPRegs:$rs2) - 1798
    {AliasPatternCond::K_Reg, Sparc::FCC0},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    // (V9FCMPES FCC0, FPRegs:$rs1, FPRegs:$rs2) - 1801
    {AliasPatternCond::K_Reg, Sparc::FCC0},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    // (V9FCMPQ FCC0, QFPRegs:$rs1, QFPRegs:$rs2) - 1804
    {AliasPatternCond::K_Reg, Sparc::FCC0},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    // (V9FCMPS FCC0, FPRegs:$rs1, FPRegs:$rs2) - 1807
    {AliasPatternCond::K_Reg, Sparc::FCC0},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    // (V9FMOVD_FCC DFPRegs:$rd, FCCRegs:$cc, DFPRegs:$rs2, { 1, 0, 0, 0 }) - 1810
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(8)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVD_FCC DFPRegs:$rd, FCCRegs:$cc, DFPRegs:$rs2, { 0, 0, 0, 0 }) - 1816
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVD_FCC DFPRegs:$rd, FCCRegs:$cc, DFPRegs:$rs2, { 0, 1, 1, 1 }) - 1822
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVD_FCC DFPRegs:$rd, FCCRegs:$cc, DFPRegs:$rs2, { 0, 1, 1, 0 }) - 1828
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(6)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVD_FCC DFPRegs:$rd, FCCRegs:$cc, DFPRegs:$rs2, { 0, 1, 0, 1 }) - 1834
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(5)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVD_FCC DFPRegs:$rd, FCCRegs:$cc, DFPRegs:$rs2, { 0, 1, 0, 0 }) - 1840
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(4)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVD_FCC DFPRegs:$rd, FCCRegs:$cc, DFPRegs:$rs2, { 0, 0, 1, 1 }) - 1846
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVD_FCC DFPRegs:$rd, FCCRegs:$cc, DFPRegs:$rs2, { 0, 0, 1, 0 }) - 1852
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVD_FCC DFPRegs:$rd, FCCRegs:$cc, DFPRegs:$rs2, { 0, 0, 0, 1 }) - 1858
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVD_FCC DFPRegs:$rd, FCCRegs:$cc, DFPRegs:$rs2, { 1, 0, 0, 1 }) - 1864
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(9)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVD_FCC DFPRegs:$rd, FCCRegs:$cc, DFPRegs:$rs2, { 1, 0, 1, 0 }) - 1870
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(10)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVD_FCC DFPRegs:$rd, FCCRegs:$cc, DFPRegs:$rs2, { 1, 0, 1, 1 }) - 1876
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(11)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVD_FCC DFPRegs:$rd, FCCRegs:$cc, DFPRegs:$rs2, { 1, 1, 0, 0 }) - 1882
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(12)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVD_FCC DFPRegs:$rd, FCCRegs:$cc, DFPRegs:$rs2, { 1, 1, 0, 1 }) - 1888
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(13)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVD_FCC DFPRegs:$rd, FCCRegs:$cc, DFPRegs:$rs2, { 1, 1, 1, 0 }) - 1894
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(14)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVD_FCC DFPRegs:$rd, FCCRegs:$cc, DFPRegs:$rs2, { 1, 1, 1, 1 }) - 1900
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(15)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVQ_FCC QFPRegs:$rd, FCCRegs:$cc, QFPRegs:$rs2, { 1, 0, 0, 0 }) - 1906
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(8)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVQ_FCC QFPRegs:$rd, FCCRegs:$cc, QFPRegs:$rs2, { 0, 0, 0, 0 }) - 1912
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVQ_FCC QFPRegs:$rd, FCCRegs:$cc, QFPRegs:$rs2, { 0, 1, 1, 1 }) - 1918
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVQ_FCC QFPRegs:$rd, FCCRegs:$cc, QFPRegs:$rs2, { 0, 1, 1, 0 }) - 1924
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(6)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVQ_FCC QFPRegs:$rd, FCCRegs:$cc, QFPRegs:$rs2, { 0, 1, 0, 1 }) - 1930
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(5)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVQ_FCC QFPRegs:$rd, FCCRegs:$cc, QFPRegs:$rs2, { 0, 1, 0, 0 }) - 1936
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(4)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVQ_FCC QFPRegs:$rd, FCCRegs:$cc, QFPRegs:$rs2, { 0, 0, 1, 1 }) - 1942
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVQ_FCC QFPRegs:$rd, FCCRegs:$cc, QFPRegs:$rs2, { 0, 0, 1, 0 }) - 1948
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVQ_FCC QFPRegs:$rd, FCCRegs:$cc, QFPRegs:$rs2, { 0, 0, 0, 1 }) - 1954
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVQ_FCC QFPRegs:$rd, FCCRegs:$cc, QFPRegs:$rs2, { 1, 0, 0, 1 }) - 1960
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(9)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVQ_FCC QFPRegs:$rd, FCCRegs:$cc, QFPRegs:$rs2, { 1, 0, 1, 0 }) - 1966
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(10)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVQ_FCC QFPRegs:$rd, FCCRegs:$cc, QFPRegs:$rs2, { 1, 0, 1, 1 }) - 1972
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(11)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVQ_FCC QFPRegs:$rd, FCCRegs:$cc, QFPRegs:$rs2, { 1, 1, 0, 0 }) - 1978
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(12)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVQ_FCC QFPRegs:$rd, FCCRegs:$cc, QFPRegs:$rs2, { 1, 1, 0, 1 }) - 1984
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(13)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVQ_FCC QFPRegs:$rd, FCCRegs:$cc, QFPRegs:$rs2, { 1, 1, 1, 0 }) - 1990
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(14)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVQ_FCC QFPRegs:$rd, FCCRegs:$cc, QFPRegs:$rs2, { 1, 1, 1, 1 }) - 1996
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(15)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVS_FCC FPRegs:$rd, FCCRegs:$cc, FPRegs:$rs2, { 1, 0, 0, 0 }) - 2002
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(8)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVS_FCC FPRegs:$rd, FCCRegs:$cc, FPRegs:$rs2, { 0, 0, 0, 0 }) - 2008
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVS_FCC FPRegs:$rd, FCCRegs:$cc, FPRegs:$rs2, { 0, 1, 1, 1 }) - 2014
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVS_FCC FPRegs:$rd, FCCRegs:$cc, FPRegs:$rs2, { 0, 1, 1, 0 }) - 2020
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(6)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVS_FCC FPRegs:$rd, FCCRegs:$cc, FPRegs:$rs2, { 0, 1, 0, 1 }) - 2026
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(5)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVS_FCC FPRegs:$rd, FCCRegs:$cc, FPRegs:$rs2, { 0, 1, 0, 0 }) - 2032
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(4)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVS_FCC FPRegs:$rd, FCCRegs:$cc, FPRegs:$rs2, { 0, 0, 1, 1 }) - 2038
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVS_FCC FPRegs:$rd, FCCRegs:$cc, FPRegs:$rs2, { 0, 0, 1, 0 }) - 2044
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVS_FCC FPRegs:$rd, FCCRegs:$cc, FPRegs:$rs2, { 0, 0, 0, 1 }) - 2050
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVS_FCC FPRegs:$rd, FCCRegs:$cc, FPRegs:$rs2, { 1, 0, 0, 1 }) - 2056
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(9)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVS_FCC FPRegs:$rd, FCCRegs:$cc, FPRegs:$rs2, { 1, 0, 1, 0 }) - 2062
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(10)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVS_FCC FPRegs:$rd, FCCRegs:$cc, FPRegs:$rs2, { 1, 0, 1, 1 }) - 2068
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(11)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVS_FCC FPRegs:$rd, FCCRegs:$cc, FPRegs:$rs2, { 1, 1, 0, 0 }) - 2074
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(12)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVS_FCC FPRegs:$rd, FCCRegs:$cc, FPRegs:$rs2, { 1, 1, 0, 1 }) - 2080
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(13)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVS_FCC FPRegs:$rd, FCCRegs:$cc, FPRegs:$rs2, { 1, 1, 1, 0 }) - 2086
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(14)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVS_FCC FPRegs:$rd, FCCRegs:$cc, FPRegs:$rs2, { 1, 1, 1, 1 }) - 2092
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(15)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9MOVFCCri IntRegs:$rd, FCCRegs:$cc, i32imm:$simm11, { 1, 0, 0, 0 }) - 2098
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(8)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9MOVFCCri IntRegs:$rd, FCCRegs:$cc, i32imm:$simm11, { 0, 0, 0, 0 }) - 2104
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9MOVFCCri IntRegs:$rd, FCCRegs:$cc, i32imm:$simm11, { 0, 1, 1, 1 }) - 2110
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9MOVFCCri IntRegs:$rd, FCCRegs:$cc, i32imm:$simm11, { 0, 1, 1, 0 }) - 2116
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(6)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9MOVFCCri IntRegs:$rd, FCCRegs:$cc, i32imm:$simm11, { 0, 1, 0, 1 }) - 2122
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(5)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9MOVFCCri IntRegs:$rd, FCCRegs:$cc, i32imm:$simm11, { 0, 1, 0, 0 }) - 2128
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(4)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9MOVFCCri IntRegs:$rd, FCCRegs:$cc, i32imm:$simm11, { 0, 0, 1, 1 }) - 2134
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9MOVFCCri IntRegs:$rd, FCCRegs:$cc, i32imm:$simm11, { 0, 0, 1, 0 }) - 2140
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9MOVFCCri IntRegs:$rd, FCCRegs:$cc, i32imm:$simm11, { 0, 0, 0, 1 }) - 2146
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9MOVFCCri IntRegs:$rd, FCCRegs:$cc, i32imm:$simm11, { 1, 0, 0, 1 }) - 2152
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(9)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9MOVFCCri IntRegs:$rd, FCCRegs:$cc, i32imm:$simm11, { 1, 0, 1, 0 }) - 2158
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(10)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9MOVFCCri IntRegs:$rd, FCCRegs:$cc, i32imm:$simm11, { 1, 0, 1, 1 }) - 2164
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(11)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9MOVFCCri IntRegs:$rd, FCCRegs:$cc, i32imm:$simm11, { 1, 1, 0, 0 }) - 2170
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(12)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9MOVFCCri IntRegs:$rd, FCCRegs:$cc, i32imm:$simm11, { 1, 1, 0, 1 }) - 2176
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(13)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9MOVFCCri IntRegs:$rd, FCCRegs:$cc, i32imm:$simm11, { 1, 1, 1, 0 }) - 2182
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(14)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9MOVFCCri IntRegs:$rd, FCCRegs:$cc, i32imm:$simm11, { 1, 1, 1, 1 }) - 2188
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(15)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9MOVFCCrr IntRegs:$rd, FCCRegs:$cc, IntRegs:$rs2, { 1, 0, 0, 0 }) - 2194
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(8)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9MOVFCCrr IntRegs:$rd, FCCRegs:$cc, IntRegs:$rs2, { 0, 0, 0, 0 }) - 2200
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9MOVFCCrr IntRegs:$rd, FCCRegs:$cc, IntRegs:$rs2, { 0, 1, 1, 1 }) - 2206
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9MOVFCCrr IntRegs:$rd, FCCRegs:$cc, IntRegs:$rs2, { 0, 1, 1, 0 }) - 2212
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(6)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9MOVFCCrr IntRegs:$rd, FCCRegs:$cc, IntRegs:$rs2, { 0, 1, 0, 1 }) - 2218
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(5)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9MOVFCCrr IntRegs:$rd, FCCRegs:$cc, IntRegs:$rs2, { 0, 1, 0, 0 }) - 2224
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(4)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9MOVFCCrr IntRegs:$rd, FCCRegs:$cc, IntRegs:$rs2, { 0, 0, 1, 1 }) - 2230
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9MOVFCCrr IntRegs:$rd, FCCRegs:$cc, IntRegs:$rs2, { 0, 0, 1, 0 }) - 2236
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9MOVFCCrr IntRegs:$rd, FCCRegs:$cc, IntRegs:$rs2, { 0, 0, 0, 1 }) - 2242
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9MOVFCCrr IntRegs:$rd, FCCRegs:$cc, IntRegs:$rs2, { 1, 0, 0, 1 }) - 2248
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(9)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9MOVFCCrr IntRegs:$rd, FCCRegs:$cc, IntRegs:$rs2, { 1, 0, 1, 0 }) - 2254
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(10)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9MOVFCCrr IntRegs:$rd, FCCRegs:$cc, IntRegs:$rs2, { 1, 0, 1, 1 }) - 2260
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(11)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9MOVFCCrr IntRegs:$rd, FCCRegs:$cc, IntRegs:$rs2, { 1, 1, 0, 0 }) - 2266
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(12)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9MOVFCCrr IntRegs:$rd, FCCRegs:$cc, IntRegs:$rs2, { 1, 1, 0, 1 }) - 2272
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(13)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9MOVFCCrr IntRegs:$rd, FCCRegs:$cc, IntRegs:$rs2, { 1, 1, 1, 0 }) - 2278
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(14)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9MOVFCCrr IntRegs:$rd, FCCRegs:$cc, IntRegs:$rs2, { 1, 1, 1, 1 }) - 2284
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(15)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
  };

  static const char AsmStrings[] =
    /* 0 */ "ba $\x01\0"
    /* 6 */ "bn $\x01\0"
    /* 12 */ "bne $\x01\0"
    /* 19 */ "be $\x01\0"
    /* 25 */ "bg $\x01\0"
    /* 31 */ "ble $\x01\0"
    /* 38 */ "bge $\x01\0"
    /* 45 */ "bl $\x01\0"
    /* 51 */ "bgu $\x01\0"
    /* 58 */ "bleu $\x01\0"
    /* 66 */ "bcc $\x01\0"
    /* 73 */ "bcs $\x01\0"
    /* 80 */ "bpos $\x01\0"
    /* 88 */ "bneg $\x01\0"
    /* 96 */ "bvc $\x01\0"
    /* 103 */ "bvs $\x01\0"
    /* 110 */ "ba,a $\x01\0"
    /* 118 */ "bn,a $\x01\0"
    /* 126 */ "bne,a $\x01\0"
    /* 135 */ "be,a $\x01\0"
    /* 143 */ "bg,a $\x01\0"
    /* 151 */ "ble,a $\x01\0"
    /* 160 */ "bge,a $\x01\0"
    /* 169 */ "bl,a $\x01\0"
    /* 177 */ "bgu,a $\x01\0"
    /* 186 */ "bleu,a $\x01\0"
    /* 196 */ "bcc,a $\x01\0"
    /* 205 */ "bcs,a $\x01\0"
    /* 214 */ "bpos,a $\x01\0"
    /* 224 */ "bneg,a $\x01\0"
    /* 234 */ "bvc,a $\x01\0"
    /* 243 */ "bvs,a $\x01\0"
    /* 252 */ "fba,a,pn $\x03, $\x01\0"
    /* 268 */ "fbn,a,pn $\x03, $\x01\0"
    /* 284 */ "fbu,a,pn $\x03, $\x01\0"
    /* 300 */ "fbg,a,pn $\x03, $\x01\0"
    /* 316 */ "fbug,a,pn $\x03, $\x01\0"
    /* 333 */ "fbl,a,pn $\x03, $\x01\0"
    /* 349 */ "fbul,a,pn $\x03, $\x01\0"
    /* 366 */ "fblg,a,pn $\x03, $\x01\0"
    /* 383 */ "fbne,a,pn $\x03, $\x01\0"
    /* 400 */ "fbe,a,pn $\x03, $\x01\0"
    /* 416 */ "fbue,a,pn $\x03, $\x01\0"
    /* 433 */ "fbge,a,pn $\x03, $\x01\0"
    /* 450 */ "fbuge,a,pn $\x03, $\x01\0"
    /* 468 */ "fble,a,pn $\x03, $\x01\0"
    /* 485 */ "fbule,a,pn $\x03, $\x01\0"
    /* 503 */ "fbo,a,pn $\x03, $\x01\0"
    /* 519 */ "fba,pn $\x03, $\x01\0"
    /* 533 */ "fbn,pn $\x03, $\x01\0"
    /* 547 */ "fbu,pn $\x03, $\x01\0"
    /* 561 */ "fbg,pn $\x03, $\x01\0"
    /* 575 */ "fbug,pn $\x03, $\x01\0"
    /* 590 */ "fbl,pn $\x03, $\x01\0"
    /* 604 */ "fbul,pn $\x03, $\x01\0"
    /* 619 */ "fblg,pn $\x03, $\x01\0"
    /* 634 */ "fbne,pn $\x03, $\x01\0"
    /* 649 */ "fbe,pn $\x03, $\x01\0"
    /* 663 */ "fbue,pn $\x03, $\x01\0"
    /* 678 */ "fbge,pn $\x03, $\x01\0"
    /* 693 */ "fbuge,pn $\x03, $\x01\0"
    /* 709 */ "fble,pn $\x03, $\x01\0"
    /* 724 */ "fbule,pn $\x03, $\x01\0"
    /* 740 */ "fbo,pn $\x03, $\x01\0"
    /* 754 */ "ba,a,pn %icc, $\x01\0"
    /* 771 */ "bn,a,pn %icc, $\x01\0"
    /* 788 */ "bne,a,pn %icc, $\x01\0"
    /* 806 */ "be,a,pn %icc, $\x01\0"
    /* 823 */ "bg,a,pn %icc, $\x01\0"
    /* 840 */ "ble,a,pn %icc, $\x01\0"
    /* 858 */ "bge,a,pn %icc, $\x01\0"
    /* 876 */ "bl,a,pn %icc, $\x01\0"
    /* 893 */ "bgu,a,pn %icc, $\x01\0"
    /* 911 */ "bleu,a,pn %icc, $\x01\0"
    /* 930 */ "bcc,a,pn %icc, $\x01\0"
    /* 948 */ "bcs,a,pn %icc, $\x01\0"
    /* 966 */ "bpos,a,pn %icc, $\x01\0"
    /* 985 */ "bneg,a,pn %icc, $\x01\0"
    /* 1004 */ "bvc,a,pn %icc, $\x01\0"
    /* 1022 */ "bvs,a,pn %icc, $\x01\0"
    /* 1040 */ "ba,pn %icc, $\x01\0"
    /* 1055 */ "bn,pn %icc, $\x01\0"
    /* 1070 */ "bne,pn %icc, $\x01\0"
    /* 1086 */ "be,pn %icc, $\x01\0"
    /* 1101 */ "bg,pn %icc, $\x01\0"
    /* 1116 */ "ble,pn %icc, $\x01\0"
    /* 1132 */ "bge,pn %icc, $\x01\0"
    /* 1148 */ "bl,pn %icc, $\x01\0"
    /* 1163 */ "bgu,pn %icc, $\x01\0"
    /* 1179 */ "bleu,pn %icc, $\x01\0"
    /* 1196 */ "bcc,pn %icc, $\x01\0"
    /* 1212 */ "bcs,pn %icc, $\x01\0"
    /* 1228 */ "bpos,pn %icc, $\x01\0"
    /* 1245 */ "bneg,pn %icc, $\x01\0"
    /* 1262 */ "bvc,pn %icc, $\x01\0"
    /* 1278 */ "bvs,pn %icc, $\x01\0"
    /* 1294 */ "ba,a,pn %xcc, $\x01\0"
    /* 1311 */ "bn,a,pn %xcc, $\x01\0"
    /* 1328 */ "bne,a,pn %xcc, $\x01\0"
    /* 1346 */ "be,a,pn %xcc, $\x01\0"
    /* 1363 */ "bg,a,pn %xcc, $\x01\0"
    /* 1380 */ "ble,a,pn %xcc, $\x01\0"
    /* 1398 */ "bge,a,pn %xcc, $\x01\0"
    /* 1416 */ "bl,a,pn %xcc, $\x01\0"
    /* 1433 */ "bgu,a,pn %xcc, $\x01\0"
    /* 1451 */ "bleu,a,pn %xcc, $\x01\0"
    /* 1470 */ "bcc,a,pn %xcc, $\x01\0"
    /* 1488 */ "bcs,a,pn %xcc, $\x01\0"
    /* 1506 */ "bpos,a,pn %xcc, $\x01\0"
    /* 1525 */ "bneg,a,pn %xcc, $\x01\0"
    /* 1544 */ "bvc,a,pn %xcc, $\x01\0"
    /* 1562 */ "bvs,a,pn %xcc, $\x01\0"
    /* 1580 */ "ba,pn %xcc, $\x01\0"
    /* 1595 */ "bn,pn %xcc, $\x01\0"
    /* 1610 */ "bne,pn %xcc, $\x01\0"
    /* 1626 */ "be,pn %xcc, $\x01\0"
    /* 1641 */ "bg,pn %xcc, $\x01\0"
    /* 1656 */ "ble,pn %xcc, $\x01\0"
    /* 1672 */ "bge,pn %xcc, $\x01\0"
    /* 1688 */ "bl,pn %xcc, $\x01\0"
    /* 1703 */ "bgu,pn %xcc, $\x01\0"
    /* 1719 */ "bleu,pn %xcc, $\x01\0"
    /* 1736 */ "bcc,pn %xcc, $\x01\0"
    /* 1752 */ "bcs,pn %xcc, $\x01\0"
    /* 1768 */ "bpos,pn %xcc, $\x01\0"
    /* 1785 */ "bneg,pn %xcc, $\x01\0"
    /* 1802 */ "bvc,pn %xcc, $\x01\0"
    /* 1818 */ "bvs,pn %xcc, $\x01\0"
    /* 1834 */ "fmovda %icc, $\x02, $\x01\0"
    /* 1854 */ "fmovdn %icc, $\x02, $\x01\0"
    /* 1874 */ "fmovdne %icc, $\x02, $\x01\0"
    /* 1895 */ "fmovde %icc, $\x02, $\x01\0"
    /* 1915 */ "fmovdg %icc, $\x02, $\x01\0"
    /* 1935 */ "fmovdle %icc, $\x02, $\x01\0"
    /* 1956 */ "fmovdge %icc, $\x02, $\x01\0"
    /* 1977 */ "fmovdl %icc, $\x02, $\x01\0"
    /* 1997 */ "fmovdgu %icc, $\x02, $\x01\0"
    /* 2018 */ "fmovdleu %icc, $\x02, $\x01\0"
    /* 2040 */ "fmovdcc %icc, $\x02, $\x01\0"
    /* 2061 */ "fmovdcs %icc, $\x02, $\x01\0"
    /* 2082 */ "fmovdpos %icc, $\x02, $\x01\0"
    /* 2104 */ "fmovdneg %icc, $\x02, $\x01\0"
    /* 2126 */ "fmovdvc %icc, $\x02, $\x01\0"
    /* 2147 */ "fmovdvs %icc, $\x02, $\x01\0"
    /* 2168 */ "fmovda %xcc, $\x02, $\x01\0"
    /* 2188 */ "fmovdn %xcc, $\x02, $\x01\0"
    /* 2208 */ "fmovdne %xcc, $\x02, $\x01\0"
    /* 2229 */ "fmovde %xcc, $\x02, $\x01\0"
    /* 2249 */ "fmovdg %xcc, $\x02, $\x01\0"
    /* 2269 */ "fmovdle %xcc, $\x02, $\x01\0"
    /* 2290 */ "fmovdge %xcc, $\x02, $\x01\0"
    /* 2311 */ "fmovdl %xcc, $\x02, $\x01\0"
    /* 2331 */ "fmovdgu %xcc, $\x02, $\x01\0"
    /* 2352 */ "fmovdleu %xcc, $\x02, $\x01\0"
    /* 2374 */ "fmovdcc %xcc, $\x02, $\x01\0"
    /* 2395 */ "fmovdcs %xcc, $\x02, $\x01\0"
    /* 2416 */ "fmovdpos %xcc, $\x02, $\x01\0"
    /* 2438 */ "fmovdneg %xcc, $\x02, $\x01\0"
    /* 2460 */ "fmovdvc %xcc, $\x02, $\x01\0"
    /* 2481 */ "fmovdvs %xcc, $\x02, $\x01\0"
    /* 2502 */ "fmovqa %icc, $\x02, $\x01\0"
    /* 2522 */ "fmovqn %icc, $\x02, $\x01\0"
    /* 2542 */ "fmovqne %icc, $\x02, $\x01\0"
    /* 2563 */ "fmovqe %icc, $\x02, $\x01\0"
    /* 2583 */ "fmovqg %icc, $\x02, $\x01\0"
    /* 2603 */ "fmovqle %icc, $\x02, $\x01\0"
    /* 2624 */ "fmovqge %icc, $\x02, $\x01\0"
    /* 2645 */ "fmovql %icc, $\x02, $\x01\0"
    /* 2665 */ "fmovqgu %icc, $\x02, $\x01\0"
    /* 2686 */ "fmovqleu %icc, $\x02, $\x01\0"
    /* 2708 */ "fmovqcc %icc, $\x02, $\x01\0"
    /* 2729 */ "fmovqcs %icc, $\x02, $\x01\0"
    /* 2750 */ "fmovqpos %icc, $\x02, $\x01\0"
    /* 2772 */ "fmovqneg %icc, $\x02, $\x01\0"
    /* 2794 */ "fmovqvc %icc, $\x02, $\x01\0"
    /* 2815 */ "fmovqvs %icc, $\x02, $\x01\0"
    /* 2836 */ "fmovqa %xcc, $\x02, $\x01\0"
    /* 2856 */ "fmovqn %xcc, $\x02, $\x01\0"
    /* 2876 */ "fmovqne %xcc, $\x02, $\x01\0"
    /* 2897 */ "fmovqe %xcc, $\x02, $\x01\0"
    /* 2917 */ "fmovqg %xcc, $\x02, $\x01\0"
    /* 2937 */ "fmovqle %xcc, $\x02, $\x01\0"
    /* 2958 */ "fmovqge %xcc, $\x02, $\x01\0"
    /* 2979 */ "fmovql %xcc, $\x02, $\x01\0"
    /* 2999 */ "fmovqgu %xcc, $\x02, $\x01\0"
    /* 3020 */ "fmovqleu %xcc, $\x02, $\x01\0"
    /* 3042 */ "fmovqcc %xcc, $\x02, $\x01\0"
    /* 3063 */ "fmovqcs %xcc, $\x02, $\x01\0"
    /* 3084 */ "fmovqpos %xcc, $\x02, $\x01\0"
    /* 3106 */ "fmovqneg %xcc, $\x02, $\x01\0"
    /* 3128 */ "fmovqvc %xcc, $\x02, $\x01\0"
    /* 3149 */ "fmovqvs %xcc, $\x02, $\x01\0"
    /* 3170 */ "fmovsa %icc, $\x02, $\x01\0"
    /* 3190 */ "fmovsn %icc, $\x02, $\x01\0"
    /* 3210 */ "fmovsne %icc, $\x02, $\x01\0"
    /* 3231 */ "fmovse %icc, $\x02, $\x01\0"
    /* 3251 */ "fmovsg %icc, $\x02, $\x01\0"
    /* 3271 */ "fmovsle %icc, $\x02, $\x01\0"
    /* 3292 */ "fmovsge %icc, $\x02, $\x01\0"
    /* 3313 */ "fmovsl %icc, $\x02, $\x01\0"
    /* 3333 */ "fmovsgu %icc, $\x02, $\x01\0"
    /* 3354 */ "fmovsleu %icc, $\x02, $\x01\0"
    /* 3376 */ "fmovscc %icc, $\x02, $\x01\0"
    /* 3397 */ "fmovscs %icc, $\x02, $\x01\0"
    /* 3418 */ "fmovspos %icc, $\x02, $\x01\0"
    /* 3440 */ "fmovsneg %icc, $\x02, $\x01\0"
    /* 3462 */ "fmovsvc %icc, $\x02, $\x01\0"
    /* 3483 */ "fmovsvs %icc, $\x02, $\x01\0"
    /* 3504 */ "fmovsa %xcc, $\x02, $\x01\0"
    /* 3524 */ "fmovsn %xcc, $\x02, $\x01\0"
    /* 3544 */ "fmovsne %xcc, $\x02, $\x01\0"
    /* 3565 */ "fmovse %xcc, $\x02, $\x01\0"
    /* 3585 */ "fmovsg %xcc, $\x02, $\x01\0"
    /* 3605 */ "fmovsle %xcc, $\x02, $\x01\0"
    /* 3626 */ "fmovsge %xcc, $\x02, $\x01\0"
    /* 3647 */ "fmovsl %xcc, $\x02, $\x01\0"
    /* 3667 */ "fmovsgu %xcc, $\x02, $\x01\0"
    /* 3688 */ "fmovsleu %xcc, $\x02, $\x01\0"
    /* 3710 */ "fmovscc %xcc, $\x02, $\x01\0"
    /* 3731 */ "fmovscs %xcc, $\x02, $\x01\0"
    /* 3752 */ "fmovspos %xcc, $\x02, $\x01\0"
    /* 3774 */ "fmovsneg %xcc, $\x02, $\x01\0"
    /* 3796 */ "fmovsvc %xcc, $\x02, $\x01\0"
    /* 3817 */ "fmovsvs %xcc, $\x02, $\x01\0"
    /* 3838 */ "mova %icc, $\x02, $\x01\0"
    /* 3856 */ "movn %icc, $\x02, $\x01\0"
    /* 3874 */ "movne %icc, $\x02, $\x01\0"
    /* 3893 */ "move %icc, $\x02, $\x01\0"
    /* 3911 */ "movg %icc, $\x02, $\x01\0"
    /* 3929 */ "movle %icc, $\x02, $\x01\0"
    /* 3948 */ "movge %icc, $\x02, $\x01\0"
    /* 3967 */ "movl %icc, $\x02, $\x01\0"
    /* 3985 */ "movgu %icc, $\x02, $\x01\0"
    /* 4004 */ "movleu %icc, $\x02, $\x01\0"
    /* 4024 */ "movcc %icc, $\x02, $\x01\0"
    /* 4043 */ "movcs %icc, $\x02, $\x01\0"
    /* 4062 */ "movpos %icc, $\x02, $\x01\0"
    /* 4082 */ "movneg %icc, $\x02, $\x01\0"
    /* 4102 */ "movvc %icc, $\x02, $\x01\0"
    /* 4121 */ "movvs %icc, $\x02, $\x01\0"
    /* 4140 */ "mova %xcc, $\x02, $\x01\0"
    /* 4158 */ "movn %xcc, $\x02, $\x01\0"
    /* 4176 */ "movne %xcc, $\x02, $\x01\0"
    /* 4195 */ "move %xcc, $\x02, $\x01\0"
    /* 4213 */ "movg %xcc, $\x02, $\x01\0"
    /* 4231 */ "movle %xcc, $\x02, $\x01\0"
    /* 4250 */ "movge %xcc, $\x02, $\x01\0"
    /* 4269 */ "movl %xcc, $\x02, $\x01\0"
    /* 4287 */ "movgu %xcc, $\x02, $\x01\0"
    /* 4306 */ "movleu %xcc, $\x02, $\x01\0"
    /* 4326 */ "movcc %xcc, $\x02, $\x01\0"
    /* 4345 */ "movcs %xcc, $\x02, $\x01\0"
    /* 4364 */ "movpos %xcc, $\x02, $\x01\0"
    /* 4384 */ "movneg %xcc, $\x02, $\x01\0"
    /* 4404 */ "movvc %xcc, $\x02, $\x01\0"
    /* 4423 */ "movvs %xcc, $\x02, $\x01\0"
    /* 4442 */ "tst $\x02\0"
    /* 4449 */ "mov $\x03, $\x01\0"
    /* 4460 */ "restore\0"
    /* 4468 */ "ret\0"
    /* 4472 */ "retl\0"
    /* 4477 */ "save\0"
    /* 4482 */ "ta %icc, $\x02\0"
    /* 4494 */ "ta %icc, $\x01 + $\x02\0"
    /* 4511 */ "tn %icc, $\x02\0"
    /* 4523 */ "tn %icc, $\x01 + $\x02\0"
    /* 4540 */ "tne %icc, $\x02\0"
    /* 4553 */ "tne %icc, $\x01 + $\x02\0"
    /* 4571 */ "te %icc, $\x02\0"
    /* 4583 */ "te %icc, $\x01 + $\x02\0"
    /* 4600 */ "tg %icc, $\x02\0"
    /* 4612 */ "tg %icc, $\x01 + $\x02\0"
    /* 4629 */ "tle %icc, $\x02\0"
    /* 4642 */ "tle %icc, $\x01 + $\x02\0"
    /* 4660 */ "tge %icc, $\x02\0"
    /* 4673 */ "tge %icc, $\x01 + $\x02\0"
    /* 4691 */ "tl %icc, $\x02\0"
    /* 4703 */ "tl %icc, $\x01 + $\x02\0"
    /* 4720 */ "tgu %icc, $\x02\0"
    /* 4733 */ "tgu %icc, $\x01 + $\x02\0"
    /* 4751 */ "tleu %icc, $\x02\0"
    /* 4765 */ "tleu %icc, $\x01 + $\x02\0"
    /* 4784 */ "tcc %icc, $\x02\0"
    /* 4797 */ "tcc %icc, $\x01 + $\x02\0"
    /* 4815 */ "tcs %icc, $\x02\0"
    /* 4828 */ "tcs %icc, $\x01 + $\x02\0"
    /* 4846 */ "tpos %icc, $\x02\0"
    /* 4860 */ "tpos %icc, $\x01 + $\x02\0"
    /* 4879 */ "tneg %icc, $\x02\0"
    /* 4893 */ "tneg %icc, $\x01 + $\x02\0"
    /* 4912 */ "tvc %icc, $\x02\0"
    /* 4925 */ "tvc %icc, $\x01 + $\x02\0"
    /* 4943 */ "tvs %icc, $\x02\0"
    /* 4956 */ "tvs %icc, $\x01 + $\x02\0"
    /* 4974 */ "ta $\x02\0"
    /* 4980 */ "ta $\x01 + $\x02\0"
    /* 4991 */ "tn $\x02\0"
    /* 4997 */ "tn $\x01 + $\x02\0"
    /* 5008 */ "tne $\x02\0"
    /* 5015 */ "tne $\x01 + $\x02\0"
    /* 5027 */ "te $\x02\0"
    /* 5033 */ "te $\x01 + $\x02\0"
    /* 5044 */ "tg $\x02\0"
    /* 5050 */ "tg $\x01 + $\x02\0"
    /* 5061 */ "tle $\x02\0"
    /* 5068 */ "tle $\x01 + $\x02\0"
    /* 5080 */ "tge $\x02\0"
    /* 5087 */ "tge $\x01 + $\x02\0"
    /* 5099 */ "tl $\x02\0"
    /* 5105 */ "tl $\x01 + $\x02\0"
    /* 5116 */ "tgu $\x02\0"
    /* 5123 */ "tgu $\x01 + $\x02\0"
    /* 5135 */ "tleu $\x02\0"
    /* 5143 */ "tleu $\x01 + $\x02\0"
    /* 5156 */ "tcc $\x02\0"
    /* 5163 */ "tcc $\x01 + $\x02\0"
    /* 5175 */ "tcs $\x02\0"
    /* 5182 */ "tcs $\x01 + $\x02\0"
    /* 5194 */ "tpos $\x02\0"
    /* 5202 */ "tpos $\x01 + $\x02\0"
    /* 5215 */ "tneg $\x02\0"
    /* 5223 */ "tneg $\x01 + $\x02\0"
    /* 5236 */ "tvc $\x02\0"
    /* 5243 */ "tvc $\x01 + $\x02\0"
    /* 5255 */ "tvs $\x02\0"
    /* 5262 */ "tvs $\x01 + $\x02\0"
    /* 5274 */ "ta %xcc, $\x02\0"
    /* 5286 */ "ta %xcc, $\x01 + $\x02\0"
    /* 5303 */ "tn %xcc, $\x02\0"
    /* 5315 */ "tn %xcc, $\x01 + $\x02\0"
    /* 5332 */ "tne %xcc, $\x02\0"
    /* 5345 */ "tne %xcc, $\x01 + $\x02\0"
    /* 5363 */ "te %xcc, $\x02\0"
    /* 5375 */ "te %xcc, $\x01 + $\x02\0"
    /* 5392 */ "tg %xcc, $\x02\0"
    /* 5404 */ "tg %xcc, $\x01 + $\x02\0"
    /* 5421 */ "tle %xcc, $\x02\0"
    /* 5434 */ "tle %xcc, $\x01 + $\x02\0"
    /* 5452 */ "tge %xcc, $\x02\0"
    /* 5465 */ "tge %xcc, $\x01 + $\x02\0"
    /* 5483 */ "tl %xcc, $\x02\0"
    /* 5495 */ "tl %xcc, $\x01 + $\x02\0"
    /* 5512 */ "tgu %xcc, $\x02\0"
    /* 5525 */ "tgu %xcc, $\x01 + $\x02\0"
    /* 5543 */ "tleu %xcc, $\x02\0"
    /* 5557 */ "tleu %xcc, $\x01 + $\x02\0"
    /* 5576 */ "tcc %xcc, $\x02\0"
    /* 5589 */ "tcc %xcc, $\x01 + $\x02\0"
    /* 5607 */ "tcs %xcc, $\x02\0"
    /* 5620 */ "tcs %xcc, $\x01 + $\x02\0"
    /* 5638 */ "tpos %xcc, $\x02\0"
    /* 5652 */ "tpos %xcc, $\x01 + $\x02\0"
    /* 5671 */ "tneg %xcc, $\x02\0"
    /* 5685 */ "tneg %xcc, $\x01 + $\x02\0"
    /* 5704 */ "tvc %xcc, $\x02\0"
    /* 5717 */ "tvc %xcc, $\x01 + $\x02\0"
    /* 5735 */ "tvs %xcc, $\x02\0"
    /* 5748 */ "tvs %xcc, $\x01 + $\x02\0"
    /* 5766 */ "fcmpd $\x02, $\x03\0"
    /* 5779 */ "fcmped $\x02, $\x03\0"
    /* 5793 */ "fcmpeq $\x02, $\x03\0"
    /* 5807 */ "fcmpes $\x02, $\x03\0"
    /* 5821 */ "fcmpq $\x02, $\x03\0"
    /* 5834 */ "fcmps $\x02, $\x03\0"
    /* 5847 */ "fmovda $\x02, $\x03, $\x01\0"
    /* 5865 */ "fmovdn $\x02, $\x03, $\x01\0"
    /* 5883 */ "fmovdu $\x02, $\x03, $\x01\0"
    /* 5901 */ "fmovdg $\x02, $\x03, $\x01\0"
    /* 5919 */ "fmovdug $\x02, $\x03, $\x01\0"
    /* 5938 */ "fmovdl $\x02, $\x03, $\x01\0"
    /* 5956 */ "fmovdul $\x02, $\x03, $\x01\0"
    /* 5975 */ "fmovdlg $\x02, $\x03, $\x01\0"
    /* 5994 */ "fmovdne $\x02, $\x03, $\x01\0"
    /* 6013 */ "fmovde $\x02, $\x03, $\x01\0"
    /* 6031 */ "fmovdue $\x02, $\x03, $\x01\0"
    /* 6050 */ "fmovdge $\x02, $\x03, $\x01\0"
    /* 6069 */ "fmovduge $\x02, $\x03, $\x01\0"
    /* 6089 */ "fmovdle $\x02, $\x03, $\x01\0"
    /* 6108 */ "fmovdule $\x02, $\x03, $\x01\0"
    /* 6128 */ "fmovdo $\x02, $\x03, $\x01\0"
    /* 6146 */ "fmovqa $\x02, $\x03, $\x01\0"
    /* 6164 */ "fmovqn $\x02, $\x03, $\x01\0"
    /* 6182 */ "fmovqu $\x02, $\x03, $\x01\0"
    /* 6200 */ "fmovqg $\x02, $\x03, $\x01\0"
    /* 6218 */ "fmovqug $\x02, $\x03, $\x01\0"
    /* 6237 */ "fmovql $\x02, $\x03, $\x01\0"
    /* 6255 */ "fmovqul $\x02, $\x03, $\x01\0"
    /* 6274 */ "fmovqlg $\x02, $\x03, $\x01\0"
    /* 6293 */ "fmovqne $\x02, $\x03, $\x01\0"
    /* 6312 */ "fmovqe $\x02, $\x03, $\x01\0"
    /* 6330 */ "fmovque $\x02, $\x03, $\x01\0"
    /* 6349 */ "fmovqge $\x02, $\x03, $\x01\0"
    /* 6368 */ "fmovquge $\x02, $\x03, $\x01\0"
    /* 6388 */ "fmovqle $\x02, $\x03, $\x01\0"
    /* 6407 */ "fmovqule $\x02, $\x03, $\x01\0"
    /* 6427 */ "fmovqo $\x02, $\x03, $\x01\0"
    /* 6445 */ "fmovsa $\x02, $\x03, $\x01\0"
    /* 6463 */ "fmovsn $\x02, $\x03, $\x01\0"
    /* 6481 */ "fmovsu $\x02, $\x03, $\x01\0"
    /* 6499 */ "fmovsg $\x02, $\x03, $\x01\0"
    /* 6517 */ "fmovsug $\x02, $\x03, $\x01\0"
    /* 6536 */ "fmovsl $\x02, $\x03, $\x01\0"
    /* 6554 */ "fmovsul $\x02, $\x03, $\x01\0"
    /* 6573 */ "fmovslg $\x02, $\x03, $\x01\0"
    /* 6592 */ "fmovsne $\x02, $\x03, $\x01\0"
    /* 6611 */ "fmovse $\x02, $\x03, $\x01\0"
    /* 6629 */ "fmovsue $\x02, $\x03, $\x01\0"
    /* 6648 */ "fmovsge $\x02, $\x03, $\x01\0"
    /* 6667 */ "fmovsuge $\x02, $\x03, $\x01\0"
    /* 6687 */ "fmovsle $\x02, $\x03, $\x01\0"
    /* 6706 */ "fmovsule $\x02, $\x03, $\x01\0"
    /* 6726 */ "fmovso $\x02, $\x03, $\x01\0"
    /* 6744 */ "mova $\x02, $\x03, $\x01\0"
    /* 6760 */ "movn $\x02, $\x03, $\x01\0"
    /* 6776 */ "movu $\x02, $\x03, $\x01\0"
    /* 6792 */ "movg $\x02, $\x03, $\x01\0"
    /* 6808 */ "movug $\x02, $\x03, $\x01\0"
    /* 6825 */ "movl $\x02, $\x03, $\x01\0"
    /* 6841 */ "movul $\x02, $\x03, $\x01\0"
    /* 6858 */ "movlg $\x02, $\x03, $\x01\0"
    /* 6875 */ "movne $\x02, $\x03, $\x01\0"
    /* 6892 */ "move $\x02, $\x03, $\x01\0"
    /* 6908 */ "movue $\x02, $\x03, $\x01\0"
    /* 6925 */ "movge $\x02, $\x03, $\x01\0"
    /* 6942 */ "movuge $\x02, $\x03, $\x01\0"
    /* 6960 */ "movle $\x02, $\x03, $\x01\0"
    /* 6977 */ "movule $\x02, $\x03, $\x01\0"
    /* 6995 */ "movo $\x02, $\x03, $\x01\0"
  ;

#ifndef NDEBUG
  static struct SortCheck {
    SortCheck(ArrayRef<PatternsForOpcode> OpToPatterns) {
      assert(std::is_sorted(
                 OpToPatterns.begin(), OpToPatterns.end(),
                 [](const PatternsForOpcode &L, const PatternsForOpcode &R) {
                   return L.Opcode < R.Opcode;
                 }) &&
             "tablegen failed to sort opcode patterns");
    }
  } sortCheckVar(OpToPatterns);
#endif

  AliasMatchingData M {
    makeArrayRef(OpToPatterns),
    makeArrayRef(Patterns),
    makeArrayRef(Conds),
    StringRef(AsmStrings, array_lengthof(AsmStrings)),
    nullptr,
  };
  const char *AsmString = matchAliasPatterns(MI, &STI, M);
  if (!AsmString) return false;

  unsigned I = 0;
  while (AsmString[I] != ' ' && AsmString[I] != '\t' &&
         AsmString[I] != '$' && AsmString[I] != '\0')
    ++I;
  OS << '\t' << StringRef(AsmString, I);
  if (AsmString[I] != '\0') {
    if (AsmString[I] == ' ' || AsmString[I] == '\t') {
      OS << '\t';
      ++I;
    }
    do {
      if (AsmString[I] == '$') {
        ++I;
        if (AsmString[I] == (char)0xff) {
          ++I;
          int OpIdx = AsmString[I++] - 1;
          int PrintMethodIdx = AsmString[I++] - 1;
          printCustomAliasOperand(MI, OpIdx, PrintMethodIdx, STI, OS);
        } else
          printOperand(MI, unsigned(AsmString[I++]) - 1, STI, OS);
      } else {
        OS << AsmString[I++];
      }
    } while (AsmString[I] != '\0');
  }

  return true;
}

void SparcInstPrinter::printCustomAliasOperand(
         const MCInst *MI, unsigned OpIdx,
         unsigned PrintMethodIdx,
         const MCSubtargetInfo &STI,
         raw_ostream &OS) {
  llvm_unreachable("Unknown PrintMethod kind");
}

#endif // PRINT_ALIAS_INSTR
