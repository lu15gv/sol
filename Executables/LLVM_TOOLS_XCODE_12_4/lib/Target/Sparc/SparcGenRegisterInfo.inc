/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* Target Register Enum Values                                                *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_REGINFO_ENUM
#undef GET_REGINFO_ENUM

namespace llvm {

class MCRegisterClass;
extern const MCRegisterClass SparcMCRegisterClasses[];

namespace SP {
enum {
  NoRegister,
  CANRESTORE = 1,
  CANSAVE = 2,
  CLEANWIN = 3,
  CPQ = 4,
  CPSR = 5,
  CWP = 6,
  FQ = 7,
  FSR = 8,
  ICC = 9,
  OTHERWIN = 10,
  PIL = 11,
  PSR = 12,
  PSTATE = 13,
  TBA = 14,
  TBR = 15,
  TICK = 16,
  TL = 17,
  TNPC = 18,
  TPC = 19,
  TSTATE = 20,
  TT = 21,
  WIM = 22,
  WSTATE = 23,
  Y = 24,
  ASR1 = 25,
  ASR2 = 26,
  ASR3 = 27,
  ASR4 = 28,
  ASR5 = 29,
  ASR6 = 30,
  ASR7 = 31,
  ASR8 = 32,
  ASR9 = 33,
  ASR10 = 34,
  ASR11 = 35,
  ASR12 = 36,
  ASR13 = 37,
  ASR14 = 38,
  ASR15 = 39,
  ASR16 = 40,
  ASR17 = 41,
  ASR18 = 42,
  ASR19 = 43,
  ASR20 = 44,
  ASR21 = 45,
  ASR22 = 46,
  ASR23 = 47,
  ASR24 = 48,
  ASR25 = 49,
  ASR26 = 50,
  ASR27 = 51,
  ASR28 = 52,
  ASR29 = 53,
  ASR30 = 54,
  ASR31 = 55,
  C0 = 56,
  C1 = 57,
  C2 = 58,
  C3 = 59,
  C4 = 60,
  C5 = 61,
  C6 = 62,
  C7 = 63,
  C8 = 64,
  C9 = 65,
  C10 = 66,
  C11 = 67,
  C12 = 68,
  C13 = 69,
  C14 = 70,
  C15 = 71,
  C16 = 72,
  C17 = 73,
  C18 = 74,
  C19 = 75,
  C20 = 76,
  C21 = 77,
  C22 = 78,
  C23 = 79,
  C24 = 80,
  C25 = 81,
  C26 = 82,
  C27 = 83,
  C28 = 84,
  C29 = 85,
  C30 = 86,
  C31 = 87,
  D0 = 88,
  D1 = 89,
  D2 = 90,
  D3 = 91,
  D4 = 92,
  D5 = 93,
  D6 = 94,
  D7 = 95,
  D8 = 96,
  D9 = 97,
  D10 = 98,
  D11 = 99,
  D12 = 100,
  D13 = 101,
  D14 = 102,
  D15 = 103,
  D16 = 104,
  D17 = 105,
  D18 = 106,
  D19 = 107,
  D20 = 108,
  D21 = 109,
  D22 = 110,
  D23 = 111,
  D24 = 112,
  D25 = 113,
  D26 = 114,
  D27 = 115,
  D28 = 116,
  D29 = 117,
  D30 = 118,
  D31 = 119,
  F0 = 120,
  F1 = 121,
  F2 = 122,
  F3 = 123,
  F4 = 124,
  F5 = 125,
  F6 = 126,
  F7 = 127,
  F8 = 128,
  F9 = 129,
  F10 = 130,
  F11 = 131,
  F12 = 132,
  F13 = 133,
  F14 = 134,
  F15 = 135,
  F16 = 136,
  F17 = 137,
  F18 = 138,
  F19 = 139,
  F20 = 140,
  F21 = 141,
  F22 = 142,
  F23 = 143,
  F24 = 144,
  F25 = 145,
  F26 = 146,
  F27 = 147,
  F28 = 148,
  F29 = 149,
  F30 = 150,
  F31 = 151,
  FCC0 = 152,
  FCC1 = 153,
  FCC2 = 154,
  FCC3 = 155,
  G0 = 156,
  G1 = 157,
  G2 = 158,
  G3 = 159,
  G4 = 160,
  G5 = 161,
  G6 = 162,
  G7 = 163,
  I0 = 164,
  I1 = 165,
  I2 = 166,
  I3 = 167,
  I4 = 168,
  I5 = 169,
  I6 = 170,
  I7 = 171,
  L0 = 172,
  L1 = 173,
  L2 = 174,
  L3 = 175,
  L4 = 176,
  L5 = 177,
  L6 = 178,
  L7 = 179,
  O0 = 180,
  O1 = 181,
  O2 = 182,
  O3 = 183,
  O4 = 184,
  O5 = 185,
  O6 = 186,
  O7 = 187,
  Q0 = 188,
  Q1 = 189,
  Q2 = 190,
  Q3 = 191,
  Q4 = 192,
  Q5 = 193,
  Q6 = 194,
  Q7 = 195,
  Q8 = 196,
  Q9 = 197,
  Q10 = 198,
  Q11 = 199,
  Q12 = 200,
  Q13 = 201,
  Q14 = 202,
  Q15 = 203,
  C0_C1 = 204,
  C2_C3 = 205,
  C4_C5 = 206,
  C6_C7 = 207,
  C8_C9 = 208,
  C10_C11 = 209,
  C12_C13 = 210,
  C14_C15 = 211,
  C16_C17 = 212,
  C18_C19 = 213,
  C20_C21 = 214,
  C22_C23 = 215,
  C24_C25 = 216,
  C26_C27 = 217,
  C28_C29 = 218,
  C30_C31 = 219,
  G0_G1 = 220,
  G2_G3 = 221,
  G4_G5 = 222,
  G6_G7 = 223,
  I0_I1 = 224,
  I2_I3 = 225,
  I4_I5 = 226,
  I6_I7 = 227,
  L0_L1 = 228,
  L2_L3 = 229,
  L4_L5 = 230,
  L6_L7 = 231,
  O0_O1 = 232,
  O2_O3 = 233,
  O4_O5 = 234,
  O6_O7 = 235,
  NUM_TARGET_REGS 	// 236
};
} // end namespace SP

// Register classes

namespace SP {
enum {
  FCCRegsRegClassID = 0,
  ASRRegsRegClassID = 1,
  CoprocRegsRegClassID = 2,
  FPRegsRegClassID = 3,
  IntRegsRegClassID = 4,
  DFPRegsRegClassID = 5,
  I64RegsRegClassID = 6,
  CoprocPairRegClassID = 7,
  IntPairRegClassID = 8,
  LowDFPRegsRegClassID = 9,
  PRRegsRegClassID = 10,
  QFPRegsRegClassID = 11,
  LowQFPRegsRegClassID = 12,

  };
} // end namespace SP


// Subregister indices

namespace SP {
enum {
  NoSubRegister,
  sub_even,	// 1
  sub_even64,	// 2
  sub_odd,	// 3
  sub_odd64,	// 4
  sub_odd64_then_sub_even,	// 5
  sub_odd64_then_sub_odd,	// 6
  NUM_TARGET_SUBREGS
};
} // end namespace SP

} // end namespace llvm

#endif // GET_REGINFO_ENUM

/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* MC Register Information                                                    *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_REGINFO_MC_DESC
#undef GET_REGINFO_MC_DESC

namespace llvm {

extern const MCPhysReg SparcRegDiffLists[] = {
  /* 0 */ 64871, 1, 1, 1, 0,
  /* 5 */ 32, 1, 0,
  /* 8 */ 65436, 32, 1, 65504, 33, 1, 0,
  /* 15 */ 34, 1, 0,
  /* 18 */ 65437, 34, 1, 65502, 35, 1, 0,
  /* 25 */ 36, 1, 0,
  /* 28 */ 65438, 36, 1, 65500, 37, 1, 0,
  /* 35 */ 38, 1, 0,
  /* 38 */ 65439, 38, 1, 65498, 39, 1, 0,
  /* 45 */ 40, 1, 0,
  /* 48 */ 65440, 40, 1, 65496, 41, 1, 0,
  /* 55 */ 42, 1, 0,
  /* 58 */ 65441, 42, 1, 65494, 43, 1, 0,
  /* 65 */ 44, 1, 0,
  /* 68 */ 65442, 44, 1, 65492, 45, 1, 0,
  /* 75 */ 46, 1, 0,
  /* 78 */ 65443, 46, 1, 65490, 47, 1, 0,
  /* 85 */ 65183, 1, 0,
  /* 88 */ 65235, 1, 0,
  /* 91 */ 65263, 1, 0,
  /* 94 */ 65388, 1, 0,
  /* 97 */ 65389, 1, 0,
  /* 100 */ 65390, 1, 0,
  /* 103 */ 65391, 1, 0,
  /* 106 */ 65392, 1, 0,
  /* 109 */ 65393, 1, 0,
  /* 112 */ 65394, 1, 0,
  /* 115 */ 65395, 1, 0,
  /* 118 */ 65396, 1, 0,
  /* 121 */ 65397, 1, 0,
  /* 124 */ 65398, 1, 0,
  /* 127 */ 65399, 1, 0,
  /* 130 */ 65400, 1, 0,
  /* 133 */ 65401, 1, 0,
  /* 136 */ 65402, 1, 0,
  /* 139 */ 65403, 1, 0,
  /* 142 */ 65444, 1, 0,
  /* 145 */ 65445, 1, 0,
  /* 148 */ 65446, 1, 0,
  /* 151 */ 65447, 1, 0,
  /* 154 */ 65448, 1, 0,
  /* 157 */ 65449, 1, 0,
  /* 160 */ 65450, 1, 0,
  /* 163 */ 65451, 1, 0,
  /* 166 */ 65472, 1, 0,
  /* 169 */ 65473, 1, 0,
  /* 172 */ 65474, 1, 0,
  /* 175 */ 65475, 1, 0,
  /* 178 */ 65476, 1, 0,
  /* 181 */ 65477, 1, 0,
  /* 184 */ 65478, 1, 0,
  /* 187 */ 65479, 1, 0,
  /* 190 */ 65480, 1, 0,
  /* 193 */ 65481, 1, 0,
  /* 196 */ 65482, 1, 0,
  /* 199 */ 65483, 1, 0,
  /* 202 */ 65484, 1, 0,
  /* 205 */ 65485, 1, 0,
  /* 208 */ 65486, 1, 0,
  /* 211 */ 65487, 1, 0,
  /* 214 */ 15, 0,
  /* 216 */ 48, 0,
  /* 218 */ 49, 0,
  /* 220 */ 50, 0,
  /* 222 */ 51, 0,
  /* 224 */ 52, 0,
  /* 226 */ 53, 0,
  /* 228 */ 54, 0,
  /* 230 */ 55, 0,
  /* 232 */ 56, 0,
  /* 234 */ 57, 0,
  /* 236 */ 58, 0,
  /* 238 */ 59, 0,
  /* 240 */ 60, 0,
  /* 242 */ 61, 0,
  /* 244 */ 62, 0,
  /* 246 */ 63, 0,
  /* 248 */ 64, 0,
  /* 250 */ 84, 0,
  /* 252 */ 85, 0,
  /* 254 */ 86, 0,
  /* 256 */ 87, 0,
  /* 258 */ 88, 0,
  /* 260 */ 89, 0,
  /* 262 */ 90, 0,
  /* 264 */ 91, 0,
  /* 266 */ 65488, 92, 0,
  /* 269 */ 65489, 92, 0,
  /* 272 */ 65489, 93, 0,
  /* 275 */ 65490, 93, 0,
  /* 278 */ 65491, 93, 0,
  /* 281 */ 65491, 94, 0,
  /* 284 */ 65492, 94, 0,
  /* 287 */ 65493, 94, 0,
  /* 290 */ 65493, 95, 0,
  /* 293 */ 65494, 95, 0,
  /* 296 */ 65495, 95, 0,
  /* 299 */ 65495, 96, 0,
  /* 302 */ 65496, 96, 0,
  /* 305 */ 65497, 96, 0,
  /* 308 */ 65497, 97, 0,
  /* 311 */ 65498, 97, 0,
  /* 314 */ 65499, 97, 0,
  /* 317 */ 65499, 98, 0,
  /* 320 */ 65500, 98, 0,
  /* 323 */ 65501, 98, 0,
  /* 326 */ 65501, 99, 0,
  /* 329 */ 65502, 99, 0,
  /* 332 */ 65503, 99, 0,
  /* 335 */ 65503, 100, 0,
  /* 338 */ 65504, 100, 0,
  /* 341 */ 132, 0,
  /* 343 */ 133, 0,
  /* 345 */ 134, 0,
  /* 347 */ 135, 0,
  /* 349 */ 136, 0,
  /* 351 */ 137, 0,
  /* 353 */ 138, 0,
  /* 355 */ 139, 0,
  /* 357 */ 140, 0,
  /* 359 */ 141, 0,
  /* 361 */ 142, 0,
  /* 363 */ 143, 0,
  /* 365 */ 144, 0,
  /* 367 */ 145, 0,
  /* 369 */ 146, 0,
  /* 371 */ 147, 0,
  /* 373 */ 148, 0,
  /* 375 */ 65503, 0,
  /* 377 */ 65519, 0,
  /* 379 */ 65535, 0,
};

extern const LaneBitmask SparcLaneMaskLists[] = {
  /* 0 */ LaneBitmask(0x00000000), LaneBitmask::getAll(),
  /* 2 */ LaneBitmask(0x00000001), LaneBitmask(0x00000002), LaneBitmask::getAll(),
  /* 5 */ LaneBitmask(0x00000001), LaneBitmask(0x00000002), LaneBitmask(0x00000004), LaneBitmask(0x00000008), LaneBitmask::getAll(),
  /* 10 */ LaneBitmask(0x00000003), LaneBitmask(0x0000000C), LaneBitmask::getAll(),
};

extern const uint16_t SparcSubRegIdxLists[] = {
  /* 0 */ 1, 3, 0,
  /* 3 */ 2, 4, 0,
  /* 6 */ 2, 1, 3, 4, 5, 6, 0,
};

extern const MCRegisterInfo::SubRegCoveredBits SparcSubRegIdxRanges[] = {
  { 65535, 65535 },
  { 0, 32 },	// sub_even
  { 0, 64 },	// sub_even64
  { 32, 32 },	// sub_odd
  { 64, 64 },	// sub_odd64
  { 64, 32 },	// sub_odd64_then_sub_even
  { 96, 32 },	// sub_odd64_then_sub_odd
};

extern const char SparcRegStrings[] = {
  /* 0 */ 'C', '1', '0', 0,
  /* 4 */ 'D', '1', '0', 0,
  /* 8 */ 'F', '1', '0', 0,
  /* 12 */ 'Q', '1', '0', 0,
  /* 16 */ 'A', 'S', 'R', '1', '0', 0,
  /* 22 */ 'C', '2', '0', 0,
  /* 26 */ 'D', '2', '0', 0,
  /* 30 */ 'F', '2', '0', 0,
  /* 34 */ 'A', 'S', 'R', '2', '0', 0,
  /* 40 */ 'C', '3', '0', 0,
  /* 44 */ 'D', '3', '0', 0,
  /* 48 */ 'F', '3', '0', 0,
  /* 52 */ 'A', 'S', 'R', '3', '0', 0,
  /* 58 */ 'F', 'C', 'C', '0', 0,
  /* 63 */ 'D', '0', 0,
  /* 66 */ 'F', '0', 0,
  /* 69 */ 'G', '0', 0,
  /* 72 */ 'I', '0', 0,
  /* 75 */ 'L', '0', 0,
  /* 78 */ 'O', '0', 0,
  /* 81 */ 'Q', '0', 0,
  /* 84 */ 'C', '1', '0', '_', 'C', '1', '1', 0,
  /* 92 */ 'D', '1', '1', 0,
  /* 96 */ 'F', '1', '1', 0,
  /* 100 */ 'Q', '1', '1', 0,
  /* 104 */ 'A', 'S', 'R', '1', '1', 0,
  /* 110 */ 'C', '2', '0', '_', 'C', '2', '1', 0,
  /* 118 */ 'D', '2', '1', 0,
  /* 122 */ 'F', '2', '1', 0,
  /* 126 */ 'A', 'S', 'R', '2', '1', 0,
  /* 132 */ 'C', '3', '0', '_', 'C', '3', '1', 0,
  /* 140 */ 'D', '3', '1', 0,
  /* 144 */ 'F', '3', '1', 0,
  /* 148 */ 'A', 'S', 'R', '3', '1', 0,
  /* 154 */ 'F', 'C', 'C', '1', 0,
  /* 159 */ 'C', '0', '_', 'C', '1', 0,
  /* 165 */ 'D', '1', 0,
  /* 168 */ 'F', '1', 0,
  /* 171 */ 'G', '0', '_', 'G', '1', 0,
  /* 177 */ 'I', '0', '_', 'I', '1', 0,
  /* 183 */ 'L', '0', '_', 'L', '1', 0,
  /* 189 */ 'O', '0', '_', 'O', '1', 0,
  /* 195 */ 'Q', '1', 0,
  /* 198 */ 'A', 'S', 'R', '1', 0,
  /* 203 */ 'C', '1', '2', 0,
  /* 207 */ 'D', '1', '2', 0,
  /* 211 */ 'F', '1', '2', 0,
  /* 215 */ 'Q', '1', '2', 0,
  /* 219 */ 'A', 'S', 'R', '1', '2', 0,
  /* 225 */ 'C', '2', '2', 0,
  /* 229 */ 'D', '2', '2', 0,
  /* 233 */ 'F', '2', '2', 0,
  /* 237 */ 'A', 'S', 'R', '2', '2', 0,
  /* 243 */ 'F', 'C', 'C', '2', 0,
  /* 248 */ 'D', '2', 0,
  /* 251 */ 'F', '2', 0,
  /* 254 */ 'G', '2', 0,
  /* 257 */ 'I', '2', 0,
  /* 260 */ 'L', '2', 0,
  /* 263 */ 'O', '2', 0,
  /* 266 */ 'Q', '2', 0,
  /* 269 */ 'A', 'S', 'R', '2', 0,
  /* 274 */ 'C', '1', '2', '_', 'C', '1', '3', 0,
  /* 282 */ 'D', '1', '3', 0,
  /* 286 */ 'F', '1', '3', 0,
  /* 290 */ 'Q', '1', '3', 0,
  /* 294 */ 'A', 'S', 'R', '1', '3', 0,
  /* 300 */ 'C', '2', '2', '_', 'C', '2', '3', 0,
  /* 308 */ 'D', '2', '3', 0,
  /* 312 */ 'F', '2', '3', 0,
  /* 316 */ 'A', 'S', 'R', '2', '3', 0,
  /* 322 */ 'F', 'C', 'C', '3', 0,
  /* 327 */ 'C', '2', '_', 'C', '3', 0,
  /* 333 */ 'D', '3', 0,
  /* 336 */ 'F', '3', 0,
  /* 339 */ 'G', '2', '_', 'G', '3', 0,
  /* 345 */ 'I', '2', '_', 'I', '3', 0,
  /* 351 */ 'L', '2', '_', 'L', '3', 0,
  /* 357 */ 'O', '2', '_', 'O', '3', 0,
  /* 363 */ 'Q', '3', 0,
  /* 366 */ 'A', 'S', 'R', '3', 0,
  /* 371 */ 'C', '1', '4', 0,
  /* 375 */ 'D', '1', '4', 0,
  /* 379 */ 'F', '1', '4', 0,
  /* 383 */ 'Q', '1', '4', 0,
  /* 387 */ 'A', 'S', 'R', '1', '4', 0,
  /* 393 */ 'C', '2', '4', 0,
  /* 397 */ 'D', '2', '4', 0,
  /* 401 */ 'F', '2', '4', 0,
  /* 405 */ 'A', 'S', 'R', '2', '4', 0,
  /* 411 */ 'C', '4', 0,
  /* 414 */ 'D', '4', 0,
  /* 417 */ 'F', '4', 0,
  /* 420 */ 'G', '4', 0,
  /* 423 */ 'I', '4', 0,
  /* 426 */ 'L', '4', 0,
  /* 429 */ 'O', '4', 0,
  /* 432 */ 'Q', '4', 0,
  /* 435 */ 'A', 'S', 'R', '4', 0,
  /* 440 */ 'C', '1', '4', '_', 'C', '1', '5', 0,
  /* 448 */ 'D', '1', '5', 0,
  /* 452 */ 'F', '1', '5', 0,
  /* 456 */ 'Q', '1', '5', 0,
  /* 460 */ 'A', 'S', 'R', '1', '5', 0,
  /* 466 */ 'C', '2', '4', '_', 'C', '2', '5', 0,
  /* 474 */ 'D', '2', '5', 0,
  /* 478 */ 'F', '2', '5', 0,
  /* 482 */ 'A', 'S', 'R', '2', '5', 0,
  /* 488 */ 'C', '4', '_', 'C', '5', 0,
  /* 494 */ 'D', '5', 0,
  /* 497 */ 'F', '5', 0,
  /* 500 */ 'G', '4', '_', 'G', '5', 0,
  /* 506 */ 'I', '4', '_', 'I', '5', 0,
  /* 512 */ 'L', '4', '_', 'L', '5', 0,
  /* 518 */ 'O', '4', '_', 'O', '5', 0,
  /* 524 */ 'Q', '5', 0,
  /* 527 */ 'A', 'S', 'R', '5', 0,
  /* 532 */ 'C', '1', '6', 0,
  /* 536 */ 'D', '1', '6', 0,
  /* 540 */ 'F', '1', '6', 0,
  /* 544 */ 'A', 'S', 'R', '1', '6', 0,
  /* 550 */ 'C', '2', '6', 0,
  /* 554 */ 'D', '2', '6', 0,
  /* 558 */ 'F', '2', '6', 0,
  /* 562 */ 'A', 'S', 'R', '2', '6', 0,
  /* 568 */ 'C', '6', 0,
  /* 571 */ 'D', '6', 0,
  /* 574 */ 'F', '6', 0,
  /* 577 */ 'G', '6', 0,
  /* 580 */ 'I', '6', 0,
  /* 583 */ 'L', '6', 0,
  /* 586 */ 'O', '6', 0,
  /* 589 */ 'Q', '6', 0,
  /* 592 */ 'A', 'S', 'R', '6', 0,
  /* 597 */ 'C', '1', '6', '_', 'C', '1', '7', 0,
  /* 605 */ 'D', '1', '7', 0,
  /* 609 */ 'F', '1', '7', 0,
  /* 613 */ 'A', 'S', 'R', '1', '7', 0,
  /* 619 */ 'C', '2', '6', '_', 'C', '2', '7', 0,
  /* 627 */ 'D', '2', '7', 0,
  /* 631 */ 'F', '2', '7', 0,
  /* 635 */ 'A', 'S', 'R', '2', '7', 0,
  /* 641 */ 'C', '6', '_', 'C', '7', 0,
  /* 647 */ 'D', '7', 0,
  /* 650 */ 'F', '7', 0,
  /* 653 */ 'G', '6', '_', 'G', '7', 0,
  /* 659 */ 'I', '6', '_', 'I', '7', 0,
  /* 665 */ 'L', '6', '_', 'L', '7', 0,
  /* 671 */ 'O', '6', '_', 'O', '7', 0,
  /* 677 */ 'Q', '7', 0,
  /* 680 */ 'A', 'S', 'R', '7', 0,
  /* 685 */ 'C', '1', '8', 0,
  /* 689 */ 'D', '1', '8', 0,
  /* 693 */ 'F', '1', '8', 0,
  /* 697 */ 'A', 'S', 'R', '1', '8', 0,
  /* 703 */ 'C', '2', '8', 0,
  /* 707 */ 'D', '2', '8', 0,
  /* 711 */ 'F', '2', '8', 0,
  /* 715 */ 'A', 'S', 'R', '2', '8', 0,
  /* 721 */ 'C', '8', 0,
  /* 724 */ 'D', '8', 0,
  /* 727 */ 'F', '8', 0,
  /* 730 */ 'Q', '8', 0,
  /* 733 */ 'A', 'S', 'R', '8', 0,
  /* 738 */ 'C', '1', '8', '_', 'C', '1', '9', 0,
  /* 746 */ 'D', '1', '9', 0,
  /* 750 */ 'F', '1', '9', 0,
  /* 754 */ 'A', 'S', 'R', '1', '9', 0,
  /* 760 */ 'C', '2', '8', '_', 'C', '2', '9', 0,
  /* 768 */ 'D', '2', '9', 0,
  /* 772 */ 'F', '2', '9', 0,
  /* 776 */ 'A', 'S', 'R', '2', '9', 0,
  /* 782 */ 'C', '8', '_', 'C', '9', 0,
  /* 788 */ 'D', '9', 0,
  /* 791 */ 'F', '9', 0,
  /* 794 */ 'Q', '9', 0,
  /* 797 */ 'A', 'S', 'R', '9', 0,
  /* 802 */ 'T', 'B', 'A', 0,
  /* 806 */ 'I', 'C', 'C', 0,
  /* 810 */ 'T', 'N', 'P', 'C', 0,
  /* 815 */ 'T', 'P', 'C', 0,
  /* 819 */ 'C', 'A', 'N', 'R', 'E', 'S', 'T', 'O', 'R', 'E', 0,
  /* 830 */ 'P', 'S', 'T', 'A', 'T', 'E', 0,
  /* 837 */ 'T', 'S', 'T', 'A', 'T', 'E', 0,
  /* 844 */ 'W', 'S', 'T', 'A', 'T', 'E', 0,
  /* 851 */ 'C', 'A', 'N', 'S', 'A', 'V', 'E', 0,
  /* 859 */ 'T', 'I', 'C', 'K', 0,
  /* 864 */ 'P', 'I', 'L', 0,
  /* 868 */ 'T', 'L', 0,
  /* 871 */ 'W', 'I', 'M', 0,
  /* 875 */ 'C', 'L', 'E', 'A', 'N', 'W', 'I', 'N', 0,
  /* 884 */ 'O', 'T', 'H', 'E', 'R', 'W', 'I', 'N', 0,
  /* 893 */ 'C', 'W', 'P', 0,
  /* 897 */ 'F', 'Q', 0,
  /* 900 */ 'C', 'P', 'Q', 0,
  /* 904 */ 'T', 'B', 'R', 0,
  /* 908 */ 'F', 'S', 'R', 0,
  /* 912 */ 'C', 'P', 'S', 'R', 0,
  /* 917 */ 'T', 'T', 0,
  /* 920 */ 'Y', 0,
};

extern const MCRegisterDesc SparcRegDesc[] = { // Descriptors
  { 3, 0, 0, 0, 0, 0 },
  { 819, 4, 4, 2, 6065, 0 },
  { 851, 4, 4, 2, 6065, 0 },
  { 875, 4, 4, 2, 6065, 0 },
  { 900, 4, 4, 2, 6065, 0 },
  { 912, 4, 4, 2, 6065, 0 },
  { 893, 4, 4, 2, 6065, 0 },
  { 897, 4, 4, 2, 6065, 0 },
  { 908, 4, 4, 2, 6065, 0 },
  { 806, 4, 4, 2, 6065, 0 },
  { 884, 4, 4, 2, 6065, 0 },
  { 864, 4, 4, 2, 6065, 0 },
  { 913, 4, 4, 2, 6065, 0 },
  { 830, 4, 4, 2, 6065, 0 },
  { 802, 4, 4, 2, 6065, 0 },
  { 904, 4, 4, 2, 6065, 0 },
  { 859, 4, 4, 2, 6065, 0 },
  { 868, 4, 4, 2, 6065, 0 },
  { 810, 4, 4, 2, 6065, 0 },
  { 815, 4, 4, 2, 6065, 0 },
  { 837, 4, 4, 2, 6065, 0 },
  { 917, 4, 4, 2, 6065, 0 },
  { 871, 4, 4, 2, 6065, 0 },
  { 844, 4, 4, 2, 6065, 0 },
  { 920, 4, 4, 2, 6065, 0 },
  { 198, 4, 4, 2, 6065, 0 },
  { 269, 4, 4, 2, 6065, 0 },
  { 366, 4, 4, 2, 6065, 0 },
  { 435, 4, 4, 2, 6065, 0 },
  { 527, 4, 4, 2, 6065, 0 },
  { 592, 4, 4, 2, 6065, 0 },
  { 680, 4, 4, 2, 6065, 0 },
  { 733, 4, 4, 2, 6065, 0 },
  { 797, 4, 4, 2, 6065, 0 },
  { 16, 4, 4, 2, 6065, 0 },
  { 104, 4, 4, 2, 6065, 0 },
  { 219, 4, 4, 2, 6065, 0 },
  { 294, 4, 4, 2, 6065, 0 },
  { 387, 4, 4, 2, 6065, 0 },
  { 460, 4, 4, 2, 6065, 0 },
  { 544, 4, 4, 2, 6065, 0 },
  { 613, 4, 4, 2, 6065, 0 },
  { 697, 4, 4, 2, 6065, 0 },
  { 754, 4, 4, 2, 6065, 0 },
  { 34, 4, 4, 2, 6065, 0 },
  { 126, 4, 4, 2, 6065, 0 },
  { 237, 4, 4, 2, 6065, 0 },
  { 316, 4, 4, 2, 6065, 0 },
  { 405, 4, 4, 2, 6065, 0 },
  { 482, 4, 4, 2, 6065, 0 },
  { 562, 4, 4, 2, 6065, 0 },
  { 635, 4, 4, 2, 6065, 0 },
  { 715, 4, 4, 2, 6065, 0 },
  { 776, 4, 4, 2, 6065, 0 },
  { 52, 4, 4, 2, 6065, 0 },
  { 148, 4, 4, 2, 6065, 0 },
  { 60, 4, 373, 2, 6065, 0 },
  { 156, 4, 371, 2, 6065, 0 },
  { 245, 4, 371, 2, 6065, 0 },
  { 324, 4, 369, 2, 6065, 0 },
  { 411, 4, 369, 2, 6065, 0 },
  { 491, 4, 367, 2, 6065, 0 },
  { 568, 4, 367, 2, 6065, 0 },
  { 644, 4, 365, 2, 6065, 0 },
  { 721, 4, 365, 2, 6065, 0 },
  { 785, 4, 363, 2, 6065, 0 },
  { 0, 4, 363, 2, 6065, 0 },
  { 88, 4, 361, 2, 6065, 0 },
  { 203, 4, 361, 2, 6065, 0 },
  { 278, 4, 359, 2, 6065, 0 },
  { 371, 4, 359, 2, 6065, 0 },
  { 444, 4, 357, 2, 6065, 0 },
  { 532, 4, 357, 2, 6065, 0 },
  { 601, 4, 355, 2, 6065, 0 },
  { 685, 4, 355, 2, 6065, 0 },
  { 742, 4, 353, 2, 6065, 0 },
  { 22, 4, 353, 2, 6065, 0 },
  { 114, 4, 351, 2, 6065, 0 },
  { 225, 4, 351, 2, 6065, 0 },
  { 304, 4, 349, 2, 6065, 0 },
  { 393, 4, 349, 2, 6065, 0 },
  { 470, 4, 347, 2, 6065, 0 },
  { 550, 4, 347, 2, 6065, 0 },
  { 623, 4, 345, 2, 6065, 0 },
  { 703, 4, 345, 2, 6065, 0 },
  { 764, 4, 343, 2, 6065, 0 },
  { 40, 4, 343, 2, 6065, 0 },
  { 136, 4, 341, 2, 6065, 0 },
  { 63, 5, 336, 0, 2418, 2 },
  { 165, 12, 327, 0, 2418, 2 },
  { 248, 15, 327, 0, 2418, 2 },
  { 333, 22, 318, 0, 2418, 2 },
  { 414, 25, 318, 0, 2418, 2 },
  { 494, 32, 309, 0, 2418, 2 },
  { 571, 35, 309, 0, 2418, 2 },
  { 647, 42, 300, 0, 2418, 2 },
  { 724, 45, 300, 0, 2418, 2 },
  { 788, 52, 291, 0, 2418, 2 },
  { 4, 55, 291, 0, 2418, 2 },
  { 92, 62, 282, 0, 2418, 2 },
  { 207, 65, 282, 0, 2418, 2 },
  { 282, 72, 273, 0, 2418, 2 },
  { 375, 75, 273, 0, 2418, 2 },
  { 448, 82, 267, 0, 2418, 2 },
  { 536, 4, 267, 2, 3425, 0 },
  { 605, 4, 264, 2, 3425, 0 },
  { 689, 4, 264, 2, 3425, 0 },
  { 746, 4, 262, 2, 3425, 0 },
  { 26, 4, 262, 2, 3425, 0 },
  { 118, 4, 260, 2, 3425, 0 },
  { 229, 4, 260, 2, 3425, 0 },
  { 308, 4, 258, 2, 3425, 0 },
  { 397, 4, 258, 2, 3425, 0 },
  { 474, 4, 256, 2, 3425, 0 },
  { 554, 4, 256, 2, 3425, 0 },
  { 627, 4, 254, 2, 3425, 0 },
  { 707, 4, 254, 2, 3425, 0 },
  { 768, 4, 252, 2, 3425, 0 },
  { 44, 4, 252, 2, 3425, 0 },
  { 140, 4, 250, 2, 3425, 0 },
  { 66, 4, 338, 2, 6001, 0 },
  { 168, 4, 335, 2, 6001, 0 },
  { 251, 4, 332, 2, 6001, 0 },
  { 336, 4, 329, 2, 6001, 0 },
  { 417, 4, 329, 2, 6001, 0 },
  { 497, 4, 326, 2, 6001, 0 },
  { 574, 4, 323, 2, 6001, 0 },
  { 650, 4, 320, 2, 6001, 0 },
  { 727, 4, 320, 2, 6001, 0 },
  { 791, 4, 317, 2, 6001, 0 },
  { 8, 4, 314, 2, 6001, 0 },
  { 96, 4, 311, 2, 6001, 0 },
  { 211, 4, 311, 2, 6001, 0 },
  { 286, 4, 308, 2, 6001, 0 },
  { 379, 4, 305, 2, 6001, 0 },
  { 452, 4, 302, 2, 6001, 0 },
  { 540, 4, 302, 2, 6001, 0 },
  { 609, 4, 299, 2, 6001, 0 },
  { 693, 4, 296, 2, 6001, 0 },
  { 750, 4, 293, 2, 6001, 0 },
  { 30, 4, 293, 2, 6001, 0 },
  { 122, 4, 290, 2, 6001, 0 },
  { 233, 4, 287, 2, 6001, 0 },
  { 312, 4, 284, 2, 6001, 0 },
  { 401, 4, 284, 2, 6001, 0 },
  { 478, 4, 281, 2, 6001, 0 },
  { 558, 4, 278, 2, 6001, 0 },
  { 631, 4, 275, 2, 6001, 0 },
  { 711, 4, 275, 2, 6001, 0 },
  { 772, 4, 272, 2, 6001, 0 },
  { 48, 4, 269, 2, 6001, 0 },
  { 144, 4, 266, 2, 6001, 0 },
  { 58, 4, 4, 2, 6033, 0 },
  { 154, 4, 4, 2, 6033, 0 },
  { 243, 4, 4, 2, 6033, 0 },
  { 322, 4, 4, 2, 6033, 0 },
  { 69, 4, 248, 2, 6033, 0 },
  { 174, 4, 246, 2, 6033, 0 },
  { 254, 4, 246, 2, 6033, 0 },
  { 342, 4, 244, 2, 6033, 0 },
  { 420, 4, 244, 2, 6033, 0 },
  { 503, 4, 242, 2, 6033, 0 },
  { 577, 4, 242, 2, 6033, 0 },
  { 656, 4, 240, 2, 6033, 0 },
  { 72, 4, 240, 2, 6033, 0 },
  { 180, 4, 238, 2, 6033, 0 },
  { 257, 4, 238, 2, 6033, 0 },
  { 348, 4, 236, 2, 6033, 0 },
  { 423, 4, 236, 2, 6033, 0 },
  { 509, 4, 234, 2, 6033, 0 },
  { 580, 4, 234, 2, 6033, 0 },
  { 662, 4, 232, 2, 6033, 0 },
  { 75, 4, 232, 2, 6033, 0 },
  { 186, 4, 230, 2, 6033, 0 },
  { 260, 4, 230, 2, 6033, 0 },
  { 354, 4, 228, 2, 6033, 0 },
  { 426, 4, 228, 2, 6033, 0 },
  { 515, 4, 226, 2, 6033, 0 },
  { 583, 4, 226, 2, 6033, 0 },
  { 668, 4, 224, 2, 6033, 0 },
  { 78, 4, 224, 2, 6033, 0 },
  { 192, 4, 222, 2, 6033, 0 },
  { 263, 4, 222, 2, 6033, 0 },
  { 360, 4, 220, 2, 6033, 0 },
  { 429, 4, 220, 2, 6033, 0 },
  { 521, 4, 218, 2, 6033, 0 },
  { 586, 4, 218, 2, 6033, 0 },
  { 674, 4, 216, 2, 6033, 0 },
  { 81, 8, 4, 6, 4, 5 },
  { 195, 18, 4, 6, 4, 5 },
  { 266, 28, 4, 6, 4, 5 },
  { 363, 38, 4, 6, 4, 5 },
  { 432, 48, 4, 6, 4, 5 },
  { 524, 58, 4, 6, 4, 5 },
  { 589, 68, 4, 6, 4, 5 },
  { 677, 78, 4, 6, 4, 5 },
  { 730, 142, 4, 3, 1458, 10 },
  { 794, 145, 4, 3, 1458, 10 },
  { 12, 148, 4, 3, 1458, 10 },
  { 100, 151, 4, 3, 1458, 10 },
  { 215, 154, 4, 3, 1458, 10 },
  { 290, 157, 4, 3, 1458, 10 },
  { 383, 160, 4, 3, 1458, 10 },
  { 456, 163, 4, 3, 1458, 10 },
  { 159, 94, 4, 0, 1362, 2 },
  { 327, 97, 4, 0, 1362, 2 },
  { 488, 100, 4, 0, 1362, 2 },
  { 641, 103, 4, 0, 1362, 2 },
  { 782, 106, 4, 0, 1362, 2 },
  { 84, 109, 4, 0, 1362, 2 },
  { 274, 112, 4, 0, 1362, 2 },
  { 440, 115, 4, 0, 1362, 2 },
  { 597, 118, 4, 0, 1362, 2 },
  { 738, 121, 4, 0, 1362, 2 },
  { 110, 124, 4, 0, 1362, 2 },
  { 300, 127, 4, 0, 1362, 2 },
  { 466, 130, 4, 0, 1362, 2 },
  { 619, 133, 4, 0, 1362, 2 },
  { 760, 136, 4, 0, 1362, 2 },
  { 132, 139, 4, 0, 1362, 2 },
  { 171, 166, 4, 0, 1410, 2 },
  { 339, 169, 4, 0, 1410, 2 },
  { 500, 172, 4, 0, 1410, 2 },
  { 653, 175, 4, 0, 1410, 2 },
  { 177, 178, 4, 0, 1410, 2 },
  { 345, 181, 4, 0, 1410, 2 },
  { 506, 184, 4, 0, 1410, 2 },
  { 659, 187, 4, 0, 1410, 2 },
  { 183, 190, 4, 0, 1410, 2 },
  { 351, 193, 4, 0, 1410, 2 },
  { 512, 196, 4, 0, 1410, 2 },
  { 665, 199, 4, 0, 1410, 2 },
  { 189, 202, 4, 0, 1410, 2 },
  { 357, 205, 4, 0, 1410, 2 },
  { 518, 208, 4, 0, 1410, 2 },
  { 671, 211, 4, 0, 1410, 2 },
};

extern const MCPhysReg SparcRegUnitRoots[][2] = {
  { SP::CANRESTORE },
  { SP::CANSAVE },
  { SP::CLEANWIN },
  { SP::CPQ },
  { SP::CPSR },
  { SP::CWP },
  { SP::FQ },
  { SP::FSR },
  { SP::ICC },
  { SP::OTHERWIN },
  { SP::PIL },
  { SP::PSR },
  { SP::PSTATE },
  { SP::TBA },
  { SP::TBR },
  { SP::TICK },
  { SP::TL },
  { SP::TNPC },
  { SP::TPC },
  { SP::TSTATE },
  { SP::TT },
  { SP::WIM },
  { SP::WSTATE },
  { SP::Y },
  { SP::ASR1 },
  { SP::ASR2 },
  { SP::ASR3 },
  { SP::ASR4 },
  { SP::ASR5 },
  { SP::ASR6 },
  { SP::ASR7 },
  { SP::ASR8 },
  { SP::ASR9 },
  { SP::ASR10 },
  { SP::ASR11 },
  { SP::ASR12 },
  { SP::ASR13 },
  { SP::ASR14 },
  { SP::ASR15 },
  { SP::ASR16 },
  { SP::ASR17 },
  { SP::ASR18 },
  { SP::ASR19 },
  { SP::ASR20 },
  { SP::ASR21 },
  { SP::ASR22 },
  { SP::ASR23 },
  { SP::ASR24 },
  { SP::ASR25 },
  { SP::ASR26 },
  { SP::ASR27 },
  { SP::ASR28 },
  { SP::ASR29 },
  { SP::ASR30 },
  { SP::ASR31 },
  { SP::C0 },
  { SP::C1 },
  { SP::C2 },
  { SP::C3 },
  { SP::C4 },
  { SP::C5 },
  { SP::C6 },
  { SP::C7 },
  { SP::C8 },
  { SP::C9 },
  { SP::C10 },
  { SP::C11 },
  { SP::C12 },
  { SP::C13 },
  { SP::C14 },
  { SP::C15 },
  { SP::C16 },
  { SP::C17 },
  { SP::C18 },
  { SP::C19 },
  { SP::C20 },
  { SP::C21 },
  { SP::C22 },
  { SP::C23 },
  { SP::C24 },
  { SP::C25 },
  { SP::C26 },
  { SP::C27 },
  { SP::C28 },
  { SP::C29 },
  { SP::C30 },
  { SP::C31 },
  { SP::F0 },
  { SP::F1 },
  { SP::F2 },
  { SP::F3 },
  { SP::F4 },
  { SP::F5 },
  { SP::F6 },
  { SP::F7 },
  { SP::F8 },
  { SP::F9 },
  { SP::F10 },
  { SP::F11 },
  { SP::F12 },
  { SP::F13 },
  { SP::F14 },
  { SP::F15 },
  { SP::F16 },
  { SP::F17 },
  { SP::F18 },
  { SP::F19 },
  { SP::F20 },
  { SP::F21 },
  { SP::F22 },
  { SP::F23 },
  { SP::F24 },
  { SP::F25 },
  { SP::F26 },
  { SP::F27 },
  { SP::F28 },
  { SP::F29 },
  { SP::F30 },
  { SP::F31 },
  { SP::D16 },
  { SP::D17 },
  { SP::D18 },
  { SP::D19 },
  { SP::D20 },
  { SP::D21 },
  { SP::D22 },
  { SP::D23 },
  { SP::D24 },
  { SP::D25 },
  { SP::D26 },
  { SP::D27 },
  { SP::D28 },
  { SP::D29 },
  { SP::D30 },
  { SP::D31 },
  { SP::FCC0 },
  { SP::FCC1 },
  { SP::FCC2 },
  { SP::FCC3 },
  { SP::G0 },
  { SP::G1 },
  { SP::G2 },
  { SP::G3 },
  { SP::G4 },
  { SP::G5 },
  { SP::G6 },
  { SP::G7 },
  { SP::I0 },
  { SP::I1 },
  { SP::I2 },
  { SP::I3 },
  { SP::I4 },
  { SP::I5 },
  { SP::I6 },
  { SP::I7 },
  { SP::L0 },
  { SP::L1 },
  { SP::L2 },
  { SP::L3 },
  { SP::L4 },
  { SP::L5 },
  { SP::L6 },
  { SP::L7 },
  { SP::O0 },
  { SP::O1 },
  { SP::O2 },
  { SP::O3 },
  { SP::O4 },
  { SP::O5 },
  { SP::O6 },
  { SP::O7 },
};

namespace {     // Register classes...
  // FCCRegs Register Class...
  const MCPhysReg FCCRegs[] = {
    SP::FCC0, SP::FCC1, SP::FCC2, SP::FCC3, 
  };

  // FCCRegs Bit set.
  const uint8_t FCCRegsBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 
  };

  // ASRRegs Register Class...
  const MCPhysReg ASRRegs[] = {
    SP::Y, SP::ASR1, SP::ASR2, SP::ASR3, SP::ASR4, SP::ASR5, SP::ASR6, SP::ASR7, SP::ASR8, SP::ASR9, SP::ASR10, SP::ASR11, SP::ASR12, SP::ASR13, SP::ASR14, SP::ASR15, SP::ASR16, SP::ASR17, SP::ASR18, SP::ASR19, SP::ASR20, SP::ASR21, SP::ASR22, SP::ASR23, SP::ASR24, SP::ASR25, SP::ASR26, SP::ASR27, SP::ASR28, SP::ASR29, SP::ASR30, SP::ASR31, 
  };

  // ASRRegs Bit set.
  const uint8_t ASRRegsBits[] = {
    0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 
  };

  // CoprocRegs Register Class...
  const MCPhysReg CoprocRegs[] = {
    SP::C0, SP::C1, SP::C2, SP::C3, SP::C4, SP::C5, SP::C6, SP::C7, SP::C8, SP::C9, SP::C10, SP::C11, SP::C12, SP::C13, SP::C14, SP::C15, SP::C16, SP::C17, SP::C18, SP::C19, SP::C20, SP::C21, SP::C22, SP::C23, SP::C24, SP::C25, SP::C26, SP::C27, SP::C28, SP::C29, SP::C30, SP::C31, 
  };

  // CoprocRegs Bit set.
  const uint8_t CoprocRegsBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 
  };

  // FPRegs Register Class...
  const MCPhysReg FPRegs[] = {
    SP::F0, SP::F1, SP::F2, SP::F3, SP::F4, SP::F5, SP::F6, SP::F7, SP::F8, SP::F9, SP::F10, SP::F11, SP::F12, SP::F13, SP::F14, SP::F15, SP::F16, SP::F17, SP::F18, SP::F19, SP::F20, SP::F21, SP::F22, SP::F23, SP::F24, SP::F25, SP::F26, SP::F27, SP::F28, SP::F29, SP::F30, SP::F31, 
  };

  // FPRegs Bit set.
  const uint8_t FPRegsBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 
  };

  // IntRegs Register Class...
  const MCPhysReg IntRegs[] = {
    SP::I0, SP::I1, SP::I2, SP::I3, SP::I4, SP::I5, SP::I6, SP::I7, SP::G0, SP::G1, SP::G2, SP::G3, SP::G4, SP::G5, SP::G6, SP::G7, SP::L0, SP::L1, SP::L2, SP::L3, SP::L4, SP::L5, SP::L6, SP::L7, SP::O0, SP::O1, SP::O2, SP::O3, SP::O4, SP::O5, SP::O6, SP::O7, 
  };

  // IntRegs Bit set.
  const uint8_t IntRegsBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0xff, 0xff, 0x0f, 
  };

  // DFPRegs Register Class...
  const MCPhysReg DFPRegs[] = {
    SP::D0, SP::D1, SP::D2, SP::D3, SP::D4, SP::D5, SP::D6, SP::D7, SP::D8, SP::D9, SP::D10, SP::D11, SP::D12, SP::D13, SP::D14, SP::D15, SP::D16, SP::D17, SP::D18, SP::D19, SP::D20, SP::D21, SP::D22, SP::D23, SP::D24, SP::D25, SP::D26, SP::D27, SP::D28, SP::D29, SP::D30, SP::D31, 
  };

  // DFPRegs Bit set.
  const uint8_t DFPRegsBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 
  };

  // I64Regs Register Class...
  const MCPhysReg I64Regs[] = {
    SP::I0, SP::I1, SP::I2, SP::I3, SP::I4, SP::I5, SP::I6, SP::I7, SP::G0, SP::G1, SP::G2, SP::G3, SP::G4, SP::G5, SP::G6, SP::G7, SP::L0, SP::L1, SP::L2, SP::L3, SP::L4, SP::L5, SP::L6, SP::L7, SP::O0, SP::O1, SP::O2, SP::O3, SP::O4, SP::O5, SP::O6, SP::O7, 
  };

  // I64Regs Bit set.
  const uint8_t I64RegsBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0xff, 0xff, 0x0f, 
  };

  // CoprocPair Register Class...
  const MCPhysReg CoprocPair[] = {
    SP::C0_C1, SP::C2_C3, SP::C4_C5, SP::C6_C7, SP::C8_C9, SP::C10_C11, SP::C12_C13, SP::C14_C15, SP::C16_C17, SP::C18_C19, SP::C20_C21, SP::C22_C23, SP::C24_C25, SP::C26_C27, SP::C28_C29, SP::C30_C31, 
  };

  // CoprocPair Bit set.
  const uint8_t CoprocPairBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0x0f, 
  };

  // IntPair Register Class...
  const MCPhysReg IntPair[] = {
    SP::I0_I1, SP::I2_I3, SP::I4_I5, SP::I6_I7, SP::G0_G1, SP::G2_G3, SP::G4_G5, SP::G6_G7, SP::L0_L1, SP::L2_L3, SP::L4_L5, SP::L6_L7, SP::O0_O1, SP::O2_O3, SP::O4_O5, SP::O6_O7, 
  };

  // IntPair Bit set.
  const uint8_t IntPairBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0x0f, 
  };

  // LowDFPRegs Register Class...
  const MCPhysReg LowDFPRegs[] = {
    SP::D0, SP::D1, SP::D2, SP::D3, SP::D4, SP::D5, SP::D6, SP::D7, SP::D8, SP::D9, SP::D10, SP::D11, SP::D12, SP::D13, SP::D14, SP::D15, 
  };

  // LowDFPRegs Bit set.
  const uint8_t LowDFPRegsBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 
  };

  // PRRegs Register Class...
  const MCPhysReg PRRegs[] = {
    SP::TPC, SP::TNPC, SP::TSTATE, SP::TT, SP::TICK, SP::TBA, SP::PSTATE, SP::TL, SP::PIL, SP::CWP, SP::CANSAVE, SP::CANRESTORE, SP::CLEANWIN, SP::OTHERWIN, SP::WSTATE, 
  };

  // PRRegs Bit set.
  const uint8_t PRRegsBits[] = {
    0x4e, 0x6c, 0xbf, 
  };

  // QFPRegs Register Class...
  const MCPhysReg QFPRegs[] = {
    SP::Q0, SP::Q1, SP::Q2, SP::Q3, SP::Q4, SP::Q5, SP::Q6, SP::Q7, SP::Q8, SP::Q9, SP::Q10, SP::Q11, SP::Q12, SP::Q13, SP::Q14, SP::Q15, 
  };

  // QFPRegs Bit set.
  const uint8_t QFPRegsBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0x0f, 
  };

  // LowQFPRegs Register Class...
  const MCPhysReg LowQFPRegs[] = {
    SP::Q0, SP::Q1, SP::Q2, SP::Q3, SP::Q4, SP::Q5, SP::Q6, SP::Q7, 
  };

  // LowQFPRegs Bit set.
  const uint8_t LowQFPRegsBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x0f, 
  };

} // end anonymous namespace

extern const char SparcRegClassStrings[] = {
  /* 0 */ 'C', 'o', 'p', 'r', 'o', 'c', 'P', 'a', 'i', 'r', 0,
  /* 11 */ 'I', 'n', 't', 'P', 'a', 'i', 'r', 0,
  /* 19 */ 'I', '6', '4', 'R', 'e', 'g', 's', 0,
  /* 27 */ 'F', 'C', 'C', 'R', 'e', 'g', 's', 0,
  /* 35 */ 'L', 'o', 'w', 'D', 'F', 'P', 'R', 'e', 'g', 's', 0,
  /* 46 */ 'L', 'o', 'w', 'Q', 'F', 'P', 'R', 'e', 'g', 's', 0,
  /* 57 */ 'P', 'R', 'R', 'e', 'g', 's', 0,
  /* 64 */ 'A', 'S', 'R', 'R', 'e', 'g', 's', 0,
  /* 72 */ 'C', 'o', 'p', 'r', 'o', 'c', 'R', 'e', 'g', 's', 0,
  /* 83 */ 'I', 'n', 't', 'R', 'e', 'g', 's', 0,
};

extern const MCRegisterClass SparcMCRegisterClasses[] = {
  { FCCRegs, FCCRegsBits, 27, 4, sizeof(FCCRegsBits), SP::FCCRegsRegClassID, 1, true },
  { ASRRegs, ASRRegsBits, 64, 32, sizeof(ASRRegsBits), SP::ASRRegsRegClassID, 1, false },
  { CoprocRegs, CoprocRegsBits, 72, 32, sizeof(CoprocRegsBits), SP::CoprocRegsRegClassID, 1, false },
  { FPRegs, FPRegsBits, 39, 32, sizeof(FPRegsBits), SP::FPRegsRegClassID, 1, true },
  { IntRegs, IntRegsBits, 83, 32, sizeof(IntRegsBits), SP::IntRegsRegClassID, 1, true },
  { DFPRegs, DFPRegsBits, 38, 32, sizeof(DFPRegsBits), SP::DFPRegsRegClassID, 1, true },
  { I64Regs, I64RegsBits, 19, 32, sizeof(I64RegsBits), SP::I64RegsRegClassID, 1, true },
  { CoprocPair, CoprocPairBits, 0, 16, sizeof(CoprocPairBits), SP::CoprocPairRegClassID, 1, false },
  { IntPair, IntPairBits, 11, 16, sizeof(IntPairBits), SP::IntPairRegClassID, 1, true },
  { LowDFPRegs, LowDFPRegsBits, 35, 16, sizeof(LowDFPRegsBits), SP::LowDFPRegsRegClassID, 1, true },
  { PRRegs, PRRegsBits, 57, 15, sizeof(PRRegsBits), SP::PRRegsRegClassID, 1, true },
  { QFPRegs, QFPRegsBits, 49, 16, sizeof(QFPRegsBits), SP::QFPRegsRegClassID, 1, true },
  { LowQFPRegs, LowQFPRegsBits, 46, 8, sizeof(LowQFPRegsBits), SP::LowQFPRegsRegClassID, 1, true },
};

// SP Dwarf<->LLVM register mappings.
extern const MCRegisterInfo::DwarfLLVMRegPair SPDwarfFlavour0Dwarf2L[] = {
  { 0U, SP::G0 },
  { 1U, SP::G1 },
  { 2U, SP::G2 },
  { 3U, SP::G3 },
  { 4U, SP::G4 },
  { 5U, SP::G5 },
  { 6U, SP::G6 },
  { 7U, SP::G7 },
  { 8U, SP::O0 },
  { 9U, SP::O1 },
  { 10U, SP::O2 },
  { 11U, SP::O3 },
  { 12U, SP::O4 },
  { 13U, SP::O5 },
  { 14U, SP::O6 },
  { 15U, SP::O7 },
  { 16U, SP::L0 },
  { 17U, SP::L1 },
  { 18U, SP::L2 },
  { 19U, SP::L3 },
  { 20U, SP::L4 },
  { 21U, SP::L5 },
  { 22U, SP::L6 },
  { 23U, SP::L7 },
  { 24U, SP::I0 },
  { 25U, SP::I1 },
  { 26U, SP::I2 },
  { 27U, SP::I3 },
  { 28U, SP::I4 },
  { 29U, SP::I5 },
  { 30U, SP::I6 },
  { 31U, SP::I7 },
  { 32U, SP::F0 },
  { 33U, SP::F1 },
  { 34U, SP::F2 },
  { 35U, SP::F3 },
  { 36U, SP::F4 },
  { 37U, SP::F5 },
  { 38U, SP::F6 },
  { 39U, SP::F7 },
  { 40U, SP::F8 },
  { 41U, SP::F9 },
  { 42U, SP::F10 },
  { 43U, SP::F11 },
  { 44U, SP::F12 },
  { 45U, SP::F13 },
  { 46U, SP::F14 },
  { 47U, SP::F15 },
  { 48U, SP::F16 },
  { 49U, SP::F17 },
  { 50U, SP::F18 },
  { 51U, SP::F19 },
  { 52U, SP::F20 },
  { 53U, SP::F21 },
  { 54U, SP::F22 },
  { 55U, SP::F23 },
  { 56U, SP::F24 },
  { 57U, SP::F25 },
  { 58U, SP::F26 },
  { 59U, SP::F27 },
  { 60U, SP::F28 },
  { 61U, SP::F29 },
  { 62U, SP::F30 },
  { 63U, SP::F31 },
  { 64U, SP::Y },
  { 72U, SP::D0 },
  { 73U, SP::D1 },
  { 74U, SP::D2 },
  { 75U, SP::D3 },
  { 76U, SP::D4 },
  { 77U, SP::D5 },
  { 78U, SP::D6 },
  { 79U, SP::D7 },
  { 80U, SP::D8 },
  { 81U, SP::D9 },
  { 82U, SP::D10 },
  { 83U, SP::D11 },
  { 84U, SP::D12 },
  { 85U, SP::D13 },
  { 86U, SP::D14 },
  { 87U, SP::D15 },
};
extern const unsigned SPDwarfFlavour0Dwarf2LSize = array_lengthof(SPDwarfFlavour0Dwarf2L);

extern const MCRegisterInfo::DwarfLLVMRegPair SPEHFlavour0Dwarf2L[] = {
  { 0U, SP::G0 },
  { 1U, SP::G1 },
  { 2U, SP::G2 },
  { 3U, SP::G3 },
  { 4U, SP::G4 },
  { 5U, SP::G5 },
  { 6U, SP::G6 },
  { 7U, SP::G7 },
  { 8U, SP::O0 },
  { 9U, SP::O1 },
  { 10U, SP::O2 },
  { 11U, SP::O3 },
  { 12U, SP::O4 },
  { 13U, SP::O5 },
  { 14U, SP::O6 },
  { 15U, SP::O7 },
  { 16U, SP::L0 },
  { 17U, SP::L1 },
  { 18U, SP::L2 },
  { 19U, SP::L3 },
  { 20U, SP::L4 },
  { 21U, SP::L5 },
  { 22U, SP::L6 },
  { 23U, SP::L7 },
  { 24U, SP::I0 },
  { 25U, SP::I1 },
  { 26U, SP::I2 },
  { 27U, SP::I3 },
  { 28U, SP::I4 },
  { 29U, SP::I5 },
  { 30U, SP::I6 },
  { 31U, SP::I7 },
  { 32U, SP::F0 },
  { 33U, SP::F1 },
  { 34U, SP::F2 },
  { 35U, SP::F3 },
  { 36U, SP::F4 },
  { 37U, SP::F5 },
  { 38U, SP::F6 },
  { 39U, SP::F7 },
  { 40U, SP::F8 },
  { 41U, SP::F9 },
  { 42U, SP::F10 },
  { 43U, SP::F11 },
  { 44U, SP::F12 },
  { 45U, SP::F13 },
  { 46U, SP::F14 },
  { 47U, SP::F15 },
  { 48U, SP::F16 },
  { 49U, SP::F17 },
  { 50U, SP::F18 },
  { 51U, SP::F19 },
  { 52U, SP::F20 },
  { 53U, SP::F21 },
  { 54U, SP::F22 },
  { 55U, SP::F23 },
  { 56U, SP::F24 },
  { 57U, SP::F25 },
  { 58U, SP::F26 },
  { 59U, SP::F27 },
  { 60U, SP::F28 },
  { 61U, SP::F29 },
  { 62U, SP::F30 },
  { 63U, SP::F31 },
  { 64U, SP::Y },
  { 72U, SP::D0 },
  { 73U, SP::D1 },
  { 74U, SP::D2 },
  { 75U, SP::D3 },
  { 76U, SP::D4 },
  { 77U, SP::D5 },
  { 78U, SP::D6 },
  { 79U, SP::D7 },
  { 80U, SP::D8 },
  { 81U, SP::D9 },
  { 82U, SP::D10 },
  { 83U, SP::D11 },
  { 84U, SP::D12 },
  { 85U, SP::D13 },
  { 86U, SP::D14 },
  { 87U, SP::D15 },
};
extern const unsigned SPEHFlavour0Dwarf2LSize = array_lengthof(SPEHFlavour0Dwarf2L);

extern const MCRegisterInfo::DwarfLLVMRegPair SPDwarfFlavour0L2Dwarf[] = {
  { SP::Y, 64U },
  { SP::D0, 72U },
  { SP::D1, 73U },
  { SP::D2, 74U },
  { SP::D3, 75U },
  { SP::D4, 76U },
  { SP::D5, 77U },
  { SP::D6, 78U },
  { SP::D7, 79U },
  { SP::D8, 80U },
  { SP::D9, 81U },
  { SP::D10, 82U },
  { SP::D11, 83U },
  { SP::D12, 84U },
  { SP::D13, 85U },
  { SP::D14, 86U },
  { SP::D15, 87U },
  { SP::F0, 32U },
  { SP::F1, 33U },
  { SP::F2, 34U },
  { SP::F3, 35U },
  { SP::F4, 36U },
  { SP::F5, 37U },
  { SP::F6, 38U },
  { SP::F7, 39U },
  { SP::F8, 40U },
  { SP::F9, 41U },
  { SP::F10, 42U },
  { SP::F11, 43U },
  { SP::F12, 44U },
  { SP::F13, 45U },
  { SP::F14, 46U },
  { SP::F15, 47U },
  { SP::F16, 48U },
  { SP::F17, 49U },
  { SP::F18, 50U },
  { SP::F19, 51U },
  { SP::F20, 52U },
  { SP::F21, 53U },
  { SP::F22, 54U },
  { SP::F23, 55U },
  { SP::F24, 56U },
  { SP::F25, 57U },
  { SP::F26, 58U },
  { SP::F27, 59U },
  { SP::F28, 60U },
  { SP::F29, 61U },
  { SP::F30, 62U },
  { SP::F31, 63U },
  { SP::G0, 0U },
  { SP::G1, 1U },
  { SP::G2, 2U },
  { SP::G3, 3U },
  { SP::G4, 4U },
  { SP::G5, 5U },
  { SP::G6, 6U },
  { SP::G7, 7U },
  { SP::I0, 24U },
  { SP::I1, 25U },
  { SP::I2, 26U },
  { SP::I3, 27U },
  { SP::I4, 28U },
  { SP::I5, 29U },
  { SP::I6, 30U },
  { SP::I7, 31U },
  { SP::L0, 16U },
  { SP::L1, 17U },
  { SP::L2, 18U },
  { SP::L3, 19U },
  { SP::L4, 20U },
  { SP::L5, 21U },
  { SP::L6, 22U },
  { SP::L7, 23U },
  { SP::O0, 8U },
  { SP::O1, 9U },
  { SP::O2, 10U },
  { SP::O3, 11U },
  { SP::O4, 12U },
  { SP::O5, 13U },
  { SP::O6, 14U },
  { SP::O7, 15U },
};
extern const unsigned SPDwarfFlavour0L2DwarfSize = array_lengthof(SPDwarfFlavour0L2Dwarf);

extern const MCRegisterInfo::DwarfLLVMRegPair SPEHFlavour0L2Dwarf[] = {
  { SP::Y, 64U },
  { SP::D0, 72U },
  { SP::D1, 73U },
  { SP::D2, 74U },
  { SP::D3, 75U },
  { SP::D4, 76U },
  { SP::D5, 77U },
  { SP::D6, 78U },
  { SP::D7, 79U },
  { SP::D8, 80U },
  { SP::D9, 81U },
  { SP::D10, 82U },
  { SP::D11, 83U },
  { SP::D12, 84U },
  { SP::D13, 85U },
  { SP::D14, 86U },
  { SP::D15, 87U },
  { SP::F0, 32U },
  { SP::F1, 33U },
  { SP::F2, 34U },
  { SP::F3, 35U },
  { SP::F4, 36U },
  { SP::F5, 37U },
  { SP::F6, 38U },
  { SP::F7, 39U },
  { SP::F8, 40U },
  { SP::F9, 41U },
  { SP::F10, 42U },
  { SP::F11, 43U },
  { SP::F12, 44U },
  { SP::F13, 45U },
  { SP::F14, 46U },
  { SP::F15, 47U },
  { SP::F16, 48U },
  { SP::F17, 49U },
  { SP::F18, 50U },
  { SP::F19, 51U },
  { SP::F20, 52U },
  { SP::F21, 53U },
  { SP::F22, 54U },
  { SP::F23, 55U },
  { SP::F24, 56U },
  { SP::F25, 57U },
  { SP::F26, 58U },
  { SP::F27, 59U },
  { SP::F28, 60U },
  { SP::F29, 61U },
  { SP::F30, 62U },
  { SP::F31, 63U },
  { SP::G0, 0U },
  { SP::G1, 1U },
  { SP::G2, 2U },
  { SP::G3, 3U },
  { SP::G4, 4U },
  { SP::G5, 5U },
  { SP::G6, 6U },
  { SP::G7, 7U },
  { SP::I0, 24U },
  { SP::I1, 25U },
  { SP::I2, 26U },
  { SP::I3, 27U },
  { SP::I4, 28U },
  { SP::I5, 29U },
  { SP::I6, 30U },
  { SP::I7, 31U },
  { SP::L0, 16U },
  { SP::L1, 17U },
  { SP::L2, 18U },
  { SP::L3, 19U },
  { SP::L4, 20U },
  { SP::L5, 21U },
  { SP::L6, 22U },
  { SP::L7, 23U },
  { SP::O0, 8U },
  { SP::O1, 9U },
  { SP::O2, 10U },
  { SP::O3, 11U },
  { SP::O4, 12U },
  { SP::O5, 13U },
  { SP::O6, 14U },
  { SP::O7, 15U },
};
extern const unsigned SPEHFlavour0L2DwarfSize = array_lengthof(SPEHFlavour0L2Dwarf);

extern const uint16_t SparcRegEncodingTable[] = {
  0,
  11,
  10,
  12,
  0,
  0,
  9,
  0,
  0,
  0,
  13,
  8,
  0,
  6,
  5,
  0,
  4,
  7,
  1,
  0,
  2,
  3,
  0,
  14,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  0,
  2,
  4,
  6,
  8,
  10,
  12,
  14,
  16,
  18,
  20,
  22,
  24,
  26,
  28,
  30,
  1,
  3,
  5,
  7,
  9,
  11,
  13,
  15,
  17,
  19,
  21,
  23,
  25,
  27,
  29,
  31,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  0,
  1,
  2,
  3,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  0,
  4,
  8,
  12,
  16,
  20,
  24,
  28,
  1,
  5,
  9,
  13,
  17,
  21,
  25,
  29,
  0,
  2,
  4,
  6,
  8,
  10,
  12,
  14,
  16,
  18,
  20,
  22,
  24,
  26,
  28,
  30,
  0,
  2,
  4,
  6,
  24,
  26,
  28,
  30,
  16,
  18,
  20,
  22,
  8,
  10,
  12,
  14,
};
static inline void InitSparcMCRegisterInfo(MCRegisterInfo *RI, unsigned RA, unsigned DwarfFlavour = 0, unsigned EHFlavour = 0, unsigned PC = 0) {
  RI->InitMCRegisterInfo(SparcRegDesc, 236, RA, PC, SparcMCRegisterClasses, 13, SparcRegUnitRoots, 171, SparcRegDiffLists, SparcLaneMaskLists, SparcRegStrings, SparcRegClassStrings, SparcSubRegIdxLists, 7,
SparcSubRegIdxRanges, SparcRegEncodingTable);

  switch (DwarfFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    RI->mapDwarfRegsToLLVMRegs(SPDwarfFlavour0Dwarf2L, SPDwarfFlavour0Dwarf2LSize, false);
    break;
  }
  switch (EHFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    RI->mapDwarfRegsToLLVMRegs(SPEHFlavour0Dwarf2L, SPEHFlavour0Dwarf2LSize, true);
    break;
  }
  switch (DwarfFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    RI->mapLLVMRegsToDwarfRegs(SPDwarfFlavour0L2Dwarf, SPDwarfFlavour0L2DwarfSize, false);
    break;
  }
  switch (EHFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    RI->mapLLVMRegsToDwarfRegs(SPEHFlavour0L2Dwarf, SPEHFlavour0L2DwarfSize, true);
    break;
  }
}

} // end namespace llvm

#endif // GET_REGINFO_MC_DESC

/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* Register Information Header Fragment                                       *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_REGINFO_HEADER
#undef GET_REGINFO_HEADER

#include "llvm/CodeGen/TargetRegisterInfo.h"

namespace llvm {

class SparcFrameLowering;

struct SparcGenRegisterInfo : public TargetRegisterInfo {
  explicit SparcGenRegisterInfo(unsigned RA, unsigned D = 0, unsigned E = 0,
      unsigned PC = 0, unsigned HwMode = 0);
  unsigned composeSubRegIndicesImpl(unsigned, unsigned) const override;
  LaneBitmask composeSubRegIndexLaneMaskImpl(unsigned, LaneBitmask) const override;
  LaneBitmask reverseComposeSubRegIndexLaneMaskImpl(unsigned, LaneBitmask) const override;
  const TargetRegisterClass *getSubClassWithSubReg(const TargetRegisterClass*, unsigned) const override;
  const RegClassWeight &getRegClassWeight(const TargetRegisterClass *RC) const override;
  unsigned getRegUnitWeight(unsigned RegUnit) const override;
  unsigned getNumRegPressureSets() const override;
  const char *getRegPressureSetName(unsigned Idx) const override;
  unsigned getRegPressureSetLimit(const MachineFunction &MF, unsigned Idx) const override;
  const int *getRegClassPressureSets(const TargetRegisterClass *RC) const override;
  const int *getRegUnitPressureSets(unsigned RegUnit) const override;
  ArrayRef<const char *> getRegMaskNames() const override;
  ArrayRef<const uint32_t *> getRegMasks() const override;
  /// Devirtualized TargetFrameLowering.
  static const SparcFrameLowering *getFrameLowering(
      const MachineFunction &MF);
};

namespace SP { // Register classes
  extern const TargetRegisterClass FCCRegsRegClass;
  extern const TargetRegisterClass ASRRegsRegClass;
  extern const TargetRegisterClass CoprocRegsRegClass;
  extern const TargetRegisterClass FPRegsRegClass;
  extern const TargetRegisterClass IntRegsRegClass;
  extern const TargetRegisterClass DFPRegsRegClass;
  extern const TargetRegisterClass I64RegsRegClass;
  extern const TargetRegisterClass CoprocPairRegClass;
  extern const TargetRegisterClass IntPairRegClass;
  extern const TargetRegisterClass LowDFPRegsRegClass;
  extern const TargetRegisterClass PRRegsRegClass;
  extern const TargetRegisterClass QFPRegsRegClass;
  extern const TargetRegisterClass LowQFPRegsRegClass;
} // end namespace SP

} // end namespace llvm

#endif // GET_REGINFO_HEADER

/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* Target Register and Register Classes Information                           *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_REGINFO_TARGET_DESC
#undef GET_REGINFO_TARGET_DESC

namespace llvm {

extern const MCRegisterClass SparcMCRegisterClasses[];

static const MVT::SimpleValueType VTLists[] = {
  /* 0 */ MVT::i1, MVT::Other,
  /* 2 */ MVT::i32, MVT::Other,
  /* 4 */ MVT::i32, MVT::i64, MVT::Other,
  /* 7 */ MVT::f32, MVT::Other,
  /* 9 */ MVT::f64, MVT::Other,
  /* 11 */ MVT::f128, MVT::Other,
  /* 13 */ MVT::v2i32, MVT::Other,
};

static const char *const SubRegIndexNameTable[] = { "sub_even", "sub_even64", "sub_odd", "sub_odd64", "sub_odd64_then_sub_even", "sub_odd64_then_sub_odd", "" };


static const LaneBitmask SubRegIndexLaneMaskTable[] = {
  LaneBitmask::getAll(),
  LaneBitmask(0x00000001), // sub_even
  LaneBitmask(0x00000003), // sub_even64
  LaneBitmask(0x00000002), // sub_odd
  LaneBitmask(0x0000000C), // sub_odd64
  LaneBitmask(0x00000004), // sub_odd64_then_sub_even
  LaneBitmask(0x00000008), // sub_odd64_then_sub_odd
 };



static const TargetRegisterInfo::RegClassInfo RegClassInfos[] = {
  // Mode = 0 (Default)
  { 1, 1, 1, VTLists+0 },    // FCCRegs
  { 32, 32, 32, VTLists+2 },    // ASRRegs
  { 32, 32, 32, VTLists+2 },    // CoprocRegs
  { 32, 32, 32, VTLists+7 },    // FPRegs
  { 32, 32, 32, VTLists+4 },    // IntRegs
  { 64, 64, 64, VTLists+9 },    // DFPRegs
  { 64, 64, 64, VTLists+5 },    // I64Regs
  { 64, 64, 64, VTLists+13 },    // CoprocPair
  { 64, 64, 64, VTLists+13 },    // IntPair
  { 64, 64, 64, VTLists+9 },    // LowDFPRegs
  { 64, 64, 64, VTLists+5 },    // PRRegs
  { 128, 128, 128, VTLists+11 },    // QFPRegs
  { 128, 128, 128, VTLists+11 },    // LowQFPRegs
};

static const TargetRegisterClass *const NullRegClasses[] = { nullptr };

static const uint32_t FCCRegsSubClassMask[] = {
  0x00000001, 
};

static const uint32_t ASRRegsSubClassMask[] = {
  0x00000002, 
};

static const uint32_t CoprocRegsSubClassMask[] = {
  0x00000004, 
  0x00000080, // sub_even
  0x00000080, // sub_odd
};

static const uint32_t FPRegsSubClassMask[] = {
  0x00000008, 
  0x00001200, // sub_even
  0x00001200, // sub_odd
  0x00001000, // sub_odd64_then_sub_even
  0x00001000, // sub_odd64_then_sub_odd
};

static const uint32_t IntRegsSubClassMask[] = {
  0x00000050, 
  0x00000100, // sub_even
  0x00000100, // sub_odd
};

static const uint32_t DFPRegsSubClassMask[] = {
  0x00000220, 
  0x00001800, // sub_even64
  0x00001800, // sub_odd64
};

static const uint32_t I64RegsSubClassMask[] = {
  0x00000040, 
  0x00000100, // sub_even
  0x00000100, // sub_odd
};

static const uint32_t CoprocPairSubClassMask[] = {
  0x00000080, 
};

static const uint32_t IntPairSubClassMask[] = {
  0x00000100, 
};

static const uint32_t LowDFPRegsSubClassMask[] = {
  0x00000200, 
  0x00001000, // sub_even64
  0x00001000, // sub_odd64
};

static const uint32_t PRRegsSubClassMask[] = {
  0x00000400, 
};

static const uint32_t QFPRegsSubClassMask[] = {
  0x00001800, 
};

static const uint32_t LowQFPRegsSubClassMask[] = {
  0x00001000, 
};

static const uint16_t SuperRegIdxSeqs[] = {
  /* 0 */ 1, 3, 0,
  /* 3 */ 2, 4, 0,
  /* 6 */ 1, 3, 5, 6, 0,
};

static const TargetRegisterClass *const I64RegsSuperclasses[] = {
  &SP::IntRegsRegClass,
  nullptr
};

static const TargetRegisterClass *const LowDFPRegsSuperclasses[] = {
  &SP::DFPRegsRegClass,
  nullptr
};

static const TargetRegisterClass *const LowQFPRegsSuperclasses[] = {
  &SP::QFPRegsRegClass,
  nullptr
};


namespace SP {   // Register class instances
  extern const TargetRegisterClass FCCRegsRegClass = {
    &SparcMCRegisterClasses[FCCRegsRegClassID],
    FCCRegsSubClassMask,
    SuperRegIdxSeqs + 2,
    LaneBitmask(0x00000001),
    0,
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass ASRRegsRegClass = {
    &SparcMCRegisterClasses[ASRRegsRegClassID],
    ASRRegsSubClassMask,
    SuperRegIdxSeqs + 2,
    LaneBitmask(0x00000001),
    0,
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass CoprocRegsRegClass = {
    &SparcMCRegisterClasses[CoprocRegsRegClassID],
    CoprocRegsSubClassMask,
    SuperRegIdxSeqs + 0,
    LaneBitmask(0x00000001),
    0,
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass FPRegsRegClass = {
    &SparcMCRegisterClasses[FPRegsRegClassID],
    FPRegsSubClassMask,
    SuperRegIdxSeqs + 6,
    LaneBitmask(0x00000001),
    0,
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass IntRegsRegClass = {
    &SparcMCRegisterClasses[IntRegsRegClassID],
    IntRegsSubClassMask,
    SuperRegIdxSeqs + 0,
    LaneBitmask(0x00000001),
    0,
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass DFPRegsRegClass = {
    &SparcMCRegisterClasses[DFPRegsRegClassID],
    DFPRegsSubClassMask,
    SuperRegIdxSeqs + 3,
    LaneBitmask(0x00000003),
    0,
    true, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass I64RegsRegClass = {
    &SparcMCRegisterClasses[I64RegsRegClassID],
    I64RegsSubClassMask,
    SuperRegIdxSeqs + 0,
    LaneBitmask(0x00000001),
    0,
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    I64RegsSuperclasses,
    nullptr
  };

  extern const TargetRegisterClass CoprocPairRegClass = {
    &SparcMCRegisterClasses[CoprocPairRegClassID],
    CoprocPairSubClassMask,
    SuperRegIdxSeqs + 2,
    LaneBitmask(0x00000003),
    0,
    true, /* HasDisjunctSubRegs */
    true, /* CoveredBySubRegs */
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass IntPairRegClass = {
    &SparcMCRegisterClasses[IntPairRegClassID],
    IntPairSubClassMask,
    SuperRegIdxSeqs + 2,
    LaneBitmask(0x00000003),
    0,
    true, /* HasDisjunctSubRegs */
    true, /* CoveredBySubRegs */
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass LowDFPRegsRegClass = {
    &SparcMCRegisterClasses[LowDFPRegsRegClassID],
    LowDFPRegsSubClassMask,
    SuperRegIdxSeqs + 3,
    LaneBitmask(0x00000003),
    0,
    true, /* HasDisjunctSubRegs */
    true, /* CoveredBySubRegs */
    LowDFPRegsSuperclasses,
    nullptr
  };

  extern const TargetRegisterClass PRRegsRegClass = {
    &SparcMCRegisterClasses[PRRegsRegClassID],
    PRRegsSubClassMask,
    SuperRegIdxSeqs + 2,
    LaneBitmask(0x00000001),
    0,
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass QFPRegsRegClass = {
    &SparcMCRegisterClasses[QFPRegsRegClassID],
    QFPRegsSubClassMask,
    SuperRegIdxSeqs + 2,
    LaneBitmask(0x0000000F),
    0,
    true, /* HasDisjunctSubRegs */
    true, /* CoveredBySubRegs */
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass LowQFPRegsRegClass = {
    &SparcMCRegisterClasses[LowQFPRegsRegClassID],
    LowQFPRegsSubClassMask,
    SuperRegIdxSeqs + 2,
    LaneBitmask(0x0000000F),
    0,
    true, /* HasDisjunctSubRegs */
    true, /* CoveredBySubRegs */
    LowQFPRegsSuperclasses,
    nullptr
  };

} // end namespace SP

namespace {
  const TargetRegisterClass* const RegisterClasses[] = {
    &SP::FCCRegsRegClass,
    &SP::ASRRegsRegClass,
    &SP::CoprocRegsRegClass,
    &SP::FPRegsRegClass,
    &SP::IntRegsRegClass,
    &SP::DFPRegsRegClass,
    &SP::I64RegsRegClass,
    &SP::CoprocPairRegClass,
    &SP::IntPairRegClass,
    &SP::LowDFPRegsRegClass,
    &SP::PRRegsRegClass,
    &SP::QFPRegsRegClass,
    &SP::LowQFPRegsRegClass,
  };
} // end anonymous namespace

static const TargetRegisterInfoDesc SparcRegInfoDesc[] = { // Extra Descriptors
  { 0, false },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, false },
  { 0, false },
  { 0, true },
  { 0, false },
  { 0, false },
  { 0, false },
  { 0, true },
  { 0, true },
  { 0, false },
  { 0, true },
  { 0, true },
  { 0, false },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, false },
  { 0, true },
  { 0, false },
  { 0, false },
  { 0, false },
  { 0, false },
  { 0, false },
  { 0, false },
  { 0, false },
  { 0, false },
  { 0, false },
  { 0, false },
  { 0, false },
  { 0, false },
  { 0, false },
  { 0, false },
  { 0, false },
  { 0, false },
  { 0, false },
  { 0, false },
  { 0, false },
  { 0, false },
  { 0, false },
  { 0, false },
  { 0, false },
  { 0, false },
  { 0, false },
  { 0, false },
  { 0, false },
  { 0, false },
  { 0, false },
  { 0, false },
  { 0, false },
  { 0, false },
  { 0, false },
  { 0, false },
  { 0, false },
  { 0, false },
  { 0, false },
  { 0, false },
  { 0, false },
  { 0, false },
  { 0, false },
  { 0, false },
  { 0, false },
  { 0, false },
  { 0, false },
  { 0, false },
  { 0, false },
  { 0, false },
  { 0, false },
  { 0, false },
  { 0, false },
  { 0, false },
  { 0, false },
  { 0, false },
  { 0, false },
  { 0, false },
  { 0, false },
  { 0, false },
  { 0, false },
  { 0, false },
  { 0, false },
  { 0, false },
  { 0, false },
  { 0, false },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, false },
  { 0, false },
  { 0, false },
  { 0, false },
  { 0, false },
  { 0, false },
  { 0, false },
  { 0, false },
  { 0, false },
  { 0, false },
  { 0, false },
  { 0, false },
  { 0, false },
  { 0, false },
  { 0, false },
  { 0, false },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
};
unsigned SparcGenRegisterInfo::composeSubRegIndicesImpl(unsigned IdxA, unsigned IdxB) const {
  static const uint8_t RowMap[6] = {
    0, 0, 0, 1, 0, 0, 
  };
  static const uint8_t Rows[2][6] = {
    { SP::sub_even, 0, SP::sub_odd, 0, 0, 0, },
    { SP::sub_odd64_then_sub_even, 0, SP::sub_odd64_then_sub_odd, 0, 0, 0, },
  };

  --IdxA; assert(IdxA < 6);
  --IdxB; assert(IdxB < 6);
  return Rows[RowMap[IdxA]][IdxB];
}

  struct MaskRolOp {
    LaneBitmask Mask;
    uint8_t  RotateLeft;
  };
  static const MaskRolOp LaneMaskComposeSequences[] = {
    { LaneBitmask(0xFFFFFFFF),  0 }, { LaneBitmask::getNone(), 0 },   // Sequence 0
    { LaneBitmask(0xFFFFFFFF),  1 }, { LaneBitmask::getNone(), 0 },   // Sequence 2
    { LaneBitmask(0xFFFFFFFF),  2 }, { LaneBitmask::getNone(), 0 },   // Sequence 4
    { LaneBitmask(0xFFFFFFFF),  3 }, { LaneBitmask::getNone(), 0 }  // Sequence 6
  };
  static const MaskRolOp *const CompositeSequences[] = {
    &LaneMaskComposeSequences[0], // to sub_even
    &LaneMaskComposeSequences[0], // to sub_even64
    &LaneMaskComposeSequences[2], // to sub_odd
    &LaneMaskComposeSequences[4], // to sub_odd64
    &LaneMaskComposeSequences[4], // to sub_odd64_then_sub_even
    &LaneMaskComposeSequences[6] // to sub_odd64_then_sub_odd
  };

LaneBitmask SparcGenRegisterInfo::composeSubRegIndexLaneMaskImpl(unsigned IdxA, LaneBitmask LaneMask) const {
  --IdxA; assert(IdxA < 6 && "Subregister index out of bounds");
  LaneBitmask Result;
  for (const MaskRolOp *Ops = CompositeSequences[IdxA]; Ops->Mask.any(); ++Ops) {
    LaneBitmask::Type M = LaneMask.getAsInteger() & Ops->Mask.getAsInteger();
    if (unsigned S = Ops->RotateLeft)
      Result |= LaneBitmask((M << S) | (M >> (LaneBitmask::BitWidth - S)));
    else
      Result |= LaneBitmask(M);
  }
  return Result;
}

LaneBitmask SparcGenRegisterInfo::reverseComposeSubRegIndexLaneMaskImpl(unsigned IdxA,  LaneBitmask LaneMask) const {
  LaneMask &= getSubRegIndexLaneMask(IdxA);
  --IdxA; assert(IdxA < 6 && "Subregister index out of bounds");
  LaneBitmask Result;
  for (const MaskRolOp *Ops = CompositeSequences[IdxA]; Ops->Mask.any(); ++Ops) {
    LaneBitmask::Type M = LaneMask.getAsInteger();
    if (unsigned S = Ops->RotateLeft)
      Result |= LaneBitmask((M >> S) | (M << (LaneBitmask::BitWidth - S)));
    else
      Result |= LaneBitmask(M);
  }
  return Result;
}

const TargetRegisterClass *SparcGenRegisterInfo::getSubClassWithSubReg(const TargetRegisterClass *RC, unsigned Idx) const {
  static const uint8_t Table[13][6] = {
    {	// FCCRegs
      0,	// sub_even
      0,	// sub_even64
      0,	// sub_odd
      0,	// sub_odd64
      0,	// sub_odd64_then_sub_even
      0,	// sub_odd64_then_sub_odd
    },
    {	// ASRRegs
      0,	// sub_even
      0,	// sub_even64
      0,	// sub_odd
      0,	// sub_odd64
      0,	// sub_odd64_then_sub_even
      0,	// sub_odd64_then_sub_odd
    },
    {	// CoprocRegs
      0,	// sub_even
      0,	// sub_even64
      0,	// sub_odd
      0,	// sub_odd64
      0,	// sub_odd64_then_sub_even
      0,	// sub_odd64_then_sub_odd
    },
    {	// FPRegs
      0,	// sub_even
      0,	// sub_even64
      0,	// sub_odd
      0,	// sub_odd64
      0,	// sub_odd64_then_sub_even
      0,	// sub_odd64_then_sub_odd
    },
    {	// IntRegs
      0,	// sub_even
      0,	// sub_even64
      0,	// sub_odd
      0,	// sub_odd64
      0,	// sub_odd64_then_sub_even
      0,	// sub_odd64_then_sub_odd
    },
    {	// DFPRegs
      10,	// sub_even -> LowDFPRegs
      0,	// sub_even64
      10,	// sub_odd -> LowDFPRegs
      0,	// sub_odd64
      0,	// sub_odd64_then_sub_even
      0,	// sub_odd64_then_sub_odd
    },
    {	// I64Regs
      0,	// sub_even
      0,	// sub_even64
      0,	// sub_odd
      0,	// sub_odd64
      0,	// sub_odd64_then_sub_even
      0,	// sub_odd64_then_sub_odd
    },
    {	// CoprocPair
      8,	// sub_even -> CoprocPair
      0,	// sub_even64
      8,	// sub_odd -> CoprocPair
      0,	// sub_odd64
      0,	// sub_odd64_then_sub_even
      0,	// sub_odd64_then_sub_odd
    },
    {	// IntPair
      9,	// sub_even -> IntPair
      0,	// sub_even64
      9,	// sub_odd -> IntPair
      0,	// sub_odd64
      0,	// sub_odd64_then_sub_even
      0,	// sub_odd64_then_sub_odd
    },
    {	// LowDFPRegs
      10,	// sub_even -> LowDFPRegs
      0,	// sub_even64
      10,	// sub_odd -> LowDFPRegs
      0,	// sub_odd64
      0,	// sub_odd64_then_sub_even
      0,	// sub_odd64_then_sub_odd
    },
    {	// PRRegs
      0,	// sub_even
      0,	// sub_even64
      0,	// sub_odd
      0,	// sub_odd64
      0,	// sub_odd64_then_sub_even
      0,	// sub_odd64_then_sub_odd
    },
    {	// QFPRegs
      13,	// sub_even -> LowQFPRegs
      12,	// sub_even64 -> QFPRegs
      13,	// sub_odd -> LowQFPRegs
      12,	// sub_odd64 -> QFPRegs
      13,	// sub_odd64_then_sub_even -> LowQFPRegs
      13,	// sub_odd64_then_sub_odd -> LowQFPRegs
    },
    {	// LowQFPRegs
      13,	// sub_even -> LowQFPRegs
      13,	// sub_even64 -> LowQFPRegs
      13,	// sub_odd -> LowQFPRegs
      13,	// sub_odd64 -> LowQFPRegs
      13,	// sub_odd64_then_sub_even -> LowQFPRegs
      13,	// sub_odd64_then_sub_odd -> LowQFPRegs
    },
  };
  assert(RC && "Missing regclass");
  if (!Idx) return RC;
  --Idx;
  assert(Idx < 6 && "Bad subreg");
  unsigned TV = Table[RC->getID()][Idx];
  return TV ? getRegClass(TV - 1) : nullptr;
}

/// Get the weight in units of pressure for this register class.
const RegClassWeight &SparcGenRegisterInfo::
getRegClassWeight(const TargetRegisterClass *RC) const {
  static const RegClassWeight RCWeightTable[] = {
    {1, 4},  	// FCCRegs
    {0, 0},  	// ASRRegs
    {0, 0},  	// CoprocRegs
    {1, 32},  	// FPRegs
    {1, 32},  	// IntRegs
    {2, 64},  	// DFPRegs
    {1, 32},  	// I64Regs
    {0, 0},  	// CoprocPair
    {2, 32},  	// IntPair
    {2, 32},  	// LowDFPRegs
    {1, 15},  	// PRRegs
    {4, 64},  	// QFPRegs
    {4, 32},  	// LowQFPRegs
  };
  return RCWeightTable[RC->getID()];
}

/// Get the weight in units of pressure for this register unit.
unsigned SparcGenRegisterInfo::
getRegUnitWeight(unsigned RegUnit) const {
  assert(RegUnit < 171 && "invalid register unit");
  static const uint8_t RUWeightTable[] = {
    1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, };
  return RUWeightTable[RegUnit];
}


// Get the number of dimensions of register pressure.
unsigned SparcGenRegisterInfo::getNumRegPressureSets() const {
  return 5;
}

// Get the name of this register unit pressure set.
const char *SparcGenRegisterInfo::
getRegPressureSetName(unsigned Idx) const {
  static const char *const PressureNameTable[] = {
    "FCCRegs",
    "PRRegs",
    "FPRegs",
    "IntRegs",
    "DFPRegs",
  };
  return PressureNameTable[Idx];
}

// Get the register unit pressure limit for this dimension.
// This limit must be adjusted dynamically for reserved registers.
unsigned SparcGenRegisterInfo::
getRegPressureSetLimit(const MachineFunction &MF, unsigned Idx) const {
  static const uint8_t PressureLimitTable[] = {
    4,  	// 0: FCCRegs
    15,  	// 1: PRRegs
    32,  	// 2: FPRegs
    32,  	// 3: IntRegs
    64,  	// 4: DFPRegs
  };
  return PressureLimitTable[Idx];
}

/// Table of pressure sets per register class or unit.
static const int RCSetsTable[] = {
  /* 0 */ 0, -1,
  /* 2 */ 1, -1,
  /* 4 */ 3, -1,
  /* 6 */ 2, 4, -1,
};

/// Get the dimensions of register pressure impacted by this register class.
/// Returns a -1 terminated array of pressure set IDs
const int* SparcGenRegisterInfo::
getRegClassPressureSets(const TargetRegisterClass *RC) const {
  static const uint8_t RCSetStartTable[] = {
    0,1,1,6,4,7,4,1,4,6,2,7,6,};
  return &RCSetsTable[RCSetStartTable[RC->getID()]];
}

/// Get the dimensions of register pressure impacted by this register unit.
/// Returns a -1 terminated array of pressure set IDs
const int* SparcGenRegisterInfo::
getRegUnitPressureSets(unsigned RegUnit) const {
  assert(RegUnit < 171 && "invalid register unit");
  static const uint8_t RUSetStartTable[] = {
    2,2,2,1,1,2,1,1,1,2,2,1,2,2,1,2,2,2,2,2,2,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,};
  return &RCSetsTable[RUSetStartTable[RegUnit]];
}

extern const MCRegisterDesc SparcRegDesc[];
extern const MCPhysReg SparcRegDiffLists[];
extern const LaneBitmask SparcLaneMaskLists[];
extern const char SparcRegStrings[];
extern const char SparcRegClassStrings[];
extern const MCPhysReg SparcRegUnitRoots[][2];
extern const uint16_t SparcSubRegIdxLists[];
extern const MCRegisterInfo::SubRegCoveredBits SparcSubRegIdxRanges[];
extern const uint16_t SparcRegEncodingTable[];
// SP Dwarf<->LLVM register mappings.
extern const MCRegisterInfo::DwarfLLVMRegPair SPDwarfFlavour0Dwarf2L[];
extern const unsigned SPDwarfFlavour0Dwarf2LSize;

extern const MCRegisterInfo::DwarfLLVMRegPair SPEHFlavour0Dwarf2L[];
extern const unsigned SPEHFlavour0Dwarf2LSize;

extern const MCRegisterInfo::DwarfLLVMRegPair SPDwarfFlavour0L2Dwarf[];
extern const unsigned SPDwarfFlavour0L2DwarfSize;

extern const MCRegisterInfo::DwarfLLVMRegPair SPEHFlavour0L2Dwarf[];
extern const unsigned SPEHFlavour0L2DwarfSize;

SparcGenRegisterInfo::
SparcGenRegisterInfo(unsigned RA, unsigned DwarfFlavour, unsigned EHFlavour,
      unsigned PC, unsigned HwMode)
  : TargetRegisterInfo(SparcRegInfoDesc, RegisterClasses, RegisterClasses+13,
             SubRegIndexNameTable, SubRegIndexLaneMaskTable,
             LaneBitmask(0xFFFFFFFF), RegClassInfos, HwMode) {
  InitMCRegisterInfo(SparcRegDesc, 236, RA, PC,
                     SparcMCRegisterClasses, 13,
                     SparcRegUnitRoots,
                     171,
                     SparcRegDiffLists,
                     SparcLaneMaskLists,
                     SparcRegStrings,
                     SparcRegClassStrings,
                     SparcSubRegIdxLists,
                     7,
                     SparcSubRegIdxRanges,
                     SparcRegEncodingTable);

  switch (DwarfFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    mapDwarfRegsToLLVMRegs(SPDwarfFlavour0Dwarf2L, SPDwarfFlavour0Dwarf2LSize, false);
    break;
  }
  switch (EHFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    mapDwarfRegsToLLVMRegs(SPEHFlavour0Dwarf2L, SPEHFlavour0Dwarf2LSize, true);
    break;
  }
  switch (DwarfFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    mapLLVMRegsToDwarfRegs(SPDwarfFlavour0L2Dwarf, SPDwarfFlavour0L2DwarfSize, false);
    break;
  }
  switch (EHFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    mapLLVMRegsToDwarfRegs(SPEHFlavour0L2Dwarf, SPEHFlavour0L2DwarfSize, true);
    break;
  }
}

static const MCPhysReg CSR_SaveList[] = { 0 };
static const uint32_t CSR_RegMask[] = { 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x000ffff0, 0x00000000, 0x000000ff, };
static const MCPhysReg RTCSR_SaveList[] = { 0 };
static const uint32_t RTCSR_RegMask[] = { 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000c00, 0x00000000, 0x00000008, };


ArrayRef<const uint32_t *> SparcGenRegisterInfo::getRegMasks() const {
  static const uint32_t *const Masks[] = {
    CSR_RegMask,
    RTCSR_RegMask,
  };
  return makeArrayRef(Masks);
}

ArrayRef<const char *> SparcGenRegisterInfo::getRegMaskNames() const {
  static const char *const Names[] = {
    "CSR",
    "RTCSR",
  };
  return makeArrayRef(Names);
}

const SparcFrameLowering *
SparcGenRegisterInfo::getFrameLowering(const MachineFunction &MF) {
  return static_cast<const SparcFrameLowering *>(
      MF.getSubtarget().getFrameLowering());
}

} // end namespace llvm

#endif // GET_REGINFO_TARGET_DESC

